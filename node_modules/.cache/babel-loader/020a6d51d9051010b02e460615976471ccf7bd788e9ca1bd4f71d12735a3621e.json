{"ast":null,"code":"import _initializerDefineProperty from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\nvar _dec, _class, _class2, _descriptor, _ABasicSceneModel;\nimport { AObjectState, ASerializable } from \"../../base\";\nimport { ASceneModel } from \"../../scene/ASceneModel\";\nimport { GetAppState } from \"../../appstate\";\nimport { AMaterialManager, ATexture } from \"../../rendering\";\nimport { Color, NodeTransform3D } from \"../../math\";\nimport { A3DModelLoader } from \"../../fileio\";\nimport { APointLightModel } from \"../../scene/lights\";\nexport let ABasicSceneModel = (_dec = ASerializable(\"ABasicSceneModel\"), _dec(_class = (_class2 = (_ABasicSceneModel = class ABasicSceneModel extends ASceneModel {\n  constructor(...args) {\n    super(...args);\n    _initializerDefineProperty(this, \"_sceneScale\", _descriptor, this);\n    this._textures = {};\n    this._3Dmodels = {};\n    this.viewLight = void 0;\n  }\n  get sceneScale() {\n    if (this._sceneScale === undefined) {\n      this._sceneScale = GetAppState().globalScale;\n    }\n    return this._sceneScale;\n  }\n  /**\n   * Loads a texture asynchronously and stores it in the textures dictionary\n   * @param path the path to the texture relative to the 'public/' directory\n   * @param name the name to associate with the texture. If not provided, the file name will be used.\n   * @returns {Promise<void>}\n   */\n  async loadTexture(path, name) {\n    if (name === undefined) {\n      name = path.replace(/^.*[\\\\/]/, '');\n    }\n    this._textures[name] = await ATexture.LoadAsync(path);\n    return;\n  }\n\n  // async loadTexture(name:string, public_path:string){\n  //     this._textures[name] = await ATexture.LoadAsync(public_path);\n  //     // const self = this;\n  //     // let texturePromise = ATexture.LoadAsync(public_path);\n  //     // texturePromise.then((tex:ATexture)=>{\n  //     //     // self._textures[name]=tex;\n  //     // },\n  //     //     (reason)=>{\n  //     //     console.log(reason);\n  //     //         throw new Error(`Did not find texture at public path ${public_path}`)\n  //     //     }\n  //     // )\n  //     // self._textures[name]= await texturePromise;\n  //     // return;\n  // }\n\n  getTexture(name) {\n    return this._textures[name];\n  }\n  addViewLight() {\n    this.viewLight = new APointLightModel(this.camera.pose, Color.FromString(\"#ffffff\"), 1, 1, 1);\n    this.addChild(this.viewLight);\n    this.attachViewLightToCamera();\n  }\n  attachViewLightToCamera() {\n    const self = this;\n    this.subscribe(this.camera.addPoseListener(() => {\n      self.viewLight.setTransform(self.camera.transform);\n    }), ABasicSceneModel._VIEW_LIGHT_SUBSCRIPTION_KEY);\n  }\n  detachViewLightFromCamera() {\n    this.unsubscribe(ABasicSceneModel._VIEW_LIGHT_SUBSCRIPTION_KEY);\n  }\n  async load3DModel(path, name, transform) {\n    /**\n     * Here we need to load the .ply file into an AObject3DModelWrapper instance\n     */\n    if (name === undefined) {\n      name = path.replace(/^.*[\\\\/]/, '');\n    }\n    this._3Dmodels[name] = await A3DModelLoader.LoadFromPath(path);\n    this._3Dmodels[name].sourceTransform = transform !== null && transform !== void 0 ? transform : new NodeTransform3D();\n    return;\n  }\n  get3DModel(name) {\n    return this._3Dmodels[name];\n  }\n  async LoadBasicShaders() {\n    let appState = GetAppState();\n    await appState.loadShaderMaterialModel(AMaterialManager.DefaultMaterials.RGBA_SHADER);\n  }\n  async PreloadAssets() {\n    await super.PreloadAssets();\n    await this.LoadBasicShaders();\n  }\n}, _ABasicSceneModel._VIEW_LIGHT_SUBSCRIPTION_KEY = \"VIEW_LIGHT_CAMERA_UPDATE_SUB\", _ABasicSceneModel), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"_sceneScale\", [AObjectState], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);","map":{"version":3,"names":["AObjectState","ASerializable","ASceneModel","GetAppState","AMaterialManager","ATexture","Color","NodeTransform3D","A3DModelLoader","APointLightModel","ABasicSceneModel","_dec","_class","_class2","_ABasicSceneModel","constructor","args","_initializerDefineProperty","_descriptor","_textures","_3Dmodels","viewLight","sceneScale","_sceneScale","undefined","globalScale","loadTexture","path","name","replace","LoadAsync","getTexture","addViewLight","camera","pose","FromString","addChild","attachViewLightToCamera","self","subscribe","addPoseListener","setTransform","transform","_VIEW_LIGHT_SUBSCRIPTION_KEY","detachViewLightFromCamera","unsubscribe","load3DModel","LoadFromPath","sourceTransform","get3DModel","LoadBasicShaders","appState","loadShaderMaterialModel","DefaultMaterials","RGBA_SHADER","PreloadAssets","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/starter/scene/ABasicSceneModel.ts"],"sourcesContent":["import {AObjectState, ASerializable} from \"../../base\";\nimport {ASceneModel} from \"../../scene/ASceneModel\";\nimport {AppState, GetAppState} from \"../../appstate\";\nimport {AMaterialManager, ATexture} from \"../../rendering\";\nimport {AObject3DModelWrapper} from \"../../geometry\";\nimport {Color, NodeTransform3D} from \"../../math\";\nimport {A3DModelLoader} from \"../../fileio\";\nimport {APointLightModel} from \"../../scene/lights\";\n\n\n@ASerializable(\"ABasicSceneModel\")\nexport abstract class ABasicSceneModel extends ASceneModel{\n    @AObjectState _sceneScale!:number;\n    get sceneScale(){\n        if(this._sceneScale === undefined){\n            this._sceneScale = GetAppState().globalScale;\n        }\n        return this._sceneScale;\n    }\n    _textures:{[name:string]:ATexture}={};\n    _3Dmodels:{[name:string]:AObject3DModelWrapper}={};\n\n    viewLight!:APointLightModel;\n    static _VIEW_LIGHT_SUBSCRIPTION_KEY:string =\"VIEW_LIGHT_CAMERA_UPDATE_SUB\"\n\n    /**\n     * Loads a texture asynchronously and stores it in the textures dictionary\n     * @param path the path to the texture relative to the 'public/' directory\n     * @param name the name to associate with the texture. If not provided, the file name will be used.\n     * @returns {Promise<void>}\n     */\n    async loadTexture(path:string, name?:string){\n        if(name === undefined){\n            name = path.replace(/^.*[\\\\/]/, '')\n        }\n        this._textures[name] = await ATexture.LoadAsync(path);\n        return;\n    }\n\n    // async loadTexture(name:string, public_path:string){\n    //     this._textures[name] = await ATexture.LoadAsync(public_path);\n    //     // const self = this;\n    //     // let texturePromise = ATexture.LoadAsync(public_path);\n    //     // texturePromise.then((tex:ATexture)=>{\n    //     //     // self._textures[name]=tex;\n    //     // },\n    //     //     (reason)=>{\n    //     //     console.log(reason);\n    //     //         throw new Error(`Did not find texture at public path ${public_path}`)\n    //     //     }\n    //     // )\n    //     // self._textures[name]= await texturePromise;\n    //     // return;\n    // }\n\n    getTexture(name:string){\n        return this._textures[name];\n    }\n\n\n    addViewLight(){\n        this.viewLight = new APointLightModel(this.camera.pose, Color.FromString(\"#ffffff\"),1, 1, 1);\n        this.addChild(this.viewLight)\n        this.attachViewLightToCamera();\n    }\n\n    attachViewLightToCamera(){\n        const self = this;\n        this.subscribe(this.camera.addPoseListener(()=>{\n            self.viewLight.setTransform(self.camera.transform);\n        }), ABasicSceneModel._VIEW_LIGHT_SUBSCRIPTION_KEY);\n    }\n    detachViewLightFromCamera(){\n        this.unsubscribe(ABasicSceneModel._VIEW_LIGHT_SUBSCRIPTION_KEY);\n    }\n\n    async load3DModel(path:string, name?:string, transform?:NodeTransform3D){\n        /**\n         * Here we need to load the .ply file into an AObject3DModelWrapper instance\n         */\n        if(name === undefined){\n            name = path.replace(/^.*[\\\\/]/, '')\n        }\n        this._3Dmodels[name] = await A3DModelLoader.LoadFromPath(path)\n        this._3Dmodels[name].sourceTransform = transform??new NodeTransform3D();\n        return;\n    }\n\n    get3DModel(name:string){\n        return this._3Dmodels[name];\n    }\n\n\n    async LoadBasicShaders(){\n        let appState = GetAppState();\n        await appState.loadShaderMaterialModel(AMaterialManager.DefaultMaterials.RGBA_SHADER);\n    }\n\n    async PreloadAssets(){\n        await super.PreloadAssets();\n        await this.LoadBasicShaders();\n    }\n    abstract initAppState(appState:AppState):void;\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}