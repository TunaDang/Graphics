{"ast":null,"code":"var _dec, _class;\nimport * as THREE from \"three\";\nimport { ATexture } from \"../ATexture\";\nimport { ShaderManager } from \"./ShaderManager\";\nimport { AMaterialModelBase } from \"./AMaterialModel\";\nimport { AShaderMaterial } from \"./AShaderMaterial\";\nimport { Color } from \"../../math\";\nimport { folder } from \"leva\";\nimport { TextureKeyForName, TextureProvidedKeyForName } from \"../../defines\";\nimport { assert } from \"../../basictypes\";\nimport { GUISpecs } from \"../../GUISpecs\";\nimport { GetAAppState } from \"../../appstate/AAppState\";\nimport { GetAppState } from \"../../appstate\";\nimport { ASerializable } from \"../../base\";\nfunction getTextureFromFile(file, callback) {\n  let userImageURL = URL.createObjectURL(file);\n  let loader = new THREE.TextureLoader();\n  loader.setCrossOrigin(\"\");\n  loader.load(userImageURL, callback);\n}\nexport class AShaderModelBase extends AMaterialModelBase {\n  constructor(...args) {\n    super(...args);\n    this.uniforms = void 0;\n    this.textures = {};\n    this.sharedUniforms = {};\n    this.ShaderMaterialClass = AShaderMaterial;\n    // UniformSpecs:[]\n    this._shaderSource = void 0;\n    this._shaderSettings = {};\n  }\n  get vertexSource() {\n    return this._shaderSource.vertexSource;\n  }\n  get fragSource() {\n    return this._shaderSource.fragSource;\n  }\n  get settingArgs() {\n    return this._shaderSettings;\n  }\n  get usesLights() {\n    return this.settingArgs['lights'];\n  }\n  get supportsTransparency() {\n    return this.settingArgs['transparent'];\n  }\n  get usesVertexColors() {\n    return this.settingArgs['vertexColors'];\n  }\n  set usesVertexColors(value) {\n    this.settingArgs['vertexColors'] = value;\n  }\n  get rendersWireframe() {\n    return this.settingArgs['wireframe'];\n  }\n\n  // public shaderSourcesLoadedPromise!:Promise<ShaderProgramSource>;\n\n  get sourcesLoadedPromise() {\n    // if(this._shaderSource instanceof Promise<ShaderProgramSource>){\n    //     return this._shaderSource;\n    // }else{\n    return this._shaderSource.sourcesLoadedPromise;\n    // }\n  }\n  getTextureGUIParams(material) {\n    let texs = {};\n    for (let t in material.textures) {\n      texs = {\n        ...texs,\n        ...AShaderModelBase.ShaderTextureGUIUpload(material, t)\n      };\n    }\n    return {\n      Textures: folder({\n        ...texs\n      }, {\n        collapsed: false\n      })\n    };\n  }\n  static ShaderUniformGUIColorControl(material, paramKey) {\n    const paramName = paramKey ? paramKey : 'color';\n    let rval = {};\n    rval[paramName] = {\n      value: material.getUniformValue(paramName) ? Color.FromTHREEVector4(material.getUniformValue(paramName)).toHexString() : \"#aaaaaa\",\n      onChange: v => {\n        let selectedColor = Color.FromString(v);\n        material.setUniformColor(paramName, selectedColor);\n      }\n    };\n    return rval;\n  }\n  static ShaderUniformGUIControl(material, paramName, defaultValue, otherSpecs) {\n    let rval = {};\n    rval[paramName] = {\n      value: material.getUniformValue(paramName) ? material.getUniformValue(paramName) : defaultValue,\n      onChange: v => {\n        material.setUniform(paramName, v, 'float');\n      },\n      ...otherSpecs\n    };\n    return rval;\n  }\n  static ShaderTextureGUIUpload(material, paramName, otherSpecs) {\n    let rval = {};\n    rval[TextureKeyForName(paramName)] = {\n      image: undefined,\n      onChange: v => {\n        if (v) {\n          let loader = new THREE.TextureLoader();\n          loader.setCrossOrigin(\"\");\n          loader.load(v, tex => {\n            let atex = new ATexture();\n            atex._setTHREETexture(tex);\n            material.setTexture(paramName, atex);\n          });\n        }\n      }\n    };\n    return rval;\n  }\n\n  // async _setShader(shaderName:string){\n  //     const self = this;\n  //     self._shaderSource= await ShaderManager.GetShaderSource(shaderName);\n  //     return self._shaderSource;\n  // }\n\n  setShader(shaderName) {\n    // this.shaderSourcesLoadedPromise = this._setShader(shaderName);\n    this._shaderSource = ShaderManager.GetShaderSource(shaderName);\n  }\n  setUniformsDict(uniforms) {\n    this.uniforms = uniforms;\n  }\n  setTexture(name, texture) {\n    if (texture) {\n      var _this$getTexture;\n      if (texture instanceof ATexture) {\n        this.textures[name] = texture;\n      } else {\n        this.textures[name] = new ATexture(texture);\n      }\n      this.setUniform(TextureKeyForName(name), (_this$getTexture = this.getTexture(name)) === null || _this$getTexture === void 0 ? void 0 : _this$getTexture.threejs, 't');\n      this.setUniform(TextureProvidedKeyForName(name), !!this.getTexture(name), 'bool');\n    } else if (texture === undefined) {\n      this.textures[name] = texture;\n      this.setUniform(TextureKeyForName(name), null, 't');\n      this.setUniform(TextureProvidedKeyForName(name), false, 'bool');\n    }\n  }\n  getTexture(name) {\n    return this.textures[name];\n  }\n  setUniform(name, value, type) {\n    let uval = {\n      value: value\n    };\n    if (type !== undefined) {\n      uval['type'] = type;\n    }\n    // @ts-ignore\n    this.uniforms[name] = uval;\n  }\n  getUniformValue(name) {\n    let uniform = this.uniforms[name];\n    return uniform === null || uniform === void 0 ? void 0 : uniform.value;\n  }\n  _CreateTHREEJS() {\n    let uniforms = {\n      uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib['lights'], {\n        ...this.uniforms\n      }])\n    };\n    return new this.materialClass({\n      vertexShader: this.vertexSource,\n      fragmentShader: this.fragSource,\n      ...this.settingArgs,\n      ...this.defaults,\n      ...uniforms,\n      ...this.sharedParameters\n    });\n  }\n  CreateMaterial(uniforms = {}, ...args) {\n    let material = new this.ShaderMaterialClass(...args);\n    material.init(this);\n    for (let uniformName in uniforms) {\n      material.setUniform(uniformName, uniforms[uniformName]);\n    }\n    return material;\n  }\n}\nexport let AShaderModel = (_dec = ASerializable(\"AShaderModel\"), _dec(_class = class AShaderModel extends AShaderModelBase {\n  get instanceControlsInGUI() {\n    return this._instanceControlsInGUI;\n  }\n  get hasInstanceControlsFolderInGUI() {\n    return this._instanceControlsInGUI;\n  }\n  constructor(shaderName, shaderSettings, uniforms, sharedUniforms, ...args) {\n    super(shaderName, THREE.ShaderMaterial, ...args);\n    this.instanceControlSpecsFolderName = void 0;\n    this._instanceControlsInGUI = false;\n    this._instanceControlSpecs = {};\n    this._shaderSettings = shaderSettings !== null && shaderSettings !== void 0 ? shaderSettings : {\n      lights: true,\n      transparent: true,\n      side: THREE.DoubleSide,\n      opacity: 1.0\n    };\n    this.uniforms = uniforms !== null && uniforms !== void 0 ? uniforms : {};\n    this.sharedUniforms = sharedUniforms !== null && sharedUniforms !== void 0 ? sharedUniforms : {};\n    if (shaderName) {\n      this.setShader(shaderName);\n    }\n  }\n  AddInstancesControlToGUI(folder_name) {\n    assert(!this.hasInstanceControlsFolderInGUI, \"Tried to add instances control folder for the same model twice\");\n    let appState = GetAppState();\n    let new_folder_name;\n    if (folder_name !== undefined) {\n      new_folder_name = appState._GetUniqueFolderName(folder_name);\n    } else {\n      new_folder_name = appState._GetUniqueFolderName(this._shaderSource.name);\n    }\n    this._instanceControlsInGUI = true;\n    this.instanceControlSpecsFolderName = new_folder_name;\n    appState.addControlSpecGroup(this.instanceControlSpecsFolderName, this._getInstancesControlSpec());\n  }\n  _getInstancesControlSpec() {\n    let rspec = {};\n    for (let k in this._instanceControlSpecs) {\n      rspec[k + \"_\" + this.instanceControlSpecsFolderName] = this._instanceControlSpecs[k];\n    }\n    return rspec;\n  }\n  addInstanceControlSpec(name, spec, addFolderNameToKeys = true, collapsed = true) {\n    this._instanceControlSpecs[name] = GUISpecs.MakeFolder(name, spec, addFolderNameToKeys, collapsed);\n    this._updateGUI();\n  }\n  _updateGUI() {\n    let appState = GetAppState();\n    appState.updateControlSpecEntry(this.instanceControlSpecsFolderName, this._getInstancesControlSpec());\n  }\n  static async ShaderSourceLoaded(shaderName) {\n    let shaderSource = ShaderManager.GetShaderSource(shaderName);\n    if (shaderSource === undefined) {\n      await ShaderManager.LoadShader(shaderName);\n    }\n  }\n  static async CreateModel(shaderName, ...args) {\n    if (shaderName === undefined) {\n      throw new Error(\"must provide shader name\");\n    }\n    await AShaderModel.ShaderSourceLoaded(shaderName);\n    return new this(shaderName, ...args);\n  }\n  AddStandardUniforms(mat) {\n    let appState = GetAAppState();\n    function checkAppState(name, initialValue, min, max, step) {\n      if (appState.getState(name) === undefined) {\n        appState.addSliderControl(name, initialValue !== null && initialValue !== void 0 ? initialValue : 1.0, min, max, step);\n      }\n    }\n    checkAppState('ambient', 0.15, 0, 2, 0.01);\n    checkAppState('diffuse', 1.0, 0, 3, 0.01);\n    checkAppState('specular', 1.0, 0, 3, 0.01);\n    checkAppState('specularExp', 2.5, 0, 5, 0.1);\n    function setMatUniformFunc(name) {\n      function setu() {\n        mat.setUniform(name, appState.getState(name));\n      }\n      setu();\n      mat.subscribe(appState.addStateValueListener(name, () => {\n        setu();\n      }), `${name}_update`);\n    }\n    setMatUniformFunc('ambient');\n    setMatUniformFunc('diffuse');\n    setMatUniformFunc('specular');\n    setMatUniformFunc('specularExp');\n\n    //\n    // function setAmbient(){\n    //     mat.setUniform('ambient', appState.getState(AAppState.AppStateDefaultKeys.AmbientLight));\n    // }\n    // setAmbient();\n    // mat.subscribe(appState.addStateValueListener(AAppState.AppStateDefaultKeys.AmbientLight, ()=>{\n    //     setAmbient();\n    // }), \"ambient_update\");\n  }\n}) || _class);","map":{"version":3,"names":["THREE","ATexture","ShaderManager","AMaterialModelBase","AShaderMaterial","Color","folder","TextureKeyForName","TextureProvidedKeyForName","assert","GUISpecs","GetAAppState","GetAppState","ASerializable","getTextureFromFile","file","callback","userImageURL","URL","createObjectURL","loader","TextureLoader","setCrossOrigin","load","AShaderModelBase","constructor","args","uniforms","textures","sharedUniforms","ShaderMaterialClass","_shaderSource","_shaderSettings","vertexSource","fragSource","settingArgs","usesLights","supportsTransparency","usesVertexColors","value","rendersWireframe","sourcesLoadedPromise","getTextureGUIParams","material","texs","t","ShaderTextureGUIUpload","Textures","collapsed","ShaderUniformGUIColorControl","paramKey","paramName","rval","getUniformValue","FromTHREEVector4","toHexString","onChange","v","selectedColor","FromString","setUniformColor","ShaderUniformGUIControl","defaultValue","otherSpecs","setUniform","image","undefined","tex","atex","_setTHREETexture","setTexture","setShader","shaderName","GetShaderSource","setUniformsDict","name","texture","_this$getTexture","getTexture","threejs","type","uval","uniform","_CreateTHREEJS","UniformsUtils","merge","UniformsLib","materialClass","vertexShader","fragmentShader","defaults","sharedParameters","CreateMaterial","init","uniformName","AShaderModel","_dec","_class","instanceControlsInGUI","_instanceControlsInGUI","hasInstanceControlsFolderInGUI","shaderSettings","ShaderMaterial","instanceControlSpecsFolderName","_instanceControlSpecs","lights","transparent","side","DoubleSide","opacity","AddInstancesControlToGUI","folder_name","appState","new_folder_name","_GetUniqueFolderName","addControlSpecGroup","_getInstancesControlSpec","rspec","k","addInstanceControlSpec","spec","addFolderNameToKeys","MakeFolder","_updateGUI","updateControlSpecEntry","ShaderSourceLoaded","shaderSource","LoadShader","CreateModel","Error","AddStandardUniforms","mat","checkAppState","initialValue","min","max","step","getState","addSliderControl","setMatUniformFunc","setu","subscribe","addStateValueListener"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/rendering/material/AShaderModel.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport {IUniform} from \"three\";\nimport {ATexture} from \"../ATexture\";\nimport {ShaderManager, AShaderProgramSource} from \"./ShaderManager\";\nimport {AMaterialModelBase} from \"./AMaterialModel\";\nimport {AShaderMaterial} from \"./AShaderMaterial\";\nimport type {ShaderMaterialParameters} from \"three/src/materials/ShaderMaterial\";\nimport {Color} from \"../../math\";\nimport {button, folder} from \"leva\";\nimport {TextureKeyForName, TextureProvidedKeyForName} from \"../../defines\";\nimport {assert, ClassInterface} from \"../../basictypes\";\nimport {GUISpecs, GUIControlSpec} from \"../../GUISpecs\";\nimport {GetAAppState} from \"../../appstate/AAppState\";\nimport {GetAppState} from \"../../appstate\";\nimport {ASerializable} from \"../../base\";\n\nexport type ShaderUniformDict = {[name:string]:IUniform<any>};\n\n\nfunction getTextureFromFile(file: File, callback:(texture:THREE.Texture)=>void) {\n    let userImageURL = URL.createObjectURL(file);\n    let loader = new THREE.TextureLoader();\n    loader.setCrossOrigin(\"\");\n    loader.load(userImageURL, callback);\n}\n\n\n\n\nexport abstract class AShaderModelBase<ParamInterface extends {[name:string]:any}> extends AMaterialModelBase<ParamInterface>{\n    uniforms!:ShaderUniformDict;\n    public textures:{[name:string]:ATexture|undefined}={};\n    public sharedUniforms:ShaderUniformDict={};\n    ShaderMaterialClass:ClassInterface<AShaderMaterial>=AShaderMaterial;\n\n    // UniformSpecs:[]\n\n    protected _shaderSource!:AShaderProgramSource;\n    get vertexSource(){return this._shaderSource.vertexSource;}\n    get fragSource(){return this._shaderSource.fragSource;}\n\n    protected _shaderSettings:ShaderMaterialParameters={};\n    get settingArgs(){return this._shaderSettings;}\n    get usesLights(){return this.settingArgs['lights'];}\n    get supportsTransparency(){return this.settingArgs['transparent'];}\n    get usesVertexColors(){return this.settingArgs['vertexColors'];}\n    set usesVertexColors(value:boolean|undefined){this.settingArgs['vertexColors']=value;}\n    get rendersWireframe(){return this.settingArgs['wireframe'];}\n\n    // public shaderSourcesLoadedPromise!:Promise<ShaderProgramSource>;\n\n\n    get sourcesLoadedPromise(){\n        // if(this._shaderSource instanceof Promise<ShaderProgramSource>){\n        //     return this._shaderSource;\n        // }else{\n            return this._shaderSource.sourcesLoadedPromise;\n        // }\n\n    }\n\n\n\n\n\n    getTextureGUIParams(material:AShaderMaterial) {\n        let texs = {}\n        for(let t in material.textures){\n            texs = {\n                ...texs,\n                ...AShaderModelBase.ShaderTextureGUIUpload(material, t),\n            }\n        }\n        return {\n            Textures: folder({\n                    ...texs\n                },\n                {collapsed: false}\n            ),\n        }\n    }\n\n    static ShaderUniformGUIColorControl(material:AShaderMaterial, paramKey?:string){\n        const paramName = paramKey?paramKey:'color';\n        let rval:{[name:string]:any} = {};\n        rval[paramName] = {\n            value: material.getUniformValue(paramName)?Color.FromTHREEVector4(material.getUniformValue(paramName)).toHexString():\"#aaaaaa\",\n            onChange: (v: string) => {\n                let selectedColor = Color.FromString(v);\n                material.setUniformColor(paramName, selectedColor);\n            },\n        }\n        return rval;\n    }\n\n    static ShaderUniformGUIControl(material:AShaderMaterial, paramName:string, defaultValue:any, otherSpecs:{[name:string]:any}){\n        let rval:{[name:string]:any} = {};\n        rval[paramName] = {\n            value: material.getUniformValue(paramName)?material.getUniformValue(paramName):defaultValue,\n            onChange: (v: string) => {\n                material.setUniform(paramName, v, 'float');\n            },\n            ...otherSpecs\n        }\n        return rval;\n    }\n\n    static ShaderTextureGUIUpload(material:AShaderMaterial, paramName:string, otherSpecs?:{[name:string]:any}){\n        let rval:{[name:string]:any} = {};\n        rval[TextureKeyForName(paramName)] ={\n            image: undefined,\n            onChange:(v:any)=>{\n                if(v) {\n                    let loader = new THREE.TextureLoader();\n                    loader.setCrossOrigin(\"\");\n                    loader.load(v, (tex:THREE.Texture)=>{\n                        let atex = new ATexture();\n                        atex._setTHREETexture(tex);\n                        material.setTexture(paramName, atex);\n                    });\n                }\n            }\n        }\n        return rval;\n    }\n\n\n\n    // async _setShader(shaderName:string){\n    //     const self = this;\n    //     self._shaderSource= await ShaderManager.GetShaderSource(shaderName);\n    //     return self._shaderSource;\n    // }\n\n    setShader(shaderName:string){\n        // this.shaderSourcesLoadedPromise = this._setShader(shaderName);\n        this._shaderSource= ShaderManager.GetShaderSource(shaderName);\n    }\n\n    setUniformsDict(uniforms:ShaderUniformDict){\n        this.uniforms = uniforms;\n    }\n    setTexture(name:string, texture?:ATexture|string){\n        if(texture) {\n            if (texture instanceof ATexture) {\n                this.textures[name] = texture;\n            } else {\n                this.textures[name] = new ATexture(texture);\n            }\n            this.setUniform(TextureKeyForName(name), this.getTexture(name)?.threejs, 't');\n            this.setUniform(TextureProvidedKeyForName(name), !!this.getTexture(name), 'bool');\n        }else if(texture===undefined){\n            this.textures[name] = texture;\n            this.setUniform(TextureKeyForName(name), null, 't');\n            this.setUniform(TextureProvidedKeyForName(name), false, 'bool');\n        }\n    }\n\n    getTexture(name:string){\n        return this.textures[name];\n    }\n\n    setUniform(name:string, value:any, type?:string) {\n        let uval: { [name: string]: any } = {value:value};\n        if (type !== undefined) {\n            uval['type'] = type;\n        }\n        // @ts-ignore\n        this.uniforms[name] = uval;\n    }\n\n    getUniformValue(name:string) {\n        let uniform = this.uniforms[name];\n        return uniform?.value;\n    }\n\n    _CreateTHREEJS(){\n        let uniforms = {uniforms:THREE.UniformsUtils.merge([\n                THREE.UniformsLib['lights'],\n                {...this.uniforms}\n            ])};\n        return new this.materialClass({\n            vertexShader: this.vertexSource,\n            fragmentShader: this.fragSource,\n            ...this.settingArgs,\n            ...this.defaults,\n            ...uniforms,\n            ...this.sharedParameters,\n        });\n    }\n\n    CreateMaterial(uniforms:{[name:string]:any}={}, ...args:any[]){\n        let material =  new this.ShaderMaterialClass(...args);\n        material.init(this);\n        for(let uniformName in uniforms){\n            material.setUniform(uniformName, uniforms[uniformName]);\n        }\n        return material;\n    }\n\n}\n\nexport interface CreatesShaderModels{\n    CreateModel(...args:any[]):Promise<AShaderModel>;\n}\n\n@ASerializable(\"AShaderModel\")\nexport class AShaderModel extends AShaderModelBase<{[name:string]:any}>{\n    instanceControlSpecsFolderName!:string;\n    _instanceControlsInGUI:boolean = false;\n    get instanceControlsInGUI(){return this._instanceControlsInGUI;}\n    _instanceControlSpecs:{[name:string]:GUIControlSpec}={}\n\n    get hasInstanceControlsFolderInGUI(){\n        return this._instanceControlsInGUI;\n    }\n\n    constructor(\n        shaderName?:string,\n        shaderSettings?:ShaderMaterialParameters,\n        uniforms?:ShaderUniformDict,\n        sharedUniforms?:ShaderUniformDict,\n        ...args:any[]\n    ) {\n        super(shaderName, THREE.ShaderMaterial, ...args);\n        this._shaderSettings = shaderSettings??{\n            lights:true,\n            transparent: true,\n            side: THREE.DoubleSide,\n            opacity:1.0\n        };\n        this.uniforms=uniforms??{};\n        this.sharedUniforms=sharedUniforms??{};\n        if(shaderName) {\n            this.setShader(shaderName);\n        }\n    }\n\n    AddInstancesControlToGUI(folder_name?:string){\n        assert(!this.hasInstanceControlsFolderInGUI, \"Tried to add instances control folder for the same model twice\")\n        let appState = GetAppState();\n        let new_folder_name:string;\n        if(folder_name!==undefined){\n            new_folder_name =appState._GetUniqueFolderName(folder_name);\n        }else{\n            new_folder_name =appState._GetUniqueFolderName(this._shaderSource.name);\n        }\n        this._instanceControlsInGUI = true;\n        this.instanceControlSpecsFolderName = new_folder_name;\n        appState.addControlSpecGroup(this.instanceControlSpecsFolderName, this._getInstancesControlSpec());\n    }\n\n    _getInstancesControlSpec(){\n        let rspec:GUIControlSpec = {};\n        for(let k in this._instanceControlSpecs){\n            rspec[k+\"_\"+this.instanceControlSpecsFolderName]=this._instanceControlSpecs[k];\n        }\n        return rspec;\n    }\n\n    addInstanceControlSpec(name:string, spec:GUIControlSpec, addFolderNameToKeys=true, collapsed=true){\n        this._instanceControlSpecs[name] = GUISpecs.MakeFolder(name, spec, addFolderNameToKeys, collapsed);\n        this._updateGUI();\n    }\n\n    _updateGUI(){\n        let appState = GetAppState();\n        appState.updateControlSpecEntry(this.instanceControlSpecsFolderName, this._getInstancesControlSpec());\n    }\n\n\n    static async ShaderSourceLoaded(shaderName:string){\n        let shaderSource = ShaderManager.GetShaderSource(shaderName);\n        if(shaderSource === undefined){\n            await ShaderManager.LoadShader(shaderName);\n        }\n    }\n\n    static async CreateModel(shaderName?:string, ...args:any[]){\n        if(shaderName ===undefined){\n            throw new Error(\"must provide shader name\")\n        }\n        await AShaderModel.ShaderSourceLoaded(shaderName);\n        return new this(shaderName, ...args);\n    }\n\n    AddStandardUniforms(mat:AShaderMaterial){\n        let appState = GetAAppState();\n        function checkAppState(name:string, initialValue?:number, min?:number, max?:number, step?:number){\n            if(appState.getState(name)===undefined){\n                appState.addSliderControl(name, initialValue??1.0, min, max, step);\n            }\n        }\n\n        checkAppState('ambient', 0.15, 0, 2, 0.01);\n        checkAppState('diffuse', 1.0, 0, 3, 0.01);\n        checkAppState('specular', 1.0, 0, 3, 0.01);\n        checkAppState('specularExp', 2.5, 0, 5, 0.1);\n\n        function setMatUniformFunc(name:string){\n            function setu(){\n                mat.setUniform(name, appState.getState(name));\n            }\n            setu();\n            mat.subscribe(appState.addStateValueListener(name, ()=>{\n                setu();\n            }), `${name}_update`);\n        }\n\n        setMatUniformFunc('ambient');\n        setMatUniformFunc('diffuse');\n        setMatUniformFunc('specular');\n        setMatUniformFunc('specularExp');\n\n        //\n        // function setAmbient(){\n        //     mat.setUniform('ambient', appState.getState(AAppState.AppStateDefaultKeys.AmbientLight));\n        // }\n        // setAmbient();\n        // mat.subscribe(appState.addStateValueListener(AAppState.AppStateDefaultKeys.AmbientLight, ()=>{\n        //     setAmbient();\n        // }), \"ambient_update\");\n    }\n\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}