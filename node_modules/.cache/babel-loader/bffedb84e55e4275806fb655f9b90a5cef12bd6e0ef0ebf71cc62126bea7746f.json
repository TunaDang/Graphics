{"ast":null,"code":"/**\n * Base class for views in the Anigraph MVC scheme.\n * The primary responsibility for each view subclass is to specify how a model translates into Three.js rendering calls. The view itself should hold Three.js objects and make them available to controllers for specifying interactions.\n * Views should always be initialize\n */\n\nimport { AObject } from \"../aobject\";\n\n// export interface AViewInterface extends AObject {\n//     threejs: THREE.Object3D;\n//     model:AModelInterface;\n//     controller:AControllerInterface;\n// }\n\n/**\n * Base View Class\n */\nexport class AView extends AObject {\n  constructor(...args) {\n    super(...args);\n    /**\n     * The three.js object for this view. Should be a subclass of THREE.Object3D\n     * @type {THREE.Object3D}\n     */\n    this._threejs = void 0;\n    this._controller = void 0;\n  }\n  get controller() {\n    return this._controller;\n  }\n  setController(controller) {\n    this._controller = controller;\n  }\n  get threejs() {\n    return this._threejs;\n  }\n\n  // constructor(controller:AController){\n  //     super();\n  //     this._controller = controller\n  // }\n\n  // //##################//--viewRef--\\\\##################\n  // // viewRefs is a place to hold references that aren't class members.\n  // //<editor-fold desc=\"viewRef\">\n  // public viewRefs:{[name:string]:any}={};\n  // setViewRef(name:string, value:any){\n  //     this.viewRefs[name]=value;\n  // }\n  // getViewRef(name:string){\n  //     return this.viewRefs[name];\n  // }\n  // clearViewRefs(){\n  //     this.viewRefs={};\n  // }\n  // //</editor-fold>\n  // //##################\\\\--viewRef--//##################\n}","map":{"version":3,"names":["AObject","AView","constructor","args","_threejs","_controller","controller","setController","threejs"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/base/amvc/AView.ts"],"sourcesContent":["/**\n * Base class for views in the Anigraph MVC scheme.\n * The primary responsibility for each view subclass is to specify how a model translates into Three.js rendering calls. The view itself should hold Three.js objects and make them available to controllers for specifying interactions.\n * Views should always be initialize\n */\nimport * as THREE from \"three\";\nimport {AObject} from \"../aobject\";\nimport {AController, SceneControllerInterface} from \"./AController\";\n\n\n// export interface AViewInterface extends AObject {\n//     threejs: THREE.Object3D;\n//     model:AModelInterface;\n//     controller:AControllerInterface;\n// }\n\nexport type ViewCallback = (view:AView, ...args: any[]) => any;\n\n/**\n * Base View Class\n */\nexport abstract class AView extends AObject{\n    /**\n     * The three.js object for this view. Should be a subclass of THREE.Object3D\n     * @type {THREE.Object3D}\n     */\n    abstract _threejs: THREE.Object3D;\n    protected _controller!:AController;\n    get controller(){return this._controller;}\n\n    setController(controller:AController){\n        this._controller = controller;\n    }\n\n    get threejs(){\n        return this._threejs;\n    }\n\n    abstract get modelID():string;\n\n\n    // constructor(controller:AController){\n    //     super();\n    //     this._controller = controller\n    // }\n\n\n    // //##################//--viewRef--\\\\##################\n    // // viewRefs is a place to hold references that aren't class members.\n    // //<editor-fold desc=\"viewRef\">\n    // public viewRefs:{[name:string]:any}={};\n    // setViewRef(name:string, value:any){\n    //     this.viewRefs[name]=value;\n    // }\n    // getViewRef(name:string){\n    //     return this.viewRefs[name];\n    // }\n    // clearViewRefs(){\n    //     this.viewRefs={};\n    // }\n    // //</editor-fold>\n    // //##################\\\\--viewRef--//##################\n\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,OAAO,QAAO,YAAY;;AAIlC;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA,OAAO,MAAeC,KAAK,SAASD,OAAO;EAAAE,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IACvC;AACJ;AACA;AACA;IAHI,KAISC,QAAQ;IAAA,KACPC,WAAW;EAAA;EACrB,IAAIC,UAAUA,CAAA,EAAE;IAAC,OAAO,IAAI,CAACD,WAAW;EAAC;EAEzCE,aAAaA,CAACD,UAAsB,EAAC;IACjC,IAAI,CAACD,WAAW,GAAGC,UAAU;EACjC;EAEA,IAAIE,OAAOA,CAAA,EAAE;IACT,OAAO,IAAI,CAACJ,QAAQ;EACxB;;EAKA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}