{"ast":null,"code":"import { ANodeModel2D } from \"../../../nodeModel\";\nimport { ALineMaterialModel } from \"../../../../rendering\";\nexport let CurveInterpolationModes = /*#__PURE__*/function (CurveInterpolationModes) {\n  CurveInterpolationModes[\"Linear\"] = \"Linear\";\n  CurveInterpolationModes[\"CubicBezier\"] = \"CubicBezier\";\n  return CurveInterpolationModes;\n}({});\nvar CurveCreationInteractionModeStateKeys = /*#__PURE__*/function (CurveCreationInteractionModeStateKeys) {\n  CurveCreationInteractionModeStateKeys[\"CurrentCurve\"] = \"CurrentCurve\";\n  return CurveCreationInteractionModeStateKeys;\n}(CurveCreationInteractionModeStateKeys || {});\nexport class Curve2DModel extends ANodeModel2D {\n  /**\n   * When the interpolation mode changes, we need to signal an update of the geometry.\n   * @param value\n   */\n  set interpolationMode(value) {\n    this._interpolationMode = value;\n    this.signalGeometryUpdate();\n  }\n  get interpolationMode() {\n    return this._interpolationMode;\n  }\n  getStrokeMaterial() {\n    return ALineMaterialModel.GlobalInstance.CreateMaterial();\n  }\n  getFrameMaterial() {\n    return ALineMaterialModel.GlobalInstance.CreateMaterial();\n  }\n  constructor() {\n    super();\n    /**\n     * Width/thickness of the spline\n     * @type {number}\n     */\n    this.lineWidth = 0.05;\n    /**\n     * Getter and setter for `interpolationMode`, which wraps the protected variable _interpolationMode holding the\n     * current interpolation mode for the spline.\n     * */\n    this._interpolationMode = CurveInterpolationModes.Linear;\n    this.verts.initColorAttribute();\n  }\n}\n/**\n * We will have two interpolation modes: Linear, and CubicBezier.\n * These are set to the enum declared at the top of this file.\n * @type {CurveInterpolationModes}\n */\nCurve2DModel.InterpolationModes = CurveInterpolationModes;","map":{"version":3,"names":["ANodeModel2D","ALineMaterialModel","CurveInterpolationModes","CurveCreationInteractionModeStateKeys","Curve2DModel","interpolationMode","value","_interpolationMode","signalGeometryUpdate","getStrokeMaterial","GlobalInstance","CreateMaterial","getFrameMaterial","constructor","lineWidth","Linear","verts","initColorAttribute","InterpolationModes"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/scene/nodes/2d/curves/Curve2DModel.ts"],"sourcesContent":["import {ANodeModel2D} from \"../../../nodeModel\";\nimport {ALineMaterialModel} from \"../../../../rendering\";\n\nexport enum CurveInterpolationModes{\n    Linear=\"Linear\",\n    CubicBezier=\"CubicBezier\"\n}\n\nenum CurveCreationInteractionModeStateKeys{\n    CurrentCurve=\"CurrentCurve\"\n}\n\nexport class Curve2DModel extends ANodeModel2D {\n    /**\n     * Width/thickness of the spline\n     * @type {number}\n     */\n    lineWidth: number = 0.05;\n\n    /**\n     * We will have two interpolation modes: Linear, and CubicBezier.\n     * These are set to the enum declared at the top of this file.\n     * @type {CurveInterpolationModes}\n     */\n    static InterpolationModes=CurveInterpolationModes;\n\n    /**\n     * Getter and setter for `interpolationMode`, which wraps the protected variable _interpolationMode holding the\n     * current interpolation mode for the spline.\n     * */\n    protected _interpolationMode:CurveInterpolationModes=CurveInterpolationModes.Linear;\n    /**\n     * When the interpolation mode changes, we need to signal an update of the geometry.\n     * @param value\n     */\n    set interpolationMode(value){\n        this._interpolationMode = value;\n        this.signalGeometryUpdate();\n    }\n    get interpolationMode(){return this._interpolationMode;}\n\n    getStrokeMaterial() {\n        return ALineMaterialModel.GlobalInstance.CreateMaterial();\n    }\n\n    getFrameMaterial() {\n        return ALineMaterialModel.GlobalInstance.CreateMaterial();\n    }\n\n    constructor() {\n        super();\n        this.verts.initColorAttribute()\n    }\n}\n"],"mappings":"AAAA,SAAQA,YAAY,QAAO,oBAAoB;AAC/C,SAAQC,kBAAkB,QAAO,uBAAuB;AAExD,WAAYC,uBAAuB,0BAAvBA,uBAAuB;EAAvBA,uBAAuB;EAAvBA,uBAAuB;EAAA,OAAvBA,uBAAuB;AAAA;AAGlC,IAEIC,qCAAqC,0BAArCA,qCAAqC;EAArCA,qCAAqC;EAAA,OAArCA,qCAAqC;AAAA,EAArCA,qCAAqC;AAI1C,OAAO,MAAMC,YAAY,SAASJ,YAAY,CAAC;EAmB3C;AACJ;AACA;AACA;EACI,IAAIK,iBAAiBA,CAACC,KAAK,EAAC;IACxB,IAAI,CAACC,kBAAkB,GAAGD,KAAK;IAC/B,IAAI,CAACE,oBAAoB,CAAC,CAAC;EAC/B;EACA,IAAIH,iBAAiBA,CAAA,EAAE;IAAC,OAAO,IAAI,CAACE,kBAAkB;EAAC;EAEvDE,iBAAiBA,CAAA,EAAG;IAChB,OAAOR,kBAAkB,CAACS,cAAc,CAACC,cAAc,CAAC,CAAC;EAC7D;EAEAC,gBAAgBA,CAAA,EAAG;IACf,OAAOX,kBAAkB,CAACS,cAAc,CAACC,cAAc,CAAC,CAAC;EAC7D;EAEAE,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,CAAC;IArCX;AACJ;AACA;AACA;IAHI,KAIAC,SAAS,GAAW,IAAI;IASxB;AACJ;AACA;AACA;IAHI,KAIUP,kBAAkB,GAAyBL,uBAAuB,CAACa,MAAM;IAqB/E,IAAI,CAACC,KAAK,CAACC,kBAAkB,CAAC,CAAC;EACnC;AACJ;AAlCI;AACJ;AACA;AACA;AACA;AAXab,YAAY,CAYdc,kBAAkB,GAAChB,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}