{"ast":null,"code":"import _initializerDefineProperty from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\nvar _dec, _class, _class2, _descriptor, _descriptor2;\nimport { AObject, AObjectState } from \"./AObject\";\nimport { ASerializable } from \"../aserial\";\nimport { ref } from \"valtio\";\nexport let AObjectNodeEvents = /*#__PURE__*/function (AObjectNodeEvents) {\n  AObjectNodeEvents[\"NewParent\"] = \"NewParent\";\n  AObjectNodeEvents[\"NewRoot\"] = \"NewRoot\";\n  AObjectNodeEvents[\"NewChild\"] = \"NewChild\";\n  AObjectNodeEvents[\"DescendantAdded\"] = \"DescendantAdded\";\n  AObjectNodeEvents[\"ChildRemoved\"] = \"ChildRemoved\";\n  AObjectNodeEvents[\"DescendantRemoved\"] = \"DescendantRemoved\";\n  AObjectNodeEvents[\"DescendantReleased\"] = \"DescendantReleased\";\n  return AObjectNodeEvents;\n}({});\nexport let AObjectNode = (_dec = ASerializable(\"AObjectNode\"), _dec(_class = (_class2 = class AObjectNode extends AObject {\n  get children() {\n    return this._children;\n  }\n  get root() {\n    return this._root;\n  }\n  set root(node) {\n    if (this._root.uid === node.uid) {\n      return;\n    } else {\n      this._root = node;\n      this.signalEvent(AObjectNodeEvents.NewRoot);\n\n      // set all the children HelperClasses' roots, which will cause them to set their children HelperClasses' root...\n      this.mapOverChildren(child => {\n        child.root = node;\n      });\n    }\n  }\n  _setRootSilent(node) {\n    if (this._root.uid === node.uid) {\n      return;\n    } else {\n      this._root = node;\n      // set all the children HelperClasses' roots, which will cause them to set their children HelperClasses' root...\n      this.mapOverChildren(child => {\n        child._setRootSilent(node);\n      });\n    }\n  }\n  constructor(name) {\n    var _this$_root, _this$_parent;\n    super();\n    _initializerDefineProperty(this, \"_children\", _descriptor, this);\n    _initializerDefineProperty(this, \"name\", _descriptor2, this);\n    this._parent = void 0;\n    this._root = void 0;\n    this.name = name ? name : this.serializationLabel;\n    // @ts-ignore\n    this._children = this.children === undefined ? [] : this.children;\n    this._root = (_this$_root = this._root) !== null && _this$_root !== void 0 ? _this$_root : (_this$_parent = this._parent) !== null && _this$_parent !== void 0 ? _this$_parent : this;\n    // @ts-ignore\n    this._parent = this._parent === undefined ? null : this._parent;\n  }\n  addNewParentListener(callback, handle, synchronous = true) {\n    return this.addEventListener(AObjectNodeEvents.NewParent, callback, handle);\n  }\n  addChildRemovedListener(callback, handle, synchronous = true) {\n    return this.addEventListener(AObjectNodeEvents.ChildRemoved, callback, handle);\n  }\n  signalNewParent(newParent, oldParent) {\n    this.signalEvent(AObjectNodeEvents.NewParent, newParent, oldParent);\n  }\n\n  /**\n   * Signals new parent on child\n   * which signals new root on descendants\n   * new child on this node\n   * @param child\n   * @param position\n   * @param signalChildEvents\n   * @param signalAncestorEvents\n   */\n  _addChild(child, position, signalChildEvents = true, signalAncestorEvents = true) {\n    // Check if child is already in children\n    if (this.children.includes(child)) {\n      throw new Error(`Tried to add existing child ${child} to node ${this}`);\n    }\n\n    // If child already has a parent this is a problem: we should have dealt with that elsewhere\n    if (child.parent) {\n      throw new Error(`Child ${child} already has parent ${child.parent} when trying to add as child of ${this}`);\n    } else {\n      child._parent = this;\n      if (signalChildEvents) {\n        child.signalNewParent(this);\n        child.root = this.root;\n      } else {\n        child._setRootSilent(this.root);\n      }\n    }\n    if (position !== undefined) {\n      this.children.splice(position, 0, ref(child));\n    } else {\n      this.children.push(ref(child));\n    }\n    this.signalEvent(AObjectNodeEvents.NewChild, child);\n    if (signalAncestorEvents) {\n      child.mapOverAncestors(ancestor => {\n        ancestor.signalEvent(AObjectNodeEvents.DescendantAdded, child);\n      });\n    }\n  }\n  addChild(child, position) {\n    return this._addChild(child, position, true, true);\n  }\n  get parent() {\n    return this._parent;\n  }\n  mapOverChildren(fn) {\n    var rvals = [];\n    for (let child of this.children) {\n      rvals.push(fn(child));\n    }\n    return rvals;\n  }\n  mapOverAncestors(fn) {\n    var rvals = [];\n    let parent = this.parent;\n    let lastParent = this;\n    while (parent && parent !== lastParent) {\n      rvals.push(fn(parent));\n      lastParent = parent;\n      parent = parent.parent;\n    }\n    return rvals;\n  }\n  getAncestorList() {\n    var rvals = [];\n    let parent = this.parent;\n    let lastParent = this;\n    while (parent && parent !== lastParent) {\n      rvals.push(parent);\n      lastParent = parent;\n      parent = parent.parent;\n    }\n    return rvals;\n  }\n  getDescendantList() {\n    const rval = [];\n    this.mapOverChildren(c => {\n      rval.push(c);\n      for (let cc of c.getDescendantList()) {\n        rval.push(cc);\n      }\n      ;\n    });\n    return rval;\n  }\n  filterChildren(fn) {\n    return this.children.filter(fn);\n  }\n  filterDescendants(fn) {\n    return this.getDescendantList().filter(fn);\n  }\n  mapOverDescendants(fn) {\n    return this.getDescendantList().map(fn);\n  }\n  release(...args) {\n    this.releaseChildren(...args);\n    if (this._parent !== null) {\n      this._parent._removeChild(this);\n    }\n    let self = this;\n    this.mapOverAncestors(ancestor => {\n      ancestor.signalEvent(AObjectNodeEvents.DescendantReleased, self);\n    });\n    super.release();\n    //would do super.release(args) here...\n  }\n\n  /**\n   * A potentially silent version of removeChild\n   * Signals new parent on the child\n   * child removed on this node\n   * descendant removed on ancestors\n   * and new root on descendants\n   * @param child\n   * @param signalDescendantEvents\n   * @param signalAncestorEvents\n   * @private\n   */\n  _removeChild(child, signalDescendantEvents = true, signalAncestorEvents = true) {\n    for (let c = 0; c < this.children.length; c++) {\n      if (this.children[c].uid === child.uid) {\n        this.children.splice(c, 1);\n        child._parent = null;\n        if (signalDescendantEvents) {\n          child.signalEvent(AObjectNodeEvents.NewParent, child, null);\n          child.root = child;\n        } else {\n          child._setRootSilent(child);\n        }\n        if (signalAncestorEvents) {\n          this.signalEvent(AObjectNodeEvents.DescendantRemoved, child);\n          this.mapOverAncestors(ancestor => {\n            ancestor.signalEvent(AObjectNodeEvents.DescendantRemoved, child);\n          });\n        }\n        this.signalEvent(AObjectNodeEvents.ChildRemoved, child);\n        return;\n      }\n    }\n    throw new Error(`Tried to remove node ${child} that is not a child of ${this}`);\n  }\n  removeChild(child) {\n    return this._removeChild(child, true, true);\n  }\n\n  /**\n   * Release all children\n   * @param args\n   * @returns {any[]}\n   */\n  releaseChildren(...args) {\n    return this.mapOverChildren(child => {\n      return child.release(...args);\n    });\n  }\n\n  /**\n   * Remove all children without necessarily releasing them\n   * @returns {any[]}\n   */\n  removeChildren() {\n    const self = this;\n    return this.mapOverChildren(child => {\n      self.removeChild(child);\n    });\n  }\n  static fromJSON(state_dict) {\n    const rval = this.CreateWithState(state_dict);\n    rval.mapOverChildren(c => {\n      c._parent = rval;\n    });\n    return rval;\n  }\n  toJSON() {\n    return this.state;\n  }\n\n  //##################//--Reparenting--\\\\##################\n  //<editor-fold desc=\"Reparenting\">\n\n  getChildWithID(uid) {\n    for (let c = 0; c < this.children.length; c++) {\n      if (this.children[c].uid === uid) {\n        return this.children[c];\n      }\n    }\n  }\n  _uidsToChildrenList(uidList) {\n    let aon_array = [];\n    for (let uid of uidList) {\n      let child = this.getChildWithID(uid);\n      if (child) {\n        aon_array.push(child);\n      } else {\n        throw new Error(`unrecognized child uid: ${uid}`);\n      }\n    }\n    return aon_array;\n  }\n  _childrenListToUIDs(childrenList) {\n    let rval = [];\n    for (let c of childrenList) {\n      rval.push(c.uid);\n    }\n    return rval;\n  }\n  reorderChildren(uidList) {\n    for (let uid of uidList) {\n      let child = this.getChildWithID(uid);\n      if (child) {\n        child.reparent(this, false);\n      } else {\n        throw new Error(\"Tried to reorder children with uid that does not belong to parent.\");\n      }\n    }\n  }\n\n  /**\n   * Removes this node from its parent and adds it to a new parent\n   * by default only signals descendants\n   * @param newParent\n   * @param signalDescendantEvents\n   * @param signalAncestorEvents\n   */\n  reparent(newParent, signalDescendantEvents = true, signalAncestorEvents = true) {\n    if (this.parent) {\n      this.parent._removeChild(this, signalDescendantEvents, signalAncestorEvents);\n    }\n    newParent._addChild(this, undefined, signalDescendantEvents, signalAncestorEvents);\n  }\n  //</editor-fold>\n  //##################\\\\--Reparenting--//##################\n}, _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"_children\", [AObjectState], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"name\", [AObjectState], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);","map":{"version":3,"names":["AObject","AObjectState","ASerializable","ref","AObjectNodeEvents","AObjectNode","_dec","_class","_class2","children","_children","root","_root","node","uid","signalEvent","NewRoot","mapOverChildren","child","_setRootSilent","constructor","name","_this$_root","_this$_parent","_initializerDefineProperty","_descriptor","_descriptor2","_parent","serializationLabel","undefined","addNewParentListener","callback","handle","synchronous","addEventListener","NewParent","addChildRemovedListener","ChildRemoved","signalNewParent","newParent","oldParent","_addChild","position","signalChildEvents","signalAncestorEvents","includes","Error","parent","splice","push","NewChild","mapOverAncestors","ancestor","DescendantAdded","addChild","fn","rvals","lastParent","getAncestorList","getDescendantList","rval","c","cc","filterChildren","filter","filterDescendants","mapOverDescendants","map","release","args","releaseChildren","_removeChild","self","DescendantReleased","signalDescendantEvents","length","DescendantRemoved","removeChild","removeChildren","fromJSON","state_dict","CreateWithState","toJSON","state","getChildWithID","_uidsToChildrenList","uidList","aon_array","_childrenListToUIDs","childrenList","reorderChildren","reparent","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/base/aobject/AObjectNode.ts"],"sourcesContent":["import {AObject, AObjectState} from \"./AObject\";\nimport {ASerializable} from \"../aserial\";\nimport {ref} from \"valtio\";\n\nexport enum AObjectNodeEvents{\n    // Descendant Events\n    NewParent = 'NewParent',\n    NewRoot = 'NewRoot',\n\n    //Ancestor Events\n    NewChild = 'NewChild',\n    DescendantAdded = 'DescendantAdded',\n    ChildRemoved = 'ChildRemoved',\n    DescendantRemoved = 'DescendantRemoved',\n    DescendantReleased='DescendantReleased'\n}\n\n@ASerializable(\"AObjectNode\")\nexport class AObjectNode extends AObject{\n    @AObjectState public _children:AObjectNode[];\n    @AObjectState public name!: string;\n    get children(){\n        return this._children;\n    }\n\n    protected _parent!:AObjectNode|null;\n    protected _root!:AObjectNode;\n\n    get root(){\n        return this._root;\n    }\n    set root(node:AObjectNode){\n        if(this._root.uid===node.uid){\n            return;\n        }else{\n            this._root = node;\n            this.signalEvent(AObjectNodeEvents.NewRoot);\n\n            // set all the children HelperClasses' roots, which will cause them to set their children HelperClasses' root...\n            this.mapOverChildren((child:AObjectNode)=>{\n                child.root = node;\n            })\n        }\n    }\n\n    protected _setRootSilent(node:AObjectNode){\n        if(this._root.uid===node.uid){\n            return;\n        }else{\n            this._root = node;\n            // set all the children HelperClasses' roots, which will cause them to set their children HelperClasses' root...\n            this.mapOverChildren((child:AObjectNode)=>{\n                child._setRootSilent(node);\n            })\n        }\n    }\n\n\n    constructor(name?: string){\n        super();\n        this.name = name ? name : this.serializationLabel;\n        // @ts-ignore\n        this._children = (this.children===undefined)?[]:this.children;\n        this._root = this._root??(this._parent??this);\n        // @ts-ignore\n        this._parent = (this._parent===undefined)?null:this._parent;\n\n\n    }\n\n    addNewParentListener(callback:(newParent?:AObjectNode, oldParent?:AObjectNode)=>void, handle?:string, synchronous:boolean=true){\n        return this.addEventListener(AObjectNodeEvents.NewParent, callback, handle);\n    }\n\n    addChildRemovedListener(callback:(child:AObjectNode)=>void, handle?:string, synchronous:boolean=true){\n        return this.addEventListener(AObjectNodeEvents.ChildRemoved, callback, handle);\n    }\n\n\n    signalNewParent(newParent?:AObjectNode, oldParent?:AObjectNode){\n        this.signalEvent(AObjectNodeEvents.NewParent, newParent, oldParent);\n    }\n\n    /**\n     * Signals new parent on child\n     * which signals new root on descendants\n     * new child on this node\n     * @param child\n     * @param position\n     * @param signalChildEvents\n     * @param signalAncestorEvents\n     */\n    _addChild(child:AObjectNode, position?:number, signalChildEvents:boolean=true, signalAncestorEvents:boolean=true){\n        // Check if child is already in children\n        if(this.children.includes(child)){\n            throw new Error(`Tried to add existing child ${child} to node ${this}`);\n        }\n\n        // If child already has a parent this is a problem: we should have dealt with that elsewhere\n        if(child.parent){\n            throw new Error(`Child ${child} already has parent ${child.parent} when trying to add as child of ${this}`);\n        }else{\n            child._parent=this;\n            if(signalChildEvents) {\n                child.signalNewParent(this)\n                child.root = this.root;\n            }else{\n                child._setRootSilent(this.root);\n            }\n        }\n        if(position!==undefined){\n            this.children.splice(position, 0, ref(child));\n        }else{\n            this.children.push(ref(child));\n        }\n        this.signalEvent(AObjectNodeEvents.NewChild, child);\n        if(signalAncestorEvents) {\n            child.mapOverAncestors((ancestor:AObjectNode)=>{\n                ancestor.signalEvent(AObjectNodeEvents.DescendantAdded, child);\n            })\n        }\n    }\n\n    addChild(child:AObjectNode, position?:number){\n        return this._addChild(child, position, true, true);\n    }\n\n    public get parent():AObjectNode|null{\n        return this._parent;\n    };\n\n    mapOverChildren(fn:(child:AObjectNode)=>any[]|void){\n        var rvals = [];\n        for(let child of this.children){\n            rvals.push(fn(child));\n        }\n        return rvals;\n    }\n\n    mapOverAncestors(fn:(ancestor:AObjectNode)=>any[]|void){\n        var rvals = [];\n        let parent = this.parent;\n        let lastParent = (this as AObjectNode);\n        while(parent && (parent!==lastParent)){\n            rvals.push(fn(parent));\n            lastParent = parent;\n            parent = parent.parent;\n        }\n        return rvals;\n    }\n\n    getAncestorList(){\n        var rvals = [];\n        let parent = this.parent;\n        let lastParent = (this as AObjectNode);\n        while(parent && (parent!==lastParent)){\n            rvals.push(parent);\n            lastParent = parent;\n            parent = parent.parent;\n        }\n        return rvals;\n    }\n\n    getDescendantList(){\n        const rval:AObjectNode[] = [];\n        this.mapOverChildren((c:AObjectNode)=>{\n            rval.push(c);\n            for(let cc of c.getDescendantList()){\n                rval.push(cc);\n            };\n        })\n        return rval;\n    }\n\n    filterChildren(fn:(child:AObjectNode, index?:number, array?:AObjectNode[])=>boolean){\n        return this.children.filter(fn);\n    }\n\n    filterDescendants(fn:(child:AObjectNode, index?:number, array?:AObjectNode[])=>boolean){\n        return this.getDescendantList().filter(fn);\n    }\n\n    mapOverDescendants(fn:(descendant:AObjectNode)=>any[]|void){\n        return this.getDescendantList().map(fn);\n    }\n\n    release(...args:any[]){\n        this.releaseChildren(...args)\n        if(this._parent!==null){\n            this._parent._removeChild(this);\n        }\n        let self = this;\n        this.mapOverAncestors((ancestor: AObjectNode) => {\n            ancestor.signalEvent(AObjectNodeEvents.DescendantReleased, self);\n        })\n        super.release();\n        //would do super.release(args) here...\n    }\n\n\n    /**\n     * A potentially silent version of removeChild\n     * Signals new parent on the child\n     * child removed on this node\n     * descendant removed on ancestors\n     * and new root on descendants\n     * @param child\n     * @param signalDescendantEvents\n     * @param signalAncestorEvents\n     * @private\n     */\n    _removeChild(child:AObjectNode, signalDescendantEvents:boolean=true, signalAncestorEvents:boolean=true,){\n        for(let c=0;c<this.children.length;c++){\n            if(this.children[c].uid===child.uid){\n                this.children.splice(c,1);\n                child._parent = null;\n                if(signalDescendantEvents){\n                    child.signalEvent(AObjectNodeEvents.NewParent, child, null);\n                    child.root = child;\n                }else{\n                    child._setRootSilent(child);\n                }\n                if(signalAncestorEvents) {\n                    this.signalEvent(AObjectNodeEvents.DescendantRemoved, child);\n                    this.mapOverAncestors((ancestor: AObjectNode) => {\n                        ancestor.signalEvent(AObjectNodeEvents.DescendantRemoved, child);\n                    })\n                }\n                this.signalEvent(AObjectNodeEvents.ChildRemoved, child);\n                return;\n            }\n        }\n        throw new Error(`Tried to remove node ${child} that is not a child of ${this}`);\n    }\n\n    removeChild(child:AObjectNode){\n        return this._removeChild(child, true, true);\n    }\n\n    /**\n     * Release all children\n     * @param args\n     * @returns {any[]}\n     */\n    releaseChildren(...args:any[]){\n        return this.mapOverChildren((child:AObjectNode)=>{return child.release(...args);});\n    }\n\n    /**\n     * Remove all children without necessarily releasing them\n     * @returns {any[]}\n     */\n    removeChildren(){\n        const self = this;\n        return this.mapOverChildren((child:AObjectNode)=>{self.removeChild(child);});\n    }\n\n\n    static fromJSON(state_dict:{[name:string]:any}){\n        const rval = (this.CreateWithState(state_dict) as AObjectNode);\n        rval.mapOverChildren((c:AObjectNode)=>{\n                c._parent = rval;\n            }\n        );\n        return rval;\n    }\n    toJSON(){\n        return this.state;\n    }\n\n\n    //##################//--Reparenting--\\\\##################\n    //<editor-fold desc=\"Reparenting\">\n\n    getChildWithID(uid:string){\n        for(let c=0;c<this.children.length;c++){\n            if(this.children[c].uid===uid){\n                return this.children[c];\n            }\n        }\n    }\n\n    _uidsToChildrenList(uidList:string[]){\n        let aon_array:AObjectNode[] = [];\n        for(let uid of uidList){\n            let child = this.getChildWithID(uid);\n            if(child) {\n                aon_array.push(child);\n            }else{\n                throw new Error(`unrecognized child uid: ${uid}`);\n            }\n        }\n        return aon_array;\n    }\n\n    _childrenListToUIDs(childrenList:AObjectNode[]){\n        let rval:string[]= [];\n        for(let c of childrenList){\n            rval.push(c.uid);\n        }\n        return rval;\n    }\n\n    reorderChildren(uidList:string[]){\n        for(let uid of uidList){\n            let child = this.getChildWithID(uid);\n            if(child){\n                child.reparent(this, false);\n            }else{\n                throw new Error (\"Tried to reorder children with uid that does not belong to parent.\")\n            }\n        }\n    }\n\n    /**\n     * Removes this node from its parent and adds it to a new parent\n     * by default only signals descendants\n     * @param newParent\n     * @param signalDescendantEvents\n     * @param signalAncestorEvents\n     */\n    reparent(newParent:AObjectNode, signalDescendantEvents:boolean=true, signalAncestorEvents:boolean=true){\n        if(this.parent){\n            this.parent._removeChild(this, signalDescendantEvents, signalAncestorEvents);\n        }\n        newParent._addChild(this, undefined, signalDescendantEvents, signalAncestorEvents);\n    }\n    //</editor-fold>\n    //##################\\\\--Reparenting--//##################\n\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}