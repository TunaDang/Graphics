{"ast":null,"code":"// import {ALineGraphic, ALineSegmentsGraphic, ANodeView, Mat3, V2, V3, VertexArray2D} from \"../../../../index\";\nimport { ALineGraphic, ALineSegmentsGraphic } from \"../../../../rendering\";\nimport { ANodeView } from \"../../../nodeView\";\nimport { Mat3, V2, V3 } from \"../../../../math\";\nimport { VertexArray2D } from \"../../../../geometry\";\nexport class Vector2DView extends ANodeView {\n  constructor(...args) {\n    super(...args);\n    this.line = void 0;\n    this.arrowHead = void 0;\n    this.arrowHeadVerts = void 0;\n  }\n  // arrowhead!:ALineSegmentsGraphic;\n  get model() {\n    return this._model;\n  }\n  static Create(model) {\n    let view = new Vector2DView();\n    view.setModel(model);\n    return view;\n  }\n  get headColor() {\n    return this.model.verts.color.getAt(this.model.verts.nVerts - 1);\n  }\n  init() {\n    this.line = new ALineGraphic();\n    // this.line = new ALineSegmentsGraphic();\n    this.line.init(this.model.verts, this.model.material);\n    this.line.setLineWidth(this.model.lineWidth);\n    this.registerAndAddGraphic(this.line);\n    this.arrowHeadVerts = new VertexArray2D();\n    this.arrowHeadVerts.initColorAttribute();\n    let headColor = this.headColor;\n    this.arrowHeadVerts.addVertices([V2(), V2(-1, -1), V2(), V2(1, -1)], [headColor, headColor, headColor, headColor]);\n    this.arrowHead = new ALineSegmentsGraphic();\n    this.arrowHead.init(this.arrowHeadVerts, this.model.material);\n    this.arrowHead.setLineWidth(this.model.lineWidth);\n    this._setArrowheadTransform();\n    this.registerAndAddGraphic(this.arrowHead);\n  }\n  _setArrowheadTransform() {\n    let ep = this.model.getEndPoint();\n    let tvec = ep.getNormalized();\n    let ahs = this.model.arrowheadSize;\n    let tvrot = V2(-tvec.y, tvec.x);\n    let aht = Mat3.FromColumns(V3(tvrot.x, tvrot.y, 0).times(ahs), V3(tvec.x, tvec.y, 0).times(ahs), V3(ep.x, ep.y, 1));\n    this.arrowHead.setTransform(aht);\n  }\n  update() {\n    this.line.setVerts(this.model.verts);\n    this.line.setLineWidth(this.model.lineWidth);\n    this._setArrowheadTransform();\n  }\n}","map":{"version":3,"names":["ALineGraphic","ALineSegmentsGraphic","ANodeView","Mat3","V2","V3","VertexArray2D","Vector2DView","constructor","args","line","arrowHead","arrowHeadVerts","model","_model","Create","view","setModel","headColor","verts","color","getAt","nVerts","init","material","setLineWidth","lineWidth","registerAndAddGraphic","initColorAttribute","addVertices","_setArrowheadTransform","ep","getEndPoint","tvec","getNormalized","ahs","arrowheadSize","tvrot","y","x","aht","FromColumns","times","setTransform","update","setVerts"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/scene/nodes/2d/lines/Vector2DView.ts"],"sourcesContent":["// import {ALineGraphic, ALineSegmentsGraphic, ANodeView, Mat3, V2, V3, VertexArray2D} from \"../../../../index\";\nimport {ALineGraphic, ALineSegmentsGraphic} from \"../../../../rendering\";\nimport {ANodeView} from \"../../../nodeView\";\nimport {Mat3, V2, V3} from \"../../../../math\";\nimport {VertexArray2D} from \"../../../../geometry\";\nimport {LineModel2D, LineSegmentsModel2D, LineSegmentsView2D} from \"./index\";\nimport {Vector2DModel} from \"./Vector2DModel\";\n\nexport class Vector2DView extends ANodeView {\n    line!: ALineGraphic;\n    arrowHead!: ALineSegmentsGraphic;\n    arrowHeadVerts!:VertexArray2D;\n\n    // arrowhead!:ALineSegmentsGraphic;\n    get model(): Vector2DModel {\n        return this._model as Vector2DModel;\n    }\n\n    static Create(model: LineModel2D) {\n        let view = new Vector2DView();\n        view.setModel(model);\n        return view;\n    }\n\n    get headColor() {\n        return this.model.verts.color.getAt(this.model.verts.nVerts - 1);\n    }\n\n\n\n    init() {\n        this.line = new ALineGraphic();\n        // this.line = new ALineSegmentsGraphic();\n        this.line.init(this.model.verts, this.model.material);\n        this.line.setLineWidth(this.model.lineWidth);\n        this.registerAndAddGraphic(this.line);\n\n        this.arrowHeadVerts = new VertexArray2D();\n        this.arrowHeadVerts.initColorAttribute();\n\n        let headColor = this.headColor;\n        this.arrowHeadVerts.addVertices([\n                V2(),\n                V2(-1, -1),\n                V2(),\n                V2(1, -1)\n            ],\n            [\n                headColor,\n                headColor,\n                headColor,\n                headColor\n            ]\n        )\n\n        this.arrowHead = new ALineSegmentsGraphic();\n        this.arrowHead.init(this.arrowHeadVerts, this.model.material);\n        this.arrowHead.setLineWidth(this.model.lineWidth);\n        this._setArrowheadTransform();\n        this.registerAndAddGraphic(this.arrowHead);\n\n\n    }\n\n    _setArrowheadTransform(){\n        let ep =this.model.getEndPoint();\n        let tvec = ep.getNormalized();\n        let ahs = this.model.arrowheadSize;\n        let tvrot = V2(-tvec.y, tvec.x);\n        let aht = Mat3.FromColumns(V3(tvrot.x, tvrot.y, 0).times(ahs), V3(tvec.x, tvec.y, 0).times(ahs), V3(ep.x, ep.y, 1));\n        this.arrowHead.setTransform(aht);\n    }\n\n    update(): void {\n        this.line.setVerts(this.model.verts);\n        this.line.setLineWidth(this.model.lineWidth);\n        this._setArrowheadTransform();\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}