{"ast":null,"code":"/**\n * @file Main scene controller for your application\n * @description This is where you connect models to views.\n * This is done mainly by defining your model view spec and interaction modes.\n */\n\nimport { Color } from \"../../index\";\nimport { ABasicSceneController, ADebugInteractionMode } from \"../index\";\n\n/**\n * This is your Main Controller class. The scene controller is responsible for managing user input with the keyboard\n * and mouse, as well as making sure that the view hierarchy matches the model heirarchy.\n */\nexport class App2DSceneController extends ABasicSceneController {\n  get model() {\n    return this._model;\n  }\n\n  /**\n   * The main customization you might do here would be to set the background color or set a background image.\n   * @returns {Promise<void>}\n   */\n  async initScene() {\n    this.setClearColor(Color.White());\n    await super.initScene();\n  }\n\n  /**\n   * Specifies what view classes to use for different model class.\n   * If you create custom models and views, you will need to link them here by calling `addModelViewSpec` with the\n   * model class as the first argument and the view class as the second.\n   */\n  initModelViewSpecs() {\n    super.initModelViewSpecs();\n\n    // Example:\n    // this.addModelViewSpec(SplineModel, SplineView);\n  }\n  onAnimationFrameCallback(context) {\n    /**\n     * let's update the model...\n     */\n    this.model.timeUpdate(this.model.clock.time);\n\n    /**\n     * and let's update the controller...\n     * This will mostly update any interactions that depend on time.\n     * Keep in mind that the model and controller run on separate clocks for this, since we may\n     * want to pause our model's clock and continue interacting with the scene (e.g., moving the camera around).\n     */\n    this.timeUpdate();\n\n    /**\n     * Clear the rendering context.\n     * you can also specify which buffers to clear: clear(color?: boolean, depth?: boolean, stencil?: boolean)\n     * ``` this.renderer.clear(false, true); ```\n     */\n    context.renderer.clear();\n\n    // render the scene view\n    context.renderer.render(this.getThreeJSScene(), this.getThreeJSCamera());\n  }\n  initInteractions() {\n    super.initInteractions();\n\n    /**\n     * Add an instance of our custom interaction mode\n     */\n    // this.defineInteractionMode(InteractionModeClass.MODE_NAME, InteractionModeClass.Create(this));\n    this.setCurrentInteractionMode(ADebugInteractionMode.NameInGUI);\n  }\n}","map":{"version":3,"names":["Color","ABasicSceneController","ADebugInteractionMode","App2DSceneController","model","_model","initScene","setClearColor","White","initModelViewSpecs","onAnimationFrameCallback","context","timeUpdate","clock","time","renderer","clear","render","getThreeJSScene","getThreeJSCamera","initInteractions","setCurrentInteractionMode","NameInGUI"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/starter/App2D/App2DSceneController.ts"],"sourcesContent":["/**\n * @file Main scene controller for your application\n * @description This is where you connect models to views.\n * This is done mainly by defining your model view spec and interaction modes.\n */\nimport {App2DSceneModel} from \"./App2DSceneModel\";\nimport {AGLContext, Color} from \"../../index\"\nimport {ABasicSceneController, ADebugInteractionMode} from \"../index\";\n\n/**\n * This is your Main Controller class. The scene controller is responsible for managing user input with the keyboard\n * and mouse, as well as making sure that the view hierarchy matches the model heirarchy.\n */\nexport class App2DSceneController extends ABasicSceneController{\n    get model():App2DSceneModel{\n        return this._model as App2DSceneModel;\n    }\n\n\n    /**\n     * The main customization you might do here would be to set the background color or set a background image.\n     * @returns {Promise<void>}\n     */\n    async initScene(): Promise<void> {\n        this.setClearColor(Color.White());\n        await super.initScene();\n    }\n\n    /**\n     * Specifies what view classes to use for different model class.\n     * If you create custom models and views, you will need to link them here by calling `addModelViewSpec` with the\n     * model class as the first argument and the view class as the second.\n     */\n    initModelViewSpecs() {\n        super.initModelViewSpecs();\n\n        // Example:\n        // this.addModelViewSpec(SplineModel, SplineView);\n    }\n\n    onAnimationFrameCallback(context:AGLContext) {\n        /**\n         * let's update the model...\n         */\n        this.model.timeUpdate(this.model.clock.time);\n\n        /**\n         * and let's update the controller...\n         * This will mostly update any interactions that depend on time.\n         * Keep in mind that the model and controller run on separate clocks for this, since we may\n         * want to pause our model's clock and continue interacting with the scene (e.g., moving the camera around).\n         */\n        this.timeUpdate();\n\n        /**\n         * Clear the rendering context.\n         * you can also specify which buffers to clear: clear(color?: boolean, depth?: boolean, stencil?: boolean)\n         * ``` this.renderer.clear(false, true); ```\n         */\n        context.renderer.clear();\n\n        // render the scene view\n        context.renderer.render(this.getThreeJSScene(), this.getThreeJSCamera());\n    }\n\n    initInteractions() {\n        super.initInteractions();\n\n        /**\n         * Add an instance of our custom interaction mode\n         */\n        // this.defineInteractionMode(InteractionModeClass.MODE_NAME, InteractionModeClass.Create(this));\n        this.setCurrentInteractionMode(ADebugInteractionMode.NameInGUI);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAAoBA,KAAK,QAAO,aAAa;AAC7C,SAAQC,qBAAqB,EAAEC,qBAAqB,QAAO,UAAU;;AAErE;AACA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,SAASF,qBAAqB;EAC3D,IAAIG,KAAKA,CAAA,EAAkB;IACvB,OAAO,IAAI,CAACC,MAAM;EACtB;;EAGA;AACJ;AACA;AACA;EACI,MAAMC,SAASA,CAAA,EAAkB;IAC7B,IAAI,CAACC,aAAa,CAACP,KAAK,CAACQ,KAAK,CAAC,CAAC,CAAC;IACjC,MAAM,KAAK,CAACF,SAAS,CAAC,CAAC;EAC3B;;EAEA;AACJ;AACA;AACA;AACA;EACIG,kBAAkBA,CAAA,EAAG;IACjB,KAAK,CAACA,kBAAkB,CAAC,CAAC;;IAE1B;IACA;EACJ;EAEAC,wBAAwBA,CAACC,OAAkB,EAAE;IACzC;AACR;AACA;IACQ,IAAI,CAACP,KAAK,CAACQ,UAAU,CAAC,IAAI,CAACR,KAAK,CAACS,KAAK,CAACC,IAAI,CAAC;;IAE5C;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACF,UAAU,CAAC,CAAC;;IAEjB;AACR;AACA;AACA;AACA;IACQD,OAAO,CAACI,QAAQ,CAACC,KAAK,CAAC,CAAC;;IAExB;IACAL,OAAO,CAACI,QAAQ,CAACE,MAAM,CAAC,IAAI,CAACC,eAAe,CAAC,CAAC,EAAE,IAAI,CAACC,gBAAgB,CAAC,CAAC,CAAC;EAC5E;EAEAC,gBAAgBA,CAAA,EAAG;IACf,KAAK,CAACA,gBAAgB,CAAC,CAAC;;IAExB;AACR;AACA;IACQ;IACA,IAAI,CAACC,yBAAyB,CAACnB,qBAAqB,CAACoB,SAAS,CAAC;EACnE;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}