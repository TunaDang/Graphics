{"ast":null,"code":"var _dec, _class;\nimport { ASerializable } from \"../../../base\";\nimport { AGraphicGroup } from \"../../../rendering\";\nimport * as THREE from \"three\";\nexport let ASVGGraphic = (_dec = ASerializable(\"ASVGGraphic\"), _dec(_class = class ASVGGraphic extends AGraphicGroup {\n  get svgObject() {\n    return this._svgObject;\n  }\n  setElementColor(elementName, color) {\n    let parentObj = this.threejs;\n    function setElColor(p) {\n      if (p.type == \"Mesh\") {\n        if (p.name == elementName) {\n          let material = p.material;\n          material.setValues({\n            \"color\": color.asThreeJS()\n          });\n          if (color.a < 1) {\n            material.setValues({\n              \"transparent\": true\n            });\n            material.setValues({\n              \"opacity\": color.a\n            });\n            // (p as THREE.Mesh).material.setValue(\"transparent\", true);\n            // (p as THREE.Mesh).material.setValue(\"opacity\", color.a);\n          } else {\n            material.setValues({\n              \"transparent\": false\n            });\n            material.setValues({\n              \"opacity\": 1.0\n            });\n          }\n        }\n      }\n      for (let c of p.children) {\n        setElColor(c);\n      }\n    }\n    setElColor(parentObj);\n  }\n  constructor(svgSourceObject) {\n    super();\n    this._svgObject = void 0;\n    this.svgRootNode = void 0;\n    this._svgObject = svgSourceObject.clone();\n    this.threejs.add(svgSourceObject);\n  }\n  static Create(svgAsset, deepCopy) {\n    let svgObj = svgAsset.getNewSceneObject(true, deepCopy);\n    let group = new THREE.Group();\n    group.matrixAutoUpdate = false;\n    group.add(svgObj);\n    let newNode = new this(group);\n    newNode.svgRootNode = svgObj;\n    return newNode;\n  }\n  setSourceTransform(mat) {\n    mat.assignTo(this.svgRootNode.matrix);\n  }\n\n  // static Create(svgSourceObject:THREE.Object3D){\n  //     return new this(svgSourceObject);\n  // }\n}) || _class);","map":{"version":3,"names":["ASerializable","AGraphicGroup","THREE","ASVGGraphic","_dec","_class","svgObject","_svgObject","setElementColor","elementName","color","parentObj","threejs","setElColor","p","type","name","material","setValues","asThreeJS","a","c","children","constructor","svgSourceObject","svgRootNode","clone","add","Create","svgAsset","deepCopy","svgObj","getNewSceneObject","group","Group","matrixAutoUpdate","newNode","setSourceTransform","mat","assignTo","matrix"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/fileio/svg/node/ASVGGraphic.ts"],"sourcesContent":["import {ASerializable} from \"../../../base\";\nimport {AGraphicElement, AGraphicGroup} from \"../../../rendering\";\nimport {Color, Mat4} from \"../../../math\";\nimport * as THREE from \"three\";\nimport {ASVGModel} from \"./ASVGModel\";\nimport {SVGAsset} from \"../SVGAsset\";\n\n@ASerializable(\"ASVGGraphic\")\nexport class ASVGGraphic extends AGraphicGroup{\n    _svgObject!:THREE.Object3D;\n    svgRootNode!:THREE.Object3D;\n    get svgObject():THREE.Object3D{\n        return this._svgObject;\n    }\n\n\n    setElementColor(elementName:string, color:Color){\n        let parentObj = this.threejs;\n        function setElColor(p:THREE.Object3D){\n            if(p.type == \"Mesh\") {\n                if (p.name == elementName) {\n                    let material = ((p as THREE.Mesh).material as THREE.MeshBasicMaterial);\n                    material.setValues({\"color\": color.asThreeJS()});\n                    if(color.a<1){\n                        material.setValues({\"transparent\": true});\n                        material.setValues({\"opacity\": color.a});\n                        // (p as THREE.Mesh).material.setValue(\"transparent\", true);\n                        // (p as THREE.Mesh).material.setValue(\"opacity\", color.a);\n                    }else{\n                        material.setValues({\"transparent\": false});\n                        material.setValues({\"opacity\": 1.0});\n                    }\n                }\n            }\n            for(let c of p.children){\n                setElColor(c);\n            }\n        }\n        setElColor(parentObj);\n    }\n\n    protected constructor(svgSourceObject:THREE.Object3D) {\n        super();\n        this._svgObject=svgSourceObject.clone();\n        this.threejs.add(svgSourceObject);\n    }\n\n    static Create(svgAsset:SVGAsset, deepCopy?:boolean){\n        let svgObj = svgAsset.getNewSceneObject(true, deepCopy);\n        let group = new THREE.Group();\n        group.matrixAutoUpdate=false;\n        group.add(svgObj);\n        let newNode = new this(group);\n        newNode.svgRootNode = svgObj;\n        return newNode;\n    }\n\n    setSourceTransform(mat:Mat4){\n        mat.assignTo(this.svgRootNode.matrix);\n    }\n\n    // static Create(svgSourceObject:THREE.Object3D){\n    //     return new this(svgSourceObject);\n    // }\n}\n"],"mappings":";AAAA,SAAQA,aAAa,QAAO,eAAe;AAC3C,SAAyBC,aAAa,QAAO,oBAAoB;AAEjE,OAAO,KAAKC,KAAK,MAAM,OAAO;AAI9B,WACaC,WAAW,IAAAC,IAAA,GADvBJ,aAAa,CAAC,aAAa,CAAC,EAAAI,IAAA,CAAAC,MAAA,GAA7B,MACaF,WAAW,SAASF,aAAa;EAG1C,IAAIK,SAASA,CAAA,EAAiB;IAC1B,OAAO,IAAI,CAACC,UAAU;EAC1B;EAGAC,eAAeA,CAACC,WAAkB,EAAEC,KAAW,EAAC;IAC5C,IAAIC,SAAS,GAAG,IAAI,CAACC,OAAO;IAC5B,SAASC,UAAUA,CAACC,CAAgB,EAAC;MACjC,IAAGA,CAAC,CAACC,IAAI,IAAI,MAAM,EAAE;QACjB,IAAID,CAAC,CAACE,IAAI,IAAIP,WAAW,EAAE;UACvB,IAAIQ,QAAQ,GAAKH,CAAC,CAAgBG,QAAoC;UACtEA,QAAQ,CAACC,SAAS,CAAC;YAAC,OAAO,EAAER,KAAK,CAACS,SAAS,CAAC;UAAC,CAAC,CAAC;UAChD,IAAGT,KAAK,CAACU,CAAC,GAAC,CAAC,EAAC;YACTH,QAAQ,CAACC,SAAS,CAAC;cAAC,aAAa,EAAE;YAAI,CAAC,CAAC;YACzCD,QAAQ,CAACC,SAAS,CAAC;cAAC,SAAS,EAAER,KAAK,CAACU;YAAC,CAAC,CAAC;YACxC;YACA;UACJ,CAAC,MAAI;YACDH,QAAQ,CAACC,SAAS,CAAC;cAAC,aAAa,EAAE;YAAK,CAAC,CAAC;YAC1CD,QAAQ,CAACC,SAAS,CAAC;cAAC,SAAS,EAAE;YAAG,CAAC,CAAC;UACxC;QACJ;MACJ;MACA,KAAI,IAAIG,CAAC,IAAIP,CAAC,CAACQ,QAAQ,EAAC;QACpBT,UAAU,CAACQ,CAAC,CAAC;MACjB;IACJ;IACAR,UAAU,CAACF,SAAS,CAAC;EACzB;EAEUY,WAAWA,CAACC,eAA8B,EAAE;IAClD,KAAK,CAAC,CAAC;IAAC,KAjCZjB,UAAU;IAAA,KACVkB,WAAW;IAiCP,IAAI,CAAClB,UAAU,GAACiB,eAAe,CAACE,KAAK,CAAC,CAAC;IACvC,IAAI,CAACd,OAAO,CAACe,GAAG,CAACH,eAAe,CAAC;EACrC;EAEA,OAAOI,MAAMA,CAACC,QAAiB,EAAEC,QAAiB,EAAC;IAC/C,IAAIC,MAAM,GAAGF,QAAQ,CAACG,iBAAiB,CAAC,IAAI,EAAEF,QAAQ,CAAC;IACvD,IAAIG,KAAK,GAAG,IAAI/B,KAAK,CAACgC,KAAK,CAAC,CAAC;IAC7BD,KAAK,CAACE,gBAAgB,GAAC,KAAK;IAC5BF,KAAK,CAACN,GAAG,CAACI,MAAM,CAAC;IACjB,IAAIK,OAAO,GAAG,IAAI,IAAI,CAACH,KAAK,CAAC;IAC7BG,OAAO,CAACX,WAAW,GAAGM,MAAM;IAC5B,OAAOK,OAAO;EAClB;EAEAC,kBAAkBA,CAACC,GAAQ,EAAC;IACxBA,GAAG,CAACC,QAAQ,CAAC,IAAI,CAACd,WAAW,CAACe,MAAM,CAAC;EACzC;;EAEA;EACA;EACA;AACJ,CAAC,KAAAnC,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}