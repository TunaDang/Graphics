{"ast":null,"code":"import { Mat3, Mat4, NodeTransform3D, Quaternion, V3 } from \"../../math\";\nimport { AObject3DModelWrapper } from \"../../geometry\";\nimport { SVGLoader } from \"./SVGLoader\";\nimport { ThreeJSObjectFromParsedSVG } from \"./SvgToThreeJsObject\";\nexport class SVGAsset extends AObject3DModelWrapper {\n  constructor(svgText) {\n    let parsedSVG = SVGAsset.ParseSVGText(svgText);\n    let refObject3D = ThreeJSObjectFromParsedSVG(parsedSVG);\n    // Mat4.Scale2D(V2(1.0,-1.0)).assignTo(refObject3D.matrix);\n    // Mat4.RotationZ(10).assignTo(refObject3D.matrix);\n    // Mat4.Identity().assignTo(refObject3D.matrix);\n    // Mat4.Scale2D(V2(1.0,-1.0)).assignTo(refObject3D.matrixWorld);\n    super(refObject3D);\n    this.svgText = void 0;\n    this.parsedSVG = void 0;\n    this.originalBounds = void 0;\n    this.svgText = svgText;\n    this.parsedSVG = parsedSVG;\n    this.originalBounds = this.getBounds();\n  }\n  static async Load(svgURL, normalize = true) {\n    const loader = new SVGLoader();\n    let svgtext = await loader.loadSVGText(svgURL);\n    let newSVGAsset = new SVGAsset(svgtext);\n    if (normalize) {\n      let scaleFactor = 1.0 / newSVGAsset.originalBounds.localWidth;\n      newSVGAsset.sourceTransform = new NodeTransform3D(V3(), Quaternion.Identity(), V3(1.0, -1.0, 1.0).times(scaleFactor));\n      // newSVGAsset.setSourceScale(1.0/(bounds.localWidth))\n    }\n    return newSVGAsset;\n  }\n\n  // get scale() {\n  //   return this.sourceScale;\n  // }\n\n  // setScale(scale: number) {\n  //   // this.setSourceScale(scale);\n  //   this.setSourceTrans\n  //   this._setMatrix(Mat4.Scale2D(scale));\n  // }\n\n  _setMatrix(mat) {\n    if (mat instanceof Mat3) {\n      Mat4.From2DMat3(mat).assignTo(this.object.matrix);\n    } else {\n      mat.assignTo(this.object.matrix);\n    }\n  }\n  static ParseSVGText(svgText) {\n    const loader = new SVGLoader();\n    const svgParsedData = loader.parse(svgText);\n    return svgParsedData;\n  }\n}","map":{"version":3,"names":["Mat3","Mat4","NodeTransform3D","Quaternion","V3","AObject3DModelWrapper","SVGLoader","ThreeJSObjectFromParsedSVG","SVGAsset","constructor","svgText","parsedSVG","ParseSVGText","refObject3D","originalBounds","getBounds","Load","svgURL","normalize","loader","svgtext","loadSVGText","newSVGAsset","scaleFactor","localWidth","sourceTransform","Identity","times","_setMatrix","mat","From2DMat3","assignTo","object","matrix","svgParsedData","parse"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/fileio/svg/SVGAsset.ts"],"sourcesContent":["import {\n  Mat3,\n  Mat4,\n  NodeTransform3D,\n  Quaternion,\n  V2,\n  V3\n} from \"../../math\";\n\nimport {AObject3DModelWrapper, BoundingBox2D,\n  BoundingBox3D,} from \"../../geometry\";\nimport { SVGLoader, SVGParsedData } from \"./SVGLoader\";\nimport { ThreeJSObjectFromParsedSVG } from \"./SvgToThreeJsObject\";\n\nexport class SVGAsset extends AObject3DModelWrapper {\n  protected svgText: string;\n  protected parsedSVG: SVGParsedData;\n  protected originalBounds!:BoundingBox3D;\n\n  constructor(svgText: string) {\n    let parsedSVG = SVGAsset.ParseSVGText(svgText);\n    let refObject3D = ThreeJSObjectFromParsedSVG(parsedSVG);\n    // Mat4.Scale2D(V2(1.0,-1.0)).assignTo(refObject3D.matrix);\n    // Mat4.RotationZ(10).assignTo(refObject3D.matrix);\n    // Mat4.Identity().assignTo(refObject3D.matrix);\n    // Mat4.Scale2D(V2(1.0,-1.0)).assignTo(refObject3D.matrixWorld);\n    super(refObject3D);\n    this.svgText = svgText;\n    this.parsedSVG = parsedSVG;\n    this.originalBounds = this.getBounds();\n  }\n\n  static async Load(svgURL:string, normalize:boolean=true){\n    const loader = new SVGLoader();\n    let svgtext:string = await loader.loadSVGText(svgURL);\n    let newSVGAsset = new SVGAsset(svgtext)\n    if(normalize){\n      let scaleFactor = 1.0/(newSVGAsset.originalBounds.localWidth);\n      newSVGAsset.sourceTransform = new NodeTransform3D(V3(), Quaternion.Identity(), V3(1.0,-1.0,1.0).times(scaleFactor));\n      // newSVGAsset.setSourceScale(1.0/(bounds.localWidth))\n    }\n    return newSVGAsset;\n  }\n\n  // get scale() {\n  //   return this.sourceScale;\n  // }\n\n  // setScale(scale: number) {\n  //   // this.setSourceScale(scale);\n  //   this.setSourceTrans\n  //   this._setMatrix(Mat4.Scale2D(scale));\n  // }\n\n  protected _setMatrix(mat: Mat3 | Mat4) {\n    if (mat instanceof Mat3) {\n      Mat4.From2DMat3(mat).assignTo(this.object.matrix);\n    } else {\n      mat.assignTo(this.object.matrix);\n    }\n  }\n\n  static ParseSVGText(svgText: string) {\n    const loader = new SVGLoader();\n    const svgParsedData: SVGParsedData = loader.parse(svgText);\n    return svgParsedData;\n  }\n}\n"],"mappings":"AAAA,SACEA,IAAI,EACJC,IAAI,EACJC,eAAe,EACfC,UAAU,EAEVC,EAAE,QACG,YAAY;AAEnB,SAAQC,qBAAqB,QACN,gBAAgB;AACvC,SAASC,SAAS,QAAuB,aAAa;AACtD,SAASC,0BAA0B,QAAQ,sBAAsB;AAEjE,OAAO,MAAMC,QAAQ,SAASH,qBAAqB,CAAC;EAKlDI,WAAWA,CAACC,OAAe,EAAE;IAC3B,IAAIC,SAAS,GAAGH,QAAQ,CAACI,YAAY,CAACF,OAAO,CAAC;IAC9C,IAAIG,WAAW,GAAGN,0BAA0B,CAACI,SAAS,CAAC;IACvD;IACA;IACA;IACA;IACA,KAAK,CAACE,WAAW,CAAC;IAAC,KAXXH,OAAO;IAAA,KACPC,SAAS;IAAA,KACTG,cAAc;IAUtB,IAAI,CAACJ,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACG,cAAc,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC;EACxC;EAEA,aAAaC,IAAIA,CAACC,MAAa,EAAEC,SAAiB,GAAC,IAAI,EAAC;IACtD,MAAMC,MAAM,GAAG,IAAIb,SAAS,CAAC,CAAC;IAC9B,IAAIc,OAAc,GAAG,MAAMD,MAAM,CAACE,WAAW,CAACJ,MAAM,CAAC;IACrD,IAAIK,WAAW,GAAG,IAAId,QAAQ,CAACY,OAAO,CAAC;IACvC,IAAGF,SAAS,EAAC;MACX,IAAIK,WAAW,GAAG,GAAG,GAAED,WAAW,CAACR,cAAc,CAACU,UAAW;MAC7DF,WAAW,CAACG,eAAe,GAAG,IAAIvB,eAAe,CAACE,EAAE,CAAC,CAAC,EAAED,UAAU,CAACuB,QAAQ,CAAC,CAAC,EAAEtB,EAAE,CAAC,GAAG,EAAC,CAAC,GAAG,EAAC,GAAG,CAAC,CAACuB,KAAK,CAACJ,WAAW,CAAC,CAAC;MACnH;IACF;IACA,OAAOD,WAAW;EACpB;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEUM,UAAUA,CAACC,GAAgB,EAAE;IACrC,IAAIA,GAAG,YAAY7B,IAAI,EAAE;MACvBC,IAAI,CAAC6B,UAAU,CAACD,GAAG,CAAC,CAACE,QAAQ,CAAC,IAAI,CAACC,MAAM,CAACC,MAAM,CAAC;IACnD,CAAC,MAAM;MACLJ,GAAG,CAACE,QAAQ,CAAC,IAAI,CAACC,MAAM,CAACC,MAAM,CAAC;IAClC;EACF;EAEA,OAAOrB,YAAYA,CAACF,OAAe,EAAE;IACnC,MAAMS,MAAM,GAAG,IAAIb,SAAS,CAAC,CAAC;IAC9B,MAAM4B,aAA4B,GAAGf,MAAM,CAACgB,KAAK,CAACzB,OAAO,CAAC;IAC1D,OAAOwB,aAAa;EACtB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}