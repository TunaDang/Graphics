{"ast":null,"code":"import { button, folder } from \"leva\";\nimport { Color } from \"./math/Color\";\nimport tinycolor from \"tinycolor2\";\n// export interface GUISliderSpec{\n//     name:string,\n//     value:any,\n//     min?:any,\n//     max?:any,\n//     step?:any\n// }\n\n// export interface ShaderUniformParameterGUISpec{\n//     nameInShader: string;\n//     nameInGUI:string;\n//     dtype:SHADER_UNIFORM_TYPES;\n//     spec:GUIControlSpec;\n// }\n\nexport class GUISpecs {\n  static KeyNameInFolder(name, folderName) {\n    return name + \"_\" + folderName;\n  }\n  static MakeFolder(name, spec, addFolderNameToKeys = true, collapsed = true) {\n    let specUse = {};\n    if (addFolderNameToKeys) {\n      for (let k in spec) {\n        specUse[GUISpecs.KeyNameInFolder(k, name)] = spec[k];\n        // specUse[k+\"_\"+name]=spec[k];\n      }\n    } else {\n      specUse = spec;\n    }\n    let fspec = folder(specUse, {\n      collapsed: collapsed\n    });\n    return fspec;\n  }\n  static ColorControl(onChange, initialValue, otherSpecs) {\n    return {\n      value: initialValue.RGBuintAfloat,\n      onChange: v => {\n        return onChange(Color.FromTinyColor(tinycolor(v)));\n      },\n      ...otherSpecs\n    };\n  }\n  static ButtonControl(callback, otherSpecs) {\n    return button(callback, otherSpecs);\n  }\n  static CheckboxControl(onChange, initialValue, otherSpecs) {\n    return {\n      value: initialValue !== null && initialValue !== void 0 ? initialValue : false,\n      onChange: v => {\n        return onChange(v);\n      },\n      ...otherSpecs\n    };\n  }\n  static SliderControl(onChange, initialValue, min, max, step, otherSpecs) {\n    {\n      return {\n        value: initialValue,\n        onChange: onChange,\n        min: min,\n        max: max,\n        step: step !== null && step !== void 0 ? step : (max - min) * 0.01,\n        ...otherSpecs\n      };\n    }\n  }\n  static SelectionControl(onChange, options, initialValue, otherSpecs) {\n    return {\n      value: initialValue,\n      options: options,\n      onChange: onChange,\n      ...otherSpecs\n    };\n  }\n}\n\n// export interface GUIControlSpec extends _GUIControlSpec{\n//   value:any;\n//   onChange:AppStateValueChangeCallback;\n// }","map":{"version":3,"names":["button","folder","Color","tinycolor","GUISpecs","KeyNameInFolder","name","folderName","MakeFolder","spec","addFolderNameToKeys","collapsed","specUse","k","fspec","ColorControl","onChange","initialValue","otherSpecs","value","RGBuintAfloat","v","FromTinyColor","ButtonControl","callback","CheckboxControl","SliderControl","min","max","step","SelectionControl","options"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/GUISpecs.ts"],"sourcesContent":["import {button, folder} from \"leva\";\nimport {SHADER_UNIFORM_TYPES} from \"./basictypes\";\nimport {Color} from \"./math/Color\";\nimport tinycolor from \"tinycolor2\";\n\ntype _GUIControlSpec={[name:string]:any};\nexport interface GUIControlSpec extends _GUIControlSpec{\n}\n\n\n// export interface GUISliderSpec{\n//     name:string,\n//     value:any,\n//     min?:any,\n//     max?:any,\n//     step?:any\n// }\n\n\n// export interface ShaderUniformParameterGUISpec{\n//     nameInShader: string;\n//     nameInGUI:string;\n//     dtype:SHADER_UNIFORM_TYPES;\n//     spec:GUIControlSpec;\n// }\n\nexport class GUISpecs{\n    static KeyNameInFolder(name:string, folderName:string){\n        return name+\"_\"+folderName;\n    }\n\n    static MakeFolder(name:string, spec:GUIControlSpec, addFolderNameToKeys:boolean=true, collapsed:boolean=true){\n        let specUse:GUIControlSpec = {};\n        if(addFolderNameToKeys){\n            for(let k in spec){\n                specUse[GUISpecs.KeyNameInFolder(k, name)]=spec[k];\n                // specUse[k+\"_\"+name]=spec[k];\n            }\n        }else{\n            specUse = spec;\n        }\n        let fspec = folder(\n            specUse,\n            { collapsed: collapsed }\n        )\n        return fspec;\n    }\n\n    static ColorControl(onChange:(color:Color)=>void, initialValue:Color, otherSpecs?:{[name:string]:any}){\n        return {\n            value:initialValue.RGBuintAfloat,\n            onChange: (v:any)=>{\n                return onChange(Color.FromTinyColor(tinycolor(v)))\n            },\n            ...otherSpecs\n        }\n    }\n\n    static ButtonControl(callback:()=>void, otherSpecs?:{[name:string]:any}){\n        return button(callback, otherSpecs);\n    }\n\n    static CheckboxControl(onChange:(value:boolean)=>void, initialValue?:boolean, otherSpecs?:{[name:string]:any}){\n        return {\n            value:initialValue??false,\n            onChange: (v:any)=>{\n                return onChange(v);\n            },\n            ...otherSpecs\n        }\n    }\n\n    static SliderControl(onChange:(v:number)=>void, initialValue:any, min:number, max:number, step?:number, otherSpecs?:{[name:string]:any}){{\n            return {\n                value: initialValue,\n                onChange: onChange,\n                min:min,\n                max:max,\n                step:step??(max-min)*0.01,\n                ...otherSpecs\n            }\n        }\n    }\n\n    static SelectionControl(onChange:(v:string)=>void, options:string[], initialValue:string, otherSpecs?:{[name:string]:any}){\n        return {\n            value:initialValue,\n            options:options,\n            onChange:onChange,\n            ...otherSpecs\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n// export interface GUIControlSpec extends _GUIControlSpec{\n//   value:any;\n//   onChange:AppStateValueChangeCallback;\n// }\n"],"mappings":"AAAA,SAAQA,MAAM,EAAEC,MAAM,QAAO,MAAM;AAEnC,SAAQC,KAAK,QAAO,cAAc;AAClC,OAAOC,SAAS,MAAM,YAAY;AAOlC;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ;EACjB,OAAOC,eAAeA,CAACC,IAAW,EAAEC,UAAiB,EAAC;IAClD,OAAOD,IAAI,GAAC,GAAG,GAACC,UAAU;EAC9B;EAEA,OAAOC,UAAUA,CAACF,IAAW,EAAEG,IAAmB,EAAEC,mBAA2B,GAAC,IAAI,EAAEC,SAAiB,GAAC,IAAI,EAAC;IACzG,IAAIC,OAAsB,GAAG,CAAC,CAAC;IAC/B,IAAGF,mBAAmB,EAAC;MACnB,KAAI,IAAIG,CAAC,IAAIJ,IAAI,EAAC;QACdG,OAAO,CAACR,QAAQ,CAACC,eAAe,CAACQ,CAAC,EAAEP,IAAI,CAAC,CAAC,GAACG,IAAI,CAACI,CAAC,CAAC;QAClD;MACJ;IACJ,CAAC,MAAI;MACDD,OAAO,GAAGH,IAAI;IAClB;IACA,IAAIK,KAAK,GAAGb,MAAM,CACdW,OAAO,EACP;MAAED,SAAS,EAAEA;IAAU,CAC3B,CAAC;IACD,OAAOG,KAAK;EAChB;EAEA,OAAOC,YAAYA,CAACC,QAA4B,EAAEC,YAAkB,EAAEC,UAA+B,EAAC;IAClG,OAAO;MACHC,KAAK,EAACF,YAAY,CAACG,aAAa;MAChCJ,QAAQ,EAAGK,CAAK,IAAG;QACf,OAAOL,QAAQ,CAACd,KAAK,CAACoB,aAAa,CAACnB,SAAS,CAACkB,CAAC,CAAC,CAAC,CAAC;MACtD,CAAC;MACD,GAAGH;IACP,CAAC;EACL;EAEA,OAAOK,aAAaA,CAACC,QAAiB,EAAEN,UAA+B,EAAC;IACpE,OAAOlB,MAAM,CAACwB,QAAQ,EAAEN,UAAU,CAAC;EACvC;EAEA,OAAOO,eAAeA,CAACT,QAA8B,EAAEC,YAAqB,EAAEC,UAA+B,EAAC;IAC1G,OAAO;MACHC,KAAK,EAACF,YAAY,aAAZA,YAAY,cAAZA,YAAY,GAAE,KAAK;MACzBD,QAAQ,EAAGK,CAAK,IAAG;QACf,OAAOL,QAAQ,CAACK,CAAC,CAAC;MACtB,CAAC;MACD,GAAGH;IACP,CAAC;EACL;EAEA,OAAOQ,aAAaA,CAACV,QAAyB,EAAEC,YAAgB,EAAEU,GAAU,EAAEC,GAAU,EAAEC,IAAY,EAAEX,UAA+B,EAAC;IAAC;MACjI,OAAO;QACHC,KAAK,EAAEF,YAAY;QACnBD,QAAQ,EAAEA,QAAQ;QAClBW,GAAG,EAACA,GAAG;QACPC,GAAG,EAACA,GAAG;QACPC,IAAI,EAACA,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAE,CAACD,GAAG,GAACD,GAAG,IAAE,IAAI;QACzB,GAAGT;MACP,CAAC;IACL;EACJ;EAEA,OAAOY,gBAAgBA,CAACd,QAAyB,EAAEe,OAAgB,EAAEd,YAAmB,EAAEC,UAA+B,EAAC;IACtH,OAAO;MACHC,KAAK,EAACF,YAAY;MAClBc,OAAO,EAACA,OAAO;MACff,QAAQ,EAACA,QAAQ;MACjB,GAAGE;IACP,CAAC;EACL;AACJ;;AAUA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}