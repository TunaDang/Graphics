{"ast":null,"code":"import { ALineGraphic, ANodeView, Color, NodeTransform3D, V2, V3, Vector, VertexArray2D } from \"../../../anigraph\";\nexport class SplineView extends ANodeView {\n  constructor(...args) {\n    super(...args);\n    this.stroke = void 0;\n    this.strokeVerts = void 0;\n    this.controlShape = void 0;\n    this.handles = [];\n    this.nSamplesPerSegment = 25;\n  }\n  get model() {\n    return this._model;\n  }\n  init() {\n    this.stroke = new ALineGraphic();\n    this.stroke.init(this.getSplineVerts(this.nSamplesPerSegment), this.model.getStrokeMaterial());\n    this.stroke.setLineWidth(this.model.lineWidth);\n    this.controlShape = new ALineGraphic();\n    this.controlShape.init(this.model.verts.clone().FillColor(Color.FromString(\"#00aa00\")), this.model.getFrameMaterial());\n    this.controlShape.setLineWidth(this.model.controlShapeWidth);\n    this.registerAndAddGraphic(this.stroke);\n    this.registerAndAddGraphic(this.controlShape);\n  }\n  update() {\n    this.controlShape.setVerts2D(this.model.verts.clone().FillColor(Color.FromString(\"#00aa00\")));\n    this.stroke.setVerts2D(this.getSplineVerts(this.nSamplesPerSegment));\n    this.stroke.setLineWidth(this.model.lineWidth);\n    this.controlShape.setLineWidth(this.model.controlShapeWidth);\n    this.setTransform(new NodeTransform3D(V3(0.0, 0.0, -0.1)));\n    this.controlShape.visible = this.model.controlShapeVisible;\n  }\n  getSplineVerts(samplesPerSegment) {\n    let splineVerts = new VertexArray2D();\n    try {\n      var _samplesPerSegment;\n      samplesPerSegment = (_samplesPerSegment = samplesPerSegment) !== null && _samplesPerSegment !== void 0 ? _samplesPerSegment : this.nSamplesPerSegment;\n      splineVerts.initColorAttribute();\n      if (this.model.verts.length > 1) {\n        let totalSamples = samplesPerSegment * this.model.nBezierSegments;\n        let progressSamples = Vector.LinSpace(0, 1, totalSamples);\n        for (let progress of progressSamples.elements) {\n          splineVerts.addVertex(this.model.getPointForProgress(progress), this.model.getColorForProgress(progress));\n        }\n      } else {\n        splineVerts = this.model.verts;\n      }\n      return splineVerts;\n    } catch (e) {\n      console.error(e);\n      if (this.model.verts.nVerts > 1) {\n        let startPointH = this.model.verts.position.getAt(0);\n        let startPoint = V2(startPointH.x, startPointH.y);\n        let startColor = this.model.verts.color.getAt(0);\n        return VertexArray2D.FromLists([startPoint, startPoint.plus(V2(0.01, 0.01))], [startColor, startColor]);\n      } else {\n        return new VertexArray2D();\n      }\n    }\n  }\n}","map":{"version":3,"names":["ALineGraphic","ANodeView","Color","NodeTransform3D","V2","V3","Vector","VertexArray2D","SplineView","constructor","args","stroke","strokeVerts","controlShape","handles","nSamplesPerSegment","model","_model","init","getSplineVerts","getStrokeMaterial","setLineWidth","lineWidth","verts","clone","FillColor","FromString","getFrameMaterial","controlShapeWidth","registerAndAddGraphic","update","setVerts2D","setTransform","visible","controlShapeVisible","samplesPerSegment","splineVerts","_samplesPerSegment","initColorAttribute","length","totalSamples","nBezierSegments","progressSamples","LinSpace","progress","elements","addVertex","getPointForProgress","getColorForProgress","e","console","error","nVerts","startPointH","position","getAt","startPoint","x","y","startColor","color","FromLists","plus"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/A1/nodes/Spline/SplineView.ts"],"sourcesContent":["import {\n    ALineGraphic,\n    ANodeView, Color,\n    Handle2DGraphic,\n    NodeTransform3D, V2,\n    V3,\n    Vec2,\n    Vector,\n    VertexArray2D\n} from \"../../../anigraph\";\nimport {SplineModel} from \"./SplineModel\";\n\n\nexport class SplineView extends ANodeView{\n    stroke!:ALineGraphic;\n    strokeVerts!:VertexArray2D;\n    controlShape!:ALineGraphic;\n    handles:Handle2DGraphic[]=[];\n    nSamplesPerSegment:number=25;\n    get model():SplineModel{\n        return this._model as SplineModel;\n    }\n\n    init(): void {\n        this.stroke = new ALineGraphic();\n        this.stroke.init(this.getSplineVerts(this.nSamplesPerSegment), this.model.getStrokeMaterial());\n        this.stroke.setLineWidth(this.model.lineWidth);\n        this.controlShape = new ALineGraphic();\n        this.controlShape.init(this.model.verts.clone().FillColor(Color.FromString(\"#00aa00\")), this.model.getFrameMaterial());\n        this.controlShape.setLineWidth(this.model.controlShapeWidth);\n        this.registerAndAddGraphic(this.stroke);\n        this.registerAndAddGraphic(this.controlShape);\n    }\n\n    update(): void {\n        this.controlShape.setVerts2D(this.model.verts.clone().FillColor(Color.FromString(\"#00aa00\")));\n        this.stroke.setVerts2D(this.getSplineVerts(this.nSamplesPerSegment));\n        this.stroke.setLineWidth(this.model.lineWidth);\n        this.controlShape.setLineWidth(this.model.controlShapeWidth);\n        this.setTransform(new NodeTransform3D(V3(0.0, 0.0, -0.1)))\n        this.controlShape.visible=this.model.controlShapeVisible;\n    }\n\n    getSplineVerts(samplesPerSegment?:number){\n        let splineVerts = new VertexArray2D()\n        try {\n        samplesPerSegment = samplesPerSegment??this.nSamplesPerSegment;\n        splineVerts.initColorAttribute();\n            if (this.model.verts.length > 1) {\n            let totalSamples = samplesPerSegment*this.model.nBezierSegments;\n            let progressSamples = Vector.LinSpace(0,1,totalSamples);\n            for(let progress of progressSamples.elements) {\n                splineVerts.addVertex(\n                    this.model.getPointForProgress(progress),\n                    this.model.getColorForProgress(progress)\n                );\n            }\n        }else{\n            splineVerts=this.model.verts;\n        }\n        return splineVerts\n        }catch(e){\n            console.error(e);\n            if(this.model.verts.nVerts>1) {\n                let startPointH = this.model.verts.position.getAt(0);\n                let startPoint = V2(startPointH.x, startPointH.y);\n                let startColor = this.model.verts.color.getAt(0);\n                return VertexArray2D.FromLists([\n                    startPoint,\n                    startPoint.plus(V2(0.01, 0.01))\n                ],\n                    [\n                        startColor,\n                        startColor\n                    ])\n            }else{\n            return new VertexArray2D();\n        }\n    }\n    }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}