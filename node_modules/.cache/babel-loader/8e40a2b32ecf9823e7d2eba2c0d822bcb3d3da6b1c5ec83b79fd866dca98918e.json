{"ast":null,"code":"import _initializerDefineProperty from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\nvar _dec, _class, _class2, _descriptor, _ASceneModel;\nimport { AModel } from \"../base/amvc/AModel\";\nimport { AObjectNodeEvents, AObjectState } from \"../base/aobject\";\nimport { ASerializable } from \"../base/aserial\";\nimport { ACameraModel } from \"./camera\";\nimport { AMaterialManager } from \"../rendering/material\";\nimport { BasicInteractionModes } from \"../interaction\";\nimport { AClock } from \"../time/AClock\";\nimport { Mutex } from 'async-mutex';\nimport { GetAppState } from \"../appstate\";\nexport let SceneEvents = /*#__PURE__*/function (SceneEvents) {\n  SceneEvents[\"NodeAdded\"] = \"NodeAdded\";\n  SceneEvents[\"NodeRemoved\"] = \"NodeRemoved\";\n  SceneEvents[\"NodeReleased\"] = \"NodeReleased\";\n  SceneEvents[\"NodeMoved\"] = \"NodeMoved\";\n  SceneEvents[\"UpdateComponent\"] = \"UpdateComponent\";\n  return SceneEvents;\n}({});\nvar ASCENEMODEL_EVENT_HANDLES = /*#__PURE__*/function (ASCENEMODEL_EVENT_HANDLES) {\n  ASCENEMODEL_EVENT_HANDLES[\"SCENE_NODE_ADDED\"] = \"SCENE_NODE_ADDED\";\n  ASCENEMODEL_EVENT_HANDLES[\"SCENE_NODE_REMOVED\"] = \"SCENE_NODE_REMOVED\";\n  ASCENEMODEL_EVENT_HANDLES[\"SCENE_NODE_RELEASED\"] = \"SCENE_NODE_RELEASED\";\n  ASCENEMODEL_EVENT_HANDLES[\"SCENE_CHILD_REMOVED\"] = \"SCENE_CHILD_REMOVED\";\n  return ASCENEMODEL_EVENT_HANDLES;\n}(ASCENEMODEL_EVENT_HANDLES || {}); // HasInteractions\nexport let ASceneModel = (_dec = ASerializable(\"ASceneModel\"), _dec(_class = (_class2 = (_ASceneModel = class ASceneModel extends AModel {\n  get initMutex() {\n    return this._initMutex;\n  }\n  get camera() {\n    return this.cameraModel.camera;\n  }\n  get eventTarget() {\n    return this._interactionDOMElement;\n  }\n\n  // /**\n  //  * Interaction mode map. Has a .modes property that maps mode names to AInteractionModes.\n  //  * @type {AInteractionModeMap}\n  //  * @protected\n  //  */\n  // protected _interactions!: AInteractionModeMap;\n\n  /**\n   * Right now, controllers are restricted to having one or zero active modes at a time. The name of the current mode, which can be active or inactive, is stored here.\n   * @type {string}\n   * @protected\n   */\n\n  get clock() {\n    return this._clock;\n  }\n\n  /**\n   * Args can be customized in subclass.\n   * By default, can optionally be given an AGLContext\n   * @param args\n   */\n\n  // protected abstract asyncInitScene(...args:any[]):Promise<void>;\n\n  /**\n   * Can be customized in subclass. Optionally given an AGLContext.\n   * @param args\n   */\n\n  onContextResize(context) {\n    let shape = context.getShape();\n    this.cameraModel.onCanvasResize(shape.x, shape.y);\n  }\n  /**\n   * # Initialization:\n   * Main models are initialized asynchronously, and initialization may be triggered lazily by the first controller\n   * that tries to access the model (it can also be triggered more proactively, depending on the application).\n   * The scene model has a state variable `isInitialized` that is set to false in the constructor, but flipped to true\n   * after initialization is performed.\n   *\n   * To trigger initialization, the function `confirmInitialized` must be called at least once.\n   *\n   *\n   */\n  async confirmInitialized(...args) {\n    const self = this;\n    await this.initMutex.runExclusive(async () => {\n      if (!self._isInitialized) {\n        self._isInitialized = await self._asyncInitScene(...args);\n        self._isInitialized = true;\n        self._clock.play();\n      }\n    });\n  }\n\n  /**\n   * Args can be customized for subclasses.\n   * Can be given an AGLContext here.\n   * @param args\n   * @returns {Promise<boolean>}\n   * @private\n   */\n  async _asyncInitScene(...args) {\n    await this.PreloadAssets();\n    this.initCamera(...args);\n    this.addChild(this.cameraModel);\n    this.initScene(...args);\n    //     .catch(err => {\n    //     console.log('Oh noooo!!');\n    //     console.log(err);\n    // });\n    return true;\n  }\n  async loadStandardShaders() {\n    let appState = GetAppState();\n    await appState.loadShaderMaterialModel(AMaterialManager.DefaultMaterials.RGBA_SHADER);\n    // await appState.loadShaderMaterialModel(AMaterialManager.DefaultMaterials.TEXTURED_SHADER)\n    // await super.PreloadAssets();\n    // this.initCamera()\n  }\n  async PreloadAssets() {\n    // await this.materials.materialsLoadedPromise;\n  }\n  get modelMap() {\n    return this._modelMap;\n  }\n  get isInitialized() {\n    return this._isInitialized;\n  }\n  addIsInitializedListener(callback, handle, synchronous = true) {\n    return this.addStateKeyListener('_isInitialized', callback, handle, synchronous);\n  }\n  addComponentUpdateListener(callback, handle) {\n    return this.addEventListener(ASceneModel.SceneEvents.UpdateComponent, callback, handle);\n  }\n  signalComponentUpdate() {\n    this.signalEvent(ASceneModel.SceneEvents.UpdateComponent);\n  }\n\n  /**\n   * Adds the model to the model map if it isn't already in there, then signals that a node has been added.\n   * @param model\n   * @private\n   */\n  _addModel(model) {\n    if (!this.hasModel(model)) {\n      this.modelMap[model.uid] = model;\n    }\n    this.signalEvent(SceneEvents.NodeAdded, model);\n  }\n  _removeModel(model) {\n    // delete this._modelMap[model.uid];\n    this.signalEvent(SceneEvents.NodeRemoved, model);\n  }\n  _releaseModel(model) {\n    delete this._modelMap[model.uid];\n    this.signalEvent(SceneEvents.NodeReleased, model);\n  }\n  hasModel(model) {\n    return model.uid in this.modelMap;\n  }\n  hasModelID(modelID) {\n    return modelID in this.modelMap;\n  }\n  constructor(name) {\n    super(name);\n    _initializerDefineProperty(this, \"_isInitialized\", _descriptor, this);\n    this.cameraModel = void 0;\n    // protected _materials!:AMaterialManager;\n    // get materials(){\n    //     return this._materials;\n    // }\n    this._clock = void 0;\n    this._interactionDOMElement = void 0;\n    this._initMutex = void 0;\n    this._currentInteractionModeName = void 0;\n    this._modelMap = {};\n    this._initMutex = new Mutex();\n    this._isInitialized = false;\n    this._clock = new AClock();\n    this._interactionDOMElement = document;\n    // this._interactions = new AInteractionModeMap(this);\n    this._currentInteractionModeName = BasicInteractionModes.default;\n    this._initSceneGraphSubscriptions();\n  }\n  initPerspectiveCameraNearPlane(left, right, bottom, top, near, far) {\n    // this.camera = APerspectiveCameraModel.CreatePerspectiveFOV(90, 2, 0.001,100.0);\n    this.cameraModel = ACameraModel.CreatePerspectiveNearPlane(left, right, bottom, top, near, far);\n  }\n  initPerspectiveCameraFOV(fovy, aspect, near, far) {\n    this.cameraModel = ACameraModel.CreatePerspectiveFOV(fovy, aspect, near, far);\n  }\n  initOrthographicCamera(left, right, bottom, top, near, far) {\n    this.cameraModel = ACameraModel.CreateOrthographic(left, right, bottom, top, near, far);\n    // AOrthoCameraModel.Create(-1, 1, -1, 1) as AOrthoCameraModel;\n    // (this.camera as AOrthoCameraModel).normalized = normalized;\n  }\n  initNormalizedOrthographicCamera() {\n    this.cameraModel = ACameraModel.CreateOrthographic(-1, 1, -1, 1);\n    // this.cameraModel = AOrthoCameraModel.Create(-1, 1, -1, 1);\n  }\n  initUniformOrthographicCamera(scale, near, far) {\n    var _scale;\n    scale = (_scale = scale) !== null && _scale !== void 0 ? _scale : 1.0;\n    this.cameraModel = ACameraModel.CreateOrthographic(-scale, scale, -scale, scale, near, far);\n    // this.cameraModel = AOrthoCameraModel.Create(-1, 1, -1, 1);\n  }\n  init2DOrthoCamera(scale, near = -1, far = 1, aspect = 1) {\n    var _scale2;\n    scale = (_scale2 = scale) !== null && _scale2 !== void 0 ? _scale2 : 1.0;\n    this.cameraModel = ACameraModel.CreateOrthographic(-scale * aspect, scale * aspect, -scale, scale, near, far);\n  }\n  _initSceneGraphSubscriptions() {\n    const self = this;\n    this.subscribe(this.addEventListener(AObjectNodeEvents.DescendantAdded, descendant => {\n      this._addModel(descendant);\n      // self._addModel(descendant);\n    }), ASCENEMODEL_EVENT_HANDLES.SCENE_NODE_ADDED);\n    this.subscribe(this.addEventListener(AObjectNodeEvents.DescendantRemoved, descendant => {\n      self._removeModel(descendant);\n    }), ASCENEMODEL_EVENT_HANDLES.SCENE_NODE_REMOVED);\n\n    // this.subscribe(this.addEventListener(AObjectNodeEvents.ChildRemoved, (child:ANodeModel)=>{\n    //     self._removeModel(child);\n    // }), ASCENEMODEL_EVENT_HANDLES.SCENE_CHILD_REMOVED);\n\n    this.subscribe(this.addEventListener(AObjectNodeEvents.DescendantReleased, descendant => {\n      self._releaseModel(descendant);\n    }), ASCENEMODEL_EVENT_HANDLES.SCENE_NODE_RELEASED);\n    // this.subscribe(this.addChildRemovedListener( (child:AObjectNode)=>{\n    //     self._removeModel(child as ANodeModel);\n    // }), ASCENEMODEL_EVENT_HANDLES.SCENE_CHILD_REMOVED);\n  }\n  getSceneModelControlSpec() {\n    let self = this;\n    return {\n      Name: {\n        value: self.name,\n        onChange: v => {\n          self.name = v;\n        }\n      }\n    };\n  }\n  getDescendantList() {\n    return super.getDescendantList();\n  }\n\n  // addTimedAction(callback: (actionProgress: number) => any, duration: number, actionOverCallback?: CallbackType, tween?: BezierTween, handle?: string) {\n  //     if (handle && (handle in this._subscriptions)) {\n  //         return;\n  //     }\n  //     const self = this;\n  //     const subscriptionHandle = handle ?? uuidv4();\n  //     this.subscribe(this._clock.CreateTimedAction(callback, duration, () => {\n  //             self.unsubscribe(subscriptionHandle);\n  //             if (actionOverCallback) {\n  //                 actionOverCallback();\n  //             }\n  //         }, tween),\n  //         subscriptionHandle);\n  // }\n\n  //\n  // /**\n  //  * Getter for the current interaction mode.\n  //  * @returns {AInteractionMode}\n  //  */\n  // get interactionMode() {\n  //     return this._interactions.modes[this._currentInteractionModeName];\n  // }\n\n  // /**\n  //  * Add an interaction to the current mode.\n  //  * @param interaction\n  //  */\n  // addInteraction(interaction: AInteraction) {\n  //     this.interactionMode.addInteraction(interaction);\n  //     // interaction.owner = this;\n  //     return interaction;\n  // }\n\n  // activateInteractions() {\n  //     this.interactionMode.activate();\n  // }\n  //\n  // setCurrentInteractionMode(name?: string) {\n  //     this.interactionMode.deactivate();\n  //     let activeMode = name ? name : BasicInteractionModes.default;\n  //     this._interactions.setActiveMode(activeMode);\n  //     this._currentInteractionModeName = activeMode;\n  // }\n\n  // defineInteractionMode(name: string, mode?: AInteractionMode) {\n  //     this._interactions.defineMode(name, mode);\n  // }\n  //\n  // clearInteractionMode(name: string) {\n  //     this._interactions.undefineMode(name)\n  // }\n  //\n  // isInteractionModeDefined(name: string):boolean {\n  //     return this._interactions.modeIsDefined(name);\n  // }\n}, _ASceneModel.SceneEvents = SceneEvents, _ASceneModel), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"_isInitialized\", [AObjectState], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);","map":{"version":3,"names":["AModel","AObjectNodeEvents","AObjectState","ASerializable","ACameraModel","AMaterialManager","BasicInteractionModes","AClock","Mutex","GetAppState","SceneEvents","ASCENEMODEL_EVENT_HANDLES","ASceneModel","_dec","_class","_class2","_ASceneModel","initMutex","_initMutex","camera","cameraModel","eventTarget","_interactionDOMElement","clock","_clock","onContextResize","context","shape","getShape","onCanvasResize","x","y","confirmInitialized","args","self","runExclusive","_isInitialized","_asyncInitScene","play","PreloadAssets","initCamera","addChild","initScene","loadStandardShaders","appState","loadShaderMaterialModel","DefaultMaterials","RGBA_SHADER","modelMap","_modelMap","isInitialized","addIsInitializedListener","callback","handle","synchronous","addStateKeyListener","addComponentUpdateListener","addEventListener","UpdateComponent","signalComponentUpdate","signalEvent","_addModel","model","hasModel","uid","NodeAdded","_removeModel","NodeRemoved","_releaseModel","NodeReleased","hasModelID","modelID","constructor","name","_initializerDefineProperty","_descriptor","_currentInteractionModeName","document","default","_initSceneGraphSubscriptions","initPerspectiveCameraNearPlane","left","right","bottom","top","near","far","CreatePerspectiveNearPlane","initPerspectiveCameraFOV","fovy","aspect","CreatePerspectiveFOV","initOrthographicCamera","CreateOrthographic","initNormalizedOrthographicCamera","initUniformOrthographicCamera","scale","_scale","init2DOrthoCamera","_scale2","subscribe","DescendantAdded","descendant","SCENE_NODE_ADDED","DescendantRemoved","SCENE_NODE_REMOVED","DescendantReleased","SCENE_NODE_RELEASED","getSceneModelControlSpec","Name","value","onChange","v","getDescendantList","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/scene/ASceneModel.ts"],"sourcesContent":["import {AModel, AModelInterface} from \"../base/amvc/AModel\";\nimport {AObject, AObjectNode, AObjectNodeEvents, AObjectState} from \"../base/aobject\";\nimport {ASerializable} from \"../base/aserial\";\nimport {ANodeModel} from \"./nodeModel\";\nimport {HasModelMap, MVMModelMap} from \"../base/amvc/AModelViewMap\";\nimport {ACameraModel} from \"./camera\";\nimport {BezierTween} from \"../geometry\";\nimport {AMaterialManager} from \"../rendering/material\";\nimport {ACallbackSwitch} from \"../base\";\nimport {AInteraction,\n    AInteractionMode,\n    AInteractionModeMap,\n    BasicInteractionModes} from \"../interaction\";\nimport {\n    CallbackType\n} from \"../basictypes\";\nimport {AClock} from \"../time/AClock\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {HasInteractions} from \"../base/amvc/HasInteractions\";\n\nimport {Mutex} from 'async-mutex';\nimport {ConfirmInitialized} from \"./ConfirmInitialized\";\nimport {GetAppState} from \"../appstate\";\nimport {AGLContext} from \"../rendering\";\n\nexport enum SceneEvents{\n    NodeAdded=\"NodeAdded\", // This does not directly trigger the creation of a view\n    NodeRemoved=\"NodeRemoved\",\n    NodeReleased=\"NodeReleased\",\n    NodeMoved=\"NodeMoved\",\n    UpdateComponent=\"UpdateComponent\"\n}\n\nenum ASCENEMODEL_EVENT_HANDLES{\n    SCENE_NODE_ADDED=\"SCENE_NODE_ADDED\",\n    SCENE_NODE_REMOVED=\"SCENE_NODE_REMOVED\",\n    SCENE_NODE_RELEASED=\"SCENE_NODE_RELEASED\",\n    SCENE_CHILD_REMOVED=\"SCENE_CHILD_REMOVED\"\n}\n\n// HasInteractions\n@ASerializable(\"ASceneModel\")\nexport abstract class ASceneModel extends AModel implements HasModelMap, ConfirmInitialized{\n    static SceneEvents=SceneEvents;\n    @AObjectState protected _isInitialized!:boolean;\n    cameraModel!:ACameraModel;\n    // protected _materials!:AMaterialManager;\n    // get materials(){\n    //     return this._materials;\n    // }\n    protected _clock: AClock;\n    protected _interactionDOMElement:EventTarget;\n    protected _initMutex:Mutex;\n    get initMutex(){\n        return this._initMutex;\n    }\n\n    get camera(){\n        return this.cameraModel.camera;\n    }\n\n    get eventTarget(){\n        return this._interactionDOMElement;\n    }\n\n    // /**\n    //  * Interaction mode map. Has a .modes property that maps mode names to AInteractionModes.\n    //  * @type {AInteractionModeMap}\n    //  * @protected\n    //  */\n    // protected _interactions!: AInteractionModeMap;\n\n    /**\n     * Right now, controllers are restricted to having one or zero active modes at a time. The name of the current mode, which can be active or inactive, is stored here.\n     * @type {string}\n     * @protected\n     */\n    protected _currentInteractionModeName: string;\n\n    get clock() {\n        return this._clock;\n    }\n\n    /**\n     * Args can be customized in subclass.\n     * By default, can optionally be given an AGLContext\n     * @param args\n     */\n    protected abstract initScene(...args:any[]):void;\n\n    // protected abstract asyncInitScene(...args:any[]):Promise<void>;\n\n    /**\n     * Can be customized in subclass. Optionally given an AGLContext.\n     * @param args\n     */\n    abstract initCamera(...args: any[]):void;\n    onContextResize(context:AGLContext){\n        let shape = context.getShape();\n        this.cameraModel.onCanvasResize(shape.x, shape.y);\n    }\n\n    abstract timeUpdate(...args:any[]): void;\n\n    /**\n     * # Initialization:\n     * Main models are initialized asynchronously, and initialization may be triggered lazily by the first controller\n     * that tries to access the model (it can also be triggered more proactively, depending on the application).\n     * The scene model has a state variable `isInitialized` that is set to false in the constructor, but flipped to true\n     * after initialization is performed.\n     *\n     * To trigger initialization, the function `confirmInitialized` must be called at least once.\n     *\n     *\n     */\n    async confirmInitialized(...args:any[]){\n        const self = this;\n        await this.initMutex.runExclusive(async () => {\n            if(!self._isInitialized){\n                self._isInitialized = await self._asyncInitScene(...args);\n                self._isInitialized = true;\n                self._clock.play();\n            }\n        });\n    }\n\n    /**\n     * Args can be customized for subclasses.\n     * Can be given an AGLContext here.\n     * @param args\n     * @returns {Promise<boolean>}\n     * @private\n     */\n    protected async _asyncInitScene(...args:any[]):Promise<boolean>{\n        await this.PreloadAssets()\n        this.initCamera(...args);\n        this.addChild(this.cameraModel);\n        this.initScene(...args)\n        //     .catch(err => {\n        //     console.log('Oh noooo!!');\n        //     console.log(err);\n        // });\n        return true;\n    }\n\n    async loadStandardShaders(){\n        let appState = GetAppState();\n        await appState.loadShaderMaterialModel(AMaterialManager.DefaultMaterials.RGBA_SHADER);\n        // await appState.loadShaderMaterialModel(AMaterialManager.DefaultMaterials.TEXTURED_SHADER)\n        // await super.PreloadAssets();\n        // this.initCamera()\n    }\n\n\n    async PreloadAssets(){\n        // await this.materials.materialsLoadedPromise;\n    }\n\n\n    protected _modelMap:MVMModelMap={};\n    get modelMap(){\n        return this._modelMap;\n    }\n\n\n    get isInitialized(){\n        return this._isInitialized;\n    }\n\n    addIsInitializedListener(callback:(self:AObject)=>void, handle?:string, synchronous:boolean=true):ACallbackSwitch{\n        return this.addStateKeyListener('_isInitialized', callback, handle, synchronous);\n    }\n\n    addComponentUpdateListener(callback:(self:AObject)=>void, handle?:string):ACallbackSwitch{\n        return this.addEventListener(ASceneModel.SceneEvents.UpdateComponent, callback, handle);\n    }\n\n    signalComponentUpdate(){\n        this.signalEvent(ASceneModel.SceneEvents.UpdateComponent);\n    }\n\n    /**\n     * Adds the model to the model map if it isn't already in there, then signals that a node has been added.\n     * @param model\n     * @private\n     */\n    protected _addModel(model:AModelInterface){\n        if(!this.hasModel(model)){\n            this.modelMap[model.uid]=model;\n        }\n        this.signalEvent(SceneEvents.NodeAdded, model);\n    }\n    protected _removeModel(model:AModelInterface){\n        // delete this._modelMap[model.uid];\n        this.signalEvent(SceneEvents.NodeRemoved, model);\n    }\n\n    protected _releaseModel(model:AModelInterface){\n        delete this._modelMap[model.uid];\n        this.signalEvent(SceneEvents.NodeReleased, model);\n    }\n\n    hasModel(model:AModelInterface){\n        return (model.uid in this.modelMap);\n    }\n\n    hasModelID(modelID:string){\n        return (modelID in this.modelMap);\n    }\n\n    constructor(name?:string) {\n        super(name);\n        this._initMutex = new Mutex();\n        this._isInitialized = false;\n        this._clock = new AClock();\n        this._interactionDOMElement = document;\n        // this._interactions = new AInteractionModeMap(this);\n        this._currentInteractionModeName = BasicInteractionModes.default;\n\n        this._initSceneGraphSubscriptions();\n    }\n\n\n    initPerspectiveCameraNearPlane(left: number, right: number, bottom: number, top: number, near?: number, far?: number){\n        // this.camera = APerspectiveCameraModel.CreatePerspectiveFOV(90, 2, 0.001,100.0);\n        this.cameraModel = ACameraModel.CreatePerspectiveNearPlane(left, right, bottom, top, near, far);\n    }\n\n    initPerspectiveCameraFOV(fovy: number, aspect: number, near?: number, far?: number){\n        this.cameraModel = ACameraModel.CreatePerspectiveFOV(fovy, aspect, near, far);\n    }\n\n    initOrthographicCamera(left:number, right:number, bottom:number, top:number, near?:number, far?:number){\n        this.cameraModel =ACameraModel.CreateOrthographic(left, right, bottom, top, near, far);\n            // AOrthoCameraModel.Create(-1, 1, -1, 1) as AOrthoCameraModel;\n        // (this.camera as AOrthoCameraModel).normalized = normalized;\n    }\n\n    initNormalizedOrthographicCamera(){\n        this.cameraModel = ACameraModel.CreateOrthographic(-1, 1, -1, 1);\n        // this.cameraModel = AOrthoCameraModel.Create(-1, 1, -1, 1);\n    }\n\n    initUniformOrthographicCamera(scale?:number, near?:number, far?:number){\n        scale = scale??1.0;\n        this.cameraModel = ACameraModel.CreateOrthographic(-scale, scale, -scale, scale, near, far);\n        // this.cameraModel = AOrthoCameraModel.Create(-1, 1, -1, 1);\n    }\n\n    init2DOrthoCamera(scale?:number, near:number=-1, far:number=1, aspect:number=1){\n        scale = scale??1.0;\n        this.cameraModel = ACameraModel.CreateOrthographic(-scale*aspect, scale*aspect, -scale, scale, near, far);\n    }\n\n    protected _initSceneGraphSubscriptions(){\n        const self = this;\n        this.subscribe(this.addEventListener(AObjectNodeEvents.DescendantAdded, (descendant:ANodeModel)=>{\n            this._addModel(descendant)\n            // self._addModel(descendant);\n        }), ASCENEMODEL_EVENT_HANDLES.SCENE_NODE_ADDED);\n\n        this.subscribe(this.addEventListener(AObjectNodeEvents.DescendantRemoved, (descendant:ANodeModel)=>{\n            self._removeModel(descendant);\n        }), ASCENEMODEL_EVENT_HANDLES.SCENE_NODE_REMOVED);\n\n        // this.subscribe(this.addEventListener(AObjectNodeEvents.ChildRemoved, (child:ANodeModel)=>{\n        //     self._removeModel(child);\n        // }), ASCENEMODEL_EVENT_HANDLES.SCENE_CHILD_REMOVED);\n\n        this.subscribe(this.addEventListener(AObjectNodeEvents.DescendantReleased, (descendant:ANodeModel)=>{\n            self._releaseModel(descendant);\n        }), ASCENEMODEL_EVENT_HANDLES.SCENE_NODE_RELEASED);\n        // this.subscribe(this.addChildRemovedListener( (child:AObjectNode)=>{\n        //     self._removeModel(child as ANodeModel);\n        // }), ASCENEMODEL_EVENT_HANDLES.SCENE_CHILD_REMOVED);\n    }\n\n    getSceneModelControlSpec(){\n        let self = this;\n        return {\n            Name: {\n                value: self.name,\n                onChange: (v: string) => {\n                    self.name = v;\n                }\n            },\n        }\n    }\n\n\n\n    getDescendantList(){\n        return super.getDescendantList() as ANodeModel[];\n    }\n\n    // addTimedAction(callback: (actionProgress: number) => any, duration: number, actionOverCallback?: CallbackType, tween?: BezierTween, handle?: string) {\n    //     if (handle && (handle in this._subscriptions)) {\n    //         return;\n    //     }\n    //     const self = this;\n    //     const subscriptionHandle = handle ?? uuidv4();\n    //     this.subscribe(this._clock.CreateTimedAction(callback, duration, () => {\n    //             self.unsubscribe(subscriptionHandle);\n    //             if (actionOverCallback) {\n    //                 actionOverCallback();\n    //             }\n    //         }, tween),\n    //         subscriptionHandle);\n    // }\n\n    //\n    // /**\n    //  * Getter for the current interaction mode.\n    //  * @returns {AInteractionMode}\n    //  */\n    // get interactionMode() {\n    //     return this._interactions.modes[this._currentInteractionModeName];\n    // }\n\n\n    // /**\n    //  * Add an interaction to the current mode.\n    //  * @param interaction\n    //  */\n    // addInteraction(interaction: AInteraction) {\n    //     this.interactionMode.addInteraction(interaction);\n    //     // interaction.owner = this;\n    //     return interaction;\n    // }\n\n    // activateInteractions() {\n    //     this.interactionMode.activate();\n    // }\n    //\n    // setCurrentInteractionMode(name?: string) {\n    //     this.interactionMode.deactivate();\n    //     let activeMode = name ? name : BasicInteractionModes.default;\n    //     this._interactions.setActiveMode(activeMode);\n    //     this._currentInteractionModeName = activeMode;\n    // }\n\n    // defineInteractionMode(name: string, mode?: AInteractionMode) {\n    //     this._interactions.defineMode(name, mode);\n    // }\n    //\n    // clearInteractionMode(name: string) {\n    //     this._interactions.undefineMode(name)\n    // }\n    //\n    // isInteractionModeDefined(name: string):boolean {\n    //     return this._interactions.modeIsDefined(name);\n    // }\n}\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}