{"ast":null,"code":"import _initializerDefineProperty from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\nvar _dec, _class, _class2, _descriptor;\n/**\n * @file Manages the configuration settings for the widget.\n * @author Abe Davis\n * @description Defines AGLRenderWindow class, which connects an AGLContext with a HTMLElement and provides functionality for window image capture.\n */\nimport { AObject, AObjectState, ASerializable } from \"../../base\";\nimport { AGLContext } from \"./AGLContext\";\nimport { assert } from \"../../basictypes\";\nexport let AGLRenderWindow = (_dec = ASerializable(\"AGLRenderWindow\"), _dec(_class = (_class2 = class AGLRenderWindow extends AObject {\n  get context() {\n    return this._context;\n  }\n  setContext(context) {\n    this._context = context;\n  }\n  initContext(context) {\n    if (context) {\n      this.setContext(context);\n    } else {\n      if (this.context === undefined) {\n        this.setContext(new AGLContext());\n      }\n    }\n  }\n  get aspect() {\n    return this.container.clientWidth / this.container.clientHeight;\n  }\n  constructor(sceneController, context) {\n    super();\n    _initializerDefineProperty(this, \"isRendering\", _descriptor, this);\n    this._context = void 0;\n    this._sceneController = void 0;\n    this._frameRequested = false;\n    this.container = void 0;\n    this._recordNextFrame = false;\n    this._recordNextFrameCallback = void 0;\n    this.isRendering = false;\n    this.bindMethods();\n    const self = this;\n    this.initContext(context);\n    assert(sceneController.renderWindow === undefined, \"Tried to use scene controller that is already assigned to a window\");\n    this.setSceneController(sceneController);\n    window.addEventListener(\"resize\", () => {\n      self.sceneController.onWindowResize(self);\n    });\n  }\n  get sceneController() {\n    return this._sceneController;\n  }\n  get renderer() {\n    return this.sceneController.context.renderer;\n  }\n  setContainer(container) {\n    if (this.container) {\n      this.container.removeChild(this.sceneController.context.renderer.domElement);\n      console.log(\"New container!!!\");\n    }\n    this.container = container;\n    this.container.appendChild(this.sceneController.context.renderer.domElement);\n    this.sceneController.context.renderer.setSize(container.clientWidth, container.clientHeight);\n  }\n  setSceneController(sceneController) {\n    this._sceneController = sceneController;\n    this.sceneController.setRenderWindow(this);\n  }\n  bindMethods() {\n    this.render = this.render.bind(this);\n    this._saveSingleFrameCallback = this._saveSingleFrameCallback.bind(this);\n  }\n  recordNextFrame(callback) {\n    if (callback === undefined) {\n      this._recordNextFrameCallback = this._saveSingleFrameCallback;\n    } else {\n      this._recordNextFrameCallback = callback;\n    }\n    this._recordNextFrame = true;\n  }\n  _saveSingleFrameCallback(imageBlob) {\n    // @ts-ignore\n    saveAs(imageBlob, `${this.serializationLabel}.png`);\n  }\n  stopRendering() {\n    this.isRendering = false;\n  }\n  startRendering() {\n    if (!this.isRendering) {\n      this.isRendering = true;\n      this.render();\n    }\n  }\n  render() {\n    if (this.isRendering) {\n      requestAnimationFrame(() => this.render());\n      this._frameRequested = true;\n      if (this.sceneController.isInitialized && this.sceneController.isReadyToRender) {\n        this.sceneController.onAnimationFrameCallback(this.context);\n        if (this._recordNextFrame) {\n          this._recordNextFrame = false;\n          let self = this;\n          this.renderer.domElement.toBlob(function (blob) {\n            self._recordNextFrameCallback(blob);\n          });\n          console.warn(\"May be using DOM element resolution for saving frame...\");\n        }\n      }\n    }\n  }\n}, _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"isRendering\", [AObjectState], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);","map":{"version":3,"names":["AObject","AObjectState","ASerializable","AGLContext","assert","AGLRenderWindow","_dec","_class","_class2","context","_context","setContext","initContext","undefined","aspect","container","clientWidth","clientHeight","constructor","sceneController","_initializerDefineProperty","_descriptor","_sceneController","_frameRequested","_recordNextFrame","_recordNextFrameCallback","isRendering","bindMethods","self","renderWindow","setSceneController","window","addEventListener","onWindowResize","renderer","setContainer","removeChild","domElement","console","log","appendChild","setSize","setRenderWindow","render","bind","_saveSingleFrameCallback","recordNextFrame","callback","imageBlob","saveAs","serializationLabel","stopRendering","startRendering","requestAnimationFrame","isInitialized","isReadyToRender","onAnimationFrameCallback","toBlob","blob","warn","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/rendering/context/AGLRenderWindow.ts"],"sourcesContent":["/**\n * @file Manages the configuration settings for the widget.\n * @author Abe Davis\n * @description Defines AGLRenderWindow class, which connects an AGLContext with a HTMLElement and provides functionality for window image capture.\n */\nimport {AObject, AObjectState, ASerializable} from \"../../base\";\nimport {AGLContext} from \"./AGLContext\";\nimport {ASceneController} from \"../../scene\";\nimport {assert} from \"../../basictypes\";\n\n\n@ASerializable(\"AGLRenderWindow\")\nexport class AGLRenderWindow extends AObject {\n    @AObjectState isRendering:boolean;\n    protected _context!:AGLContext;\n    protected _sceneController!:ASceneController;\n    protected _frameRequested:boolean=false;\n    public container!: HTMLElement;\n\n    protected _recordNextFrame: boolean = false;\n    protected _recordNextFrameCallback!: (imageBlob: Blob | null) => void;\n\n    get context(){\n        return this._context;\n    }\n\n    setContext(context:AGLContext){\n        this._context = context;\n    }\n\n    initContext(context?:AGLContext){\n        if(context){\n            this.setContext(context);\n        }else{\n            if(this.context === undefined){\n                this.setContext(new AGLContext());\n            }\n        }\n\n    }\n\n    get aspect(){\n        return this.container.clientWidth/this.container.clientHeight;\n    }\n\n    constructor(sceneController:ASceneController, context?:AGLContext){\n        super();\n        this.isRendering=false;\n        this.bindMethods();\n        const self = this;\n        this.initContext(context);\n        assert(sceneController.renderWindow === undefined, \"Tried to use scene controller that is already assigned to a window\");\n        this.setSceneController(sceneController);\n        window.addEventListener(\"resize\", ()=>{\n            self.sceneController.onWindowResize(self);\n        });\n    }\n\n    get sceneController(){return this._sceneController;}\n    get renderer() {\n        return this.sceneController.context.renderer;\n    }\n\n\n    setContainer(container:HTMLElement){\n        if(this.container){\n            this.container.removeChild(this.sceneController.context.renderer.domElement)\n            console.log(\"New container!!!\")\n        }\n        this.container = container;\n        this.container.appendChild(this.sceneController.context.renderer.domElement);\n        this.sceneController.context.renderer.setSize(container.clientWidth, container.clientHeight)\n\n    }\n\n    setSceneController(sceneController:ASceneController){\n        this._sceneController = sceneController;\n        this.sceneController.setRenderWindow(this);\n    }\n\n    bindMethods(){\n        this.render = this.render.bind(this);\n        this._saveSingleFrameCallback = this._saveSingleFrameCallback.bind(this);\n    }\n\n    recordNextFrame(callback?:(imageBlob:Blob|null)=>void){\n        if(callback===undefined){\n            this._recordNextFrameCallback = this._saveSingleFrameCallback;\n        }else{\n            this._recordNextFrameCallback=callback;\n        }\n        this._recordNextFrame = true;\n    }\n\n    _saveSingleFrameCallback(imageBlob:Blob|null){\n        // @ts-ignore\n        saveAs(imageBlob, `${this.serializationLabel}.png`);\n    }\n\n    stopRendering(){\n        this.isRendering = false;\n    }\n\n    startRendering(){\n        if(!this.isRendering){\n            this.isRendering=true;\n            this.render();\n        }\n    }\n\n    render(){\n        if(this.isRendering){\n            requestAnimationFrame(()=>this.render());\n            this._frameRequested=true;\n            if(this.sceneController.isInitialized && this.sceneController.isReadyToRender) {\n                this.sceneController.onAnimationFrameCallback(this.context);\n                if (this._recordNextFrame) {\n                    this._recordNextFrame = false;\n                    let self = this;\n                    this.renderer.domElement.toBlob(function (blob: Blob | null) {\n                        self._recordNextFrameCallback(blob);\n                    });\n                    console.warn(\"May be using DOM element resolution for saving frame...\")\n                }\n            }\n        }\n    }\n}\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA,SAAQA,OAAO,EAAEC,YAAY,EAAEC,aAAa,QAAO,YAAY;AAC/D,SAAQC,UAAU,QAAO,cAAc;AAEvC,SAAQC,MAAM,QAAO,kBAAkB;AAGvC,WACaC,eAAe,IAAAC,IAAA,GAD3BJ,aAAa,CAAC,iBAAiB,CAAC,EAAAI,IAAA,CAAAC,MAAA,IAAAC,OAAA,GAAjC,MACaH,eAAe,SAASL,OAAO,CAAC;EAUzC,IAAIS,OAAOA,CAAA,EAAE;IACT,OAAO,IAAI,CAACC,QAAQ;EACxB;EAEAC,UAAUA,CAACF,OAAkB,EAAC;IAC1B,IAAI,CAACC,QAAQ,GAAGD,OAAO;EAC3B;EAEAG,WAAWA,CAACH,OAAmB,EAAC;IAC5B,IAAGA,OAAO,EAAC;MACP,IAAI,CAACE,UAAU,CAACF,OAAO,CAAC;IAC5B,CAAC,MAAI;MACD,IAAG,IAAI,CAACA,OAAO,KAAKI,SAAS,EAAC;QAC1B,IAAI,CAACF,UAAU,CAAC,IAAIR,UAAU,CAAC,CAAC,CAAC;MACrC;IACJ;EAEJ;EAEA,IAAIW,MAAMA,CAAA,EAAE;IACR,OAAO,IAAI,CAACC,SAAS,CAACC,WAAW,GAAC,IAAI,CAACD,SAAS,CAACE,YAAY;EACjE;EAEAC,WAAWA,CAACC,eAAgC,EAAEV,OAAmB,EAAC;IAC9D,KAAK,CAAC,CAAC;IAACW,0BAAA,sBAAAC,WAAA;IAAA,KAhCFX,QAAQ;IAAA,KACRY,gBAAgB;IAAA,KAChBC,eAAe,GAAS,KAAK;IAAA,KAChCR,SAAS;IAAA,KAENS,gBAAgB,GAAY,KAAK;IAAA,KACjCC,wBAAwB;IA2B9B,IAAI,CAACC,WAAW,GAAC,KAAK;IACtB,IAAI,CAACC,WAAW,CAAC,CAAC;IAClB,MAAMC,IAAI,GAAG,IAAI;IACjB,IAAI,CAAChB,WAAW,CAACH,OAAO,CAAC;IACzBL,MAAM,CAACe,eAAe,CAACU,YAAY,KAAKhB,SAAS,EAAE,oEAAoE,CAAC;IACxH,IAAI,CAACiB,kBAAkB,CAACX,eAAe,CAAC;IACxCY,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,MAAI;MAClCJ,IAAI,CAACT,eAAe,CAACc,cAAc,CAACL,IAAI,CAAC;IAC7C,CAAC,CAAC;EACN;EAEA,IAAIT,eAAeA,CAAA,EAAE;IAAC,OAAO,IAAI,CAACG,gBAAgB;EAAC;EACnD,IAAIY,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACf,eAAe,CAACV,OAAO,CAACyB,QAAQ;EAChD;EAGAC,YAAYA,CAACpB,SAAqB,EAAC;IAC/B,IAAG,IAAI,CAACA,SAAS,EAAC;MACd,IAAI,CAACA,SAAS,CAACqB,WAAW,CAAC,IAAI,CAACjB,eAAe,CAACV,OAAO,CAACyB,QAAQ,CAACG,UAAU,CAAC;MAC5EC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;IACnC;IACA,IAAI,CAACxB,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACA,SAAS,CAACyB,WAAW,CAAC,IAAI,CAACrB,eAAe,CAACV,OAAO,CAACyB,QAAQ,CAACG,UAAU,CAAC;IAC5E,IAAI,CAAClB,eAAe,CAACV,OAAO,CAACyB,QAAQ,CAACO,OAAO,CAAC1B,SAAS,CAACC,WAAW,EAAED,SAAS,CAACE,YAAY,CAAC;EAEhG;EAEAa,kBAAkBA,CAACX,eAAgC,EAAC;IAChD,IAAI,CAACG,gBAAgB,GAAGH,eAAe;IACvC,IAAI,CAACA,eAAe,CAACuB,eAAe,CAAC,IAAI,CAAC;EAC9C;EAEAf,WAAWA,CAAA,EAAE;IACT,IAAI,CAACgB,MAAM,GAAG,IAAI,CAACA,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;IACpC,IAAI,CAACC,wBAAwB,GAAG,IAAI,CAACA,wBAAwB,CAACD,IAAI,CAAC,IAAI,CAAC;EAC5E;EAEAE,eAAeA,CAACC,QAAqC,EAAC;IAClD,IAAGA,QAAQ,KAAGlC,SAAS,EAAC;MACpB,IAAI,CAACY,wBAAwB,GAAG,IAAI,CAACoB,wBAAwB;IACjE,CAAC,MAAI;MACD,IAAI,CAACpB,wBAAwB,GAACsB,QAAQ;IAC1C;IACA,IAAI,CAACvB,gBAAgB,GAAG,IAAI;EAChC;EAEAqB,wBAAwBA,CAACG,SAAmB,EAAC;IACzC;IACAC,MAAM,CAACD,SAAS,EAAE,GAAG,IAAI,CAACE,kBAAkB,MAAM,CAAC;EACvD;EAEAC,aAAaA,CAAA,EAAE;IACX,IAAI,CAACzB,WAAW,GAAG,KAAK;EAC5B;EAEA0B,cAAcA,CAAA,EAAE;IACZ,IAAG,CAAC,IAAI,CAAC1B,WAAW,EAAC;MACjB,IAAI,CAACA,WAAW,GAAC,IAAI;MACrB,IAAI,CAACiB,MAAM,CAAC,CAAC;IACjB;EACJ;EAEAA,MAAMA,CAAA,EAAE;IACJ,IAAG,IAAI,CAACjB,WAAW,EAAC;MAChB2B,qBAAqB,CAAC,MAAI,IAAI,CAACV,MAAM,CAAC,CAAC,CAAC;MACxC,IAAI,CAACpB,eAAe,GAAC,IAAI;MACzB,IAAG,IAAI,CAACJ,eAAe,CAACmC,aAAa,IAAI,IAAI,CAACnC,eAAe,CAACoC,eAAe,EAAE;QAC3E,IAAI,CAACpC,eAAe,CAACqC,wBAAwB,CAAC,IAAI,CAAC/C,OAAO,CAAC;QAC3D,IAAI,IAAI,CAACe,gBAAgB,EAAE;UACvB,IAAI,CAACA,gBAAgB,GAAG,KAAK;UAC7B,IAAII,IAAI,GAAG,IAAI;UACf,IAAI,CAACM,QAAQ,CAACG,UAAU,CAACoB,MAAM,CAAC,UAAUC,IAAiB,EAAE;YACzD9B,IAAI,CAACH,wBAAwB,CAACiC,IAAI,CAAC;UACvC,CAAC,CAAC;UACFpB,OAAO,CAACqB,IAAI,CAAC,yDAAyD,CAAC;QAC3E;MACJ;IACJ;EACJ;AACJ,CAAC,EAAAtC,WAAA,GAAAuC,yBAAA,CAAApD,OAAA,CAAAqD,SAAA,kBAlHI5D,YAAY;EAAA6D,YAAA;EAAAC,UAAA;EAAAC,QAAA;EAAAC,WAAA;AAAA,IAAAzD,OAAA,MAAAD,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}