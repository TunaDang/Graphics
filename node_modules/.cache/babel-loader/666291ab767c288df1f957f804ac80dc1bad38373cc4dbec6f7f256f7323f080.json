{"ast":null,"code":"var _dec, _class;\n/**\n * @file Manages the configuration settings for the widget.\n * @author Abe Davis\n * @description ACameraModel holds all of the data for a camera.\n * IMPORTANT! The camera property controls the pose. Never update _transform directly!\n */\nimport * as THREE from \"three\";\nimport { ASerializable } from \"../../base\";\nimport { ANodeModel3D } from \"../nodeModel\";\nimport { ACamera } from \"../../math\";\nimport { GetAppState } from \"../../appstate\";\nexport let ACameraModel = (_dec = ASerializable(\"ACameraModel\"), _dec(_class = class ACameraModel extends ANodeModel3D {\n  get camera() {\n    return this._camera;\n  }\n  onCanvasResize(width, height) {\n    this.camera.onCanvasResize(width, height);\n  }\n  get pose() {\n    return this.camera.pose;\n  }\n  get projection() {\n    return this.camera.projection;\n  }\n  setPose(pose) {\n    // this.camera.pose=pose.getMat4();\n    this.camera.setPose(pose);\n  }\n  setPosition(position) {\n    this.camera.pose.setPosition(position);\n  }\n  setProjection(m) {\n    this.camera.projection = m;\n  }\n  constructor(camera, ...args) {\n    super();\n    this._camera = void 0;\n    if (camera instanceof ACamera) this._camera = camera;\n    if (!this.camera) {\n      if (camera instanceof THREE.PerspectiveCamera) {\n        this._camera = new ACamera(camera);\n      }\n    }\n    const self = this;\n    this._setCameraListeners();\n  }\n  get transform() {\n    return this.camera.getPose();\n  }\n  setTransform(t) {\n    if (this._camera) {\n      this.camera.setPose(t.getMat4());\n    } else {\n      super.setTransform(t);\n    }\n  }\n  _setCameraListeners() {\n    const self = this;\n    const POSE_UPDATE_HANDLE = ACamera.CameraUpdateEvents.POSE_UPDATED + '_' + this.serializationLabel;\n    const PROJECTION_UPDATE_HANDLE = ACamera.CameraUpdateEvents.PROJECTION_UPDATED + '_' + this.serializationLabel;\n    this.unsubscribe(POSE_UPDATE_HANDLE, false);\n    this.unsubscribe(PROJECTION_UPDATE_HANDLE, false);\n    this.subscribe(this.camera.addPoseListener(() => {\n      self._transform = this.camera.getPose();\n      // self.signalTransformUpdate();\n      // self.signalEvent(ACamera.CameraUpdateEvents.POSE_UPDATED);\n    }), POSE_UPDATE_HANDLE);\n    this.subscribe(this.camera.addProjectionListener(() => {\n      self.signalEvent(ACamera.CameraUpdateEvents.PROJECTION_UPDATED);\n    }), PROJECTION_UPDATE_HANDLE);\n  }\n  signalCameraProjectionUpdate() {\n    this.signalEvent(ACamera.CameraUpdateEvents.PROJECTION_UPDATED);\n  }\n  addCameraProjectionListener(callback, handle, synchronous = true) {\n    return this.camera.addProjectionListener(callback, handle, synchronous);\n  }\n  get forward() {\n    return this.camera.forward;\n  }\n  get right() {\n    return this.camera.right;\n  }\n  get up() {\n    return this.camera.up;\n  }\n\n  /**\n   * Creates a perspective camera model based on vertical fov (in radians), aspect, near, and far\n   * @param fovy\n   * @param aspect\n   * @param near\n   * @param far\n   * @returns {ACameraModel}\n   * @constructor\n   */\n  static CreatePerspectiveFOV(fovy, aspect, near, far) {\n    var _near, _far;\n    let appState = GetAppState();\n    near = (_near = near) !== null && _near !== void 0 ? _near : appState.zNear;\n    far = (_far = far) !== null && _far !== void 0 ? _far : appState.zFar;\n    let camera = ACamera.CreatePerspectiveFOV(fovy, aspect, near, far);\n    let cameraModel = new ACameraModel(camera);\n    return cameraModel;\n  }\n  static CreatePerspectiveNearPlane(left, right, bottom, top, near, far) {\n    var _near2, _far2;\n    let appState = GetAppState();\n    near = (_near2 = near) !== null && _near2 !== void 0 ? _near2 : appState.zNear;\n    far = (_far2 = far) !== null && _far2 !== void 0 ? _far2 : appState.zFar;\n    let camera = ACamera.CreatePerspectiveNearPlane(left, right, bottom, top, near, far);\n    return new ACameraModel(camera);\n  }\n  static CreateOrthographic(left, right, bottom, top, near, far) {\n    var _near3, _far3;\n    let appState = GetAppState();\n    near = (_near3 = near) !== null && _near3 !== void 0 ? _near3 : appState.orthoZNear;\n    far = (_far3 = far) !== null && _far3 !== void 0 ? _far3 : appState.orthoZFar;\n    let camera = ACamera.CreateOrthographic(left, right, bottom, top, near, far);\n    return new ACameraModel(camera);\n  }\n}) || _class);","map":{"version":3,"names":["THREE","ASerializable","ANodeModel3D","ACamera","GetAppState","ACameraModel","_dec","_class","camera","_camera","onCanvasResize","width","height","pose","projection","setPose","setPosition","position","setProjection","m","constructor","args","PerspectiveCamera","self","_setCameraListeners","transform","getPose","setTransform","t","getMat4","POSE_UPDATE_HANDLE","CameraUpdateEvents","POSE_UPDATED","serializationLabel","PROJECTION_UPDATE_HANDLE","PROJECTION_UPDATED","unsubscribe","subscribe","addPoseListener","_transform","addProjectionListener","signalEvent","signalCameraProjectionUpdate","addCameraProjectionListener","callback","handle","synchronous","forward","right","up","CreatePerspectiveFOV","fovy","aspect","near","far","_near","_far","appState","zNear","zFar","cameraModel","CreatePerspectiveNearPlane","left","bottom","top","_near2","_far2","CreateOrthographic","_near3","_far3","orthoZNear","orthoZFar"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/scene/camera/ACameraModel.ts"],"sourcesContent":["/**\n * @file Manages the configuration settings for the widget.\n * @author Abe Davis\n * @description ACameraModel holds all of the data for a camera.\n * IMPORTANT! The camera property controls the pose. Never update _transform directly!\n */\nimport * as THREE from \"three\";\nimport {AObject, ASerializable} from \"../../base\";\nimport {Mat4, Vec3} from \"../../math/linalg\";\nimport {ANodeModel3D} from \"../nodeModel\";\nimport {ACamera, TransformationInterface} from \"../../math\";\nimport {GetAppState} from \"../../appstate\";\n\n@ASerializable(\"ACameraModel\")\nexport class ACameraModel extends ANodeModel3D{\n    protected _camera!: ACamera;\n    get camera() {\n        return this._camera;\n    }\n    onCanvasResize(width:number, height:number){\n        this.camera.onCanvasResize(width, height);\n    }\n    get pose(){return this.camera.pose;}\n    get projection(){return this.camera.projection;}\n    setPose(pose:TransformationInterface){\n        // this.camera.pose=pose.getMat4();\n        this.camera.setPose(pose);\n    }\n\n    setPosition(position:Vec3){\n        this.camera.pose.setPosition(position);\n    }\n\n    setProjection(m:Mat4){\n        this.camera.projection = m;\n    }\n\n    constructor(camera?: THREE.Camera | ACamera, ...args: any[]) {\n        super();\n        if (camera instanceof ACamera) this._camera = camera;\n        if (!this.camera) {\n            if(camera instanceof THREE.PerspectiveCamera){\n                this._camera = new ACamera(camera);\n            }\n        }\n        const self = this;\n        this._setCameraListeners();\n    }\n\n    get transform() {\n        return this.camera.getPose();\n    }\n\n    setTransform(t: TransformationInterface) {\n        if(this._camera){\n            this.camera.setPose(t.getMat4());\n        }else{\n            super.setTransform(t);\n        }\n    }\n\n\n    _setCameraListeners() {\n        const self = this;\n        const POSE_UPDATE_HANDLE = ACamera.CameraUpdateEvents.POSE_UPDATED + '_'+ this.serializationLabel;\n        const PROJECTION_UPDATE_HANDLE = ACamera.CameraUpdateEvents.PROJECTION_UPDATED + '_' + this.serializationLabel;\n        this.unsubscribe(POSE_UPDATE_HANDLE, false);\n        this.unsubscribe(PROJECTION_UPDATE_HANDLE, false);\n        this.subscribe(this.camera.addPoseListener(() => {\n                self._transform = this.camera.getPose();\n                // self.signalTransformUpdate();\n                // self.signalEvent(ACamera.CameraUpdateEvents.POSE_UPDATED);\n            }),\n            POSE_UPDATE_HANDLE\n        )\n        this.subscribe(this.camera.addProjectionListener(() => {\n                self.signalEvent(ACamera.CameraUpdateEvents.PROJECTION_UPDATED);\n            }),\n            PROJECTION_UPDATE_HANDLE\n        );\n    }\n\n    signalCameraProjectionUpdate() {\n        this.signalEvent(ACamera.CameraUpdateEvents.PROJECTION_UPDATED);\n    }\n\n    addCameraProjectionListener(callback: (self: AObject) => void, handle?: string, synchronous:boolean=true) {\n        return this.camera.addProjectionListener(callback, handle, synchronous);\n    }\n\n\n    get forward(){return this.camera.forward;}\n    get right(){return this.camera.right;}\n    get up(){return this.camera.up;}\n\n    /**\n     * Creates a perspective camera model based on vertical fov (in radians), aspect, near, and far\n     * @param fovy\n     * @param aspect\n     * @param near\n     * @param far\n     * @returns {ACameraModel}\n     * @constructor\n     */\n    static CreatePerspectiveFOV(fovy: number, aspect: number, near?: number, far?: number) {\n        let appState =GetAppState();\n        near = near??appState.zNear;\n        far = far??appState.zFar;\n        let camera = ACamera.CreatePerspectiveFOV(fovy, aspect, near, far)\n        let cameraModel = new ACameraModel(camera);\n        return cameraModel;\n    }\n\n    static CreatePerspectiveNearPlane(left: number, right: number, bottom: number, top: number, near?: number, far?: number) {\n        let appState =GetAppState();\n        near = near??appState.zNear;\n        far = far??appState.zFar;\n        let camera = ACamera.CreatePerspectiveNearPlane(left, right, bottom, top, near, far)\n        return new ACameraModel(camera);\n    }\n\n    static CreateOrthographic(left:number, right:number, bottom:number, top:number, near?:number, far?:number) {\n        let appState =GetAppState();\n        near = near??appState.orthoZNear;\n        far = far??appState.orthoZFar;\n        let camera = ACamera.CreateOrthographic(left, right, bottom, top, near, far)\n        return new ACameraModel(camera);\n    }\n\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}