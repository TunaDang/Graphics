{"ast":null,"code":"/**\n * Base class for views in the Anigraph MVC scheme.\n * The primary responsibility for each view subclass is to specify how a model translates into Three.js rendering calls. The view itself should hold Three.js objects and make them available to controllers for specifying interactions.\n * Views should always be initialize\n */\nimport * as THREE from \"three\";\nimport { ANodeModel } from \"../nodeModel\";\nimport { AView } from \"../../base\";\nimport { Mat3, NodeTransform2D } from \"../../math\";\nimport { AMaterial } from \"../../rendering\";\nimport { AObject3DModelWrapper } from \"../../geometry\";\nimport { ALoadedElement } from \"../../rendering/loaded/ALoadedElement\";\nexport let BASIC_VIEW_SUBSCRIPTIONS = /*#__PURE__*/function (BASIC_VIEW_SUBSCRIPTIONS) {\n  BASIC_VIEW_SUBSCRIPTIONS[\"MODEL_STATE_LISTENER\"] = \"VIEW_MODEL_STATE_LISTENER\";\n  BASIC_VIEW_SUBSCRIPTIONS[\"MODEL_RELEASE_LISTENER\"] = \"VIEW_MODEL_RELEASE_LISTENER\";\n  BASIC_VIEW_SUBSCRIPTIONS[\"MODEL_GEOMETRY_LISTENER\"] = \"VIEW_MODEL_GEOMETRY_LISTENER\";\n  BASIC_VIEW_SUBSCRIPTIONS[\"MODEL_PARENT_CHANGED\"] = \"MODEL_PARENT_CHANGED\";\n  BASIC_VIEW_SUBSCRIPTIONS[\"MODEL_VISIBLE\"] = \"MODEL_VISIBLE\";\n  return BASIC_VIEW_SUBSCRIPTIONS;\n}({}); // MODEL_TRANSFORM_LISTENER=\"MODEL_TRANSFORM_LISTENER\"\nvar ANODEVIEW_MATERIAL_EVENTS = /*#__PURE__*/function (ANODEVIEW_MATERIAL_EVENTS) {\n  ANODEVIEW_MATERIAL_EVENTS[\"UPDATE\"] = \"AVIEW_MATERIAL_UPDATE\";\n  ANODEVIEW_MATERIAL_EVENTS[\"CHANGE\"] = \"AVIEW_MATERIAL_CHANGE\";\n  ANODEVIEW_MATERIAL_EVENTS[\"COLOR\"] = \"AVIEW_MATERIAL_COLOR\";\n  return ANODEVIEW_MATERIAL_EVENTS;\n}(ANODEVIEW_MATERIAL_EVENTS || {});\n/**\n * Base View Class\n */\nexport class _ANodeView extends AView {\n  constructor(...args) {\n    super(...args);\n    this._model = void 0;\n    /**\n     * The three.js object for this view. Should be a subclass of THREE.Object3D\n     * @type {THREE.Object3D}\n     */\n    this._threejs = void 0;\n  } // abstract updateTransform():void;\n  get model() {\n    return this._model;\n  }\n  get controller() {\n    return this._controller;\n  }\n  setModelListeners() {\n    const self = this;\n    this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_RELEASE_LISTENER, false);\n    this.subscribe(this.model.addEventListener(ANodeModel.AModelEvents.RELEASE, () => {\n      self.dispose();\n    }), BASIC_VIEW_SUBSCRIPTIONS.MODEL_RELEASE_LISTENER);\n    this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_STATE_LISTENER, false);\n    this.subscribe(this.model.addStateListener(() => {\n      self.update();\n    }), BASIC_VIEW_SUBSCRIPTIONS.MODEL_STATE_LISTENER);\n    this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_GEOMETRY_LISTENER, false);\n    this.subscribe(this.model.addGeometryListener(() => {\n      self.update();\n    }), BASIC_VIEW_SUBSCRIPTIONS.MODEL_GEOMETRY_LISTENER);\n    // this.subscribe(this.model.addTransformListener(()=>{self.updateTransform();}))\n\n    // this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_PARENT_CHANGED, false);\n    // this.subscribe(this.model.addNewParentListener((newParent?:AModel, oldParent?:AModel)=>{\n    //     if(self.threejs.parent){\n    //         self.threejs.removeFromParent();\n    //     }\n    //     if(newParent !== undefined && newParent!==this.model) {\n    //         let newParentView = self.controller.getViewListForModel(newParent)[0];\n    //         newParentView.threejs.add(self.threejs);\n    //     }\n    // }), BASIC_VIEW_SUBSCRIPTIONS.MODEL_PARENT_CHANGED)\n\n    // this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_TRANSFORM_LISTENER, false);\n    // this.subscribe(this.model.addTransformListener((model:AObject)=>{\n    //     self.updateTransform(self.model.transform);\n    // }),\n    //     BASIC_VIEW_SUBSCRIPTIONS.MODEL_TRANSFORM_LISTENER\n    // )\n\n    this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_VISIBLE, false);\n    this.subscribe(this.model.addVisibilityListener(() => {\n      self.threejs.visible = this.model.visible;\n    }), BASIC_VIEW_SUBSCRIPTIONS.MODEL_VISIBLE);\n  }\n  setParentView(newParent) {\n    if (this.threejs.parent) {\n      throw new Error(\"Tried to parent view that already had parent\");\n    }\n    if (newParent !== undefined) {\n      newParent.threejs.add(this.threejs);\n      // newParent._threejs.add(this.threejs);\n    }\n  }\n  get threejs() {\n    return this._threejs;\n  }\n\n  /**\n   * This gets called by the ASceneController in createViewForNodeModel(nodeModel: ANodeModel)\n   * @param model\n   */\n  setModel(model) {\n    this._model = model;\n    this._initializeThreeJSObject();\n    this._threejs.matrixAutoUpdate = false;\n    this.init();\n    this.update();\n    this.setModelListeners();\n  }\n  get modelID() {\n    return this.model.uid;\n  }\n  release() {\n    this.dispose();\n    super.release();\n  }\n}\nexport class ANodeView extends _ANodeView {\n  constructor(...args) {\n    super(...args);\n    this._loadedElements = {};\n    //##################//--Graphic Objects--\\\\##################\n    //<editor-fold desc=\"Graphic Objects\">\n    /*\n    ToDo: should write docs for this\n     */\n    this.graphics = {};\n  }\n  _initializeThreeJSObject() {\n    this._threejs = new THREE.Group();\n  }\n  get threejs() {\n    return this._threejs;\n  }\n  initLoadedObjects() {\n    const self = this;\n    for (let mname in this.model.geometry.members) {\n      let m = this.model.geometry.members[mname];\n      if (m instanceof AObject3DModelWrapper) {\n        let obj = new ALoadedElement(m);\n        if (this.model.material) {\n          obj.setMaterial(this.model.material.threejs);\n        } else {\n          obj.setMaterial(new THREE.MeshBasicMaterial());\n        }\n        this.addLoadedElement(obj);\n      }\n    }\n  }\n  addLoadedElement(element) {\n    this.registerAndAddGraphic(element);\n    this._loadedElements[element.uid] = element;\n  }\n  registerAndAddGraphic(graphic) {\n    this.registerGraphic(graphic);\n    this.add(graphic);\n  }\n  add(graphic) {\n    this.threejs.add(graphic.threejs);\n  }\n  disposeGraphic(graphic) {\n    this._removeGraphic(graphic);\n    graphic.dispose();\n  }\n  registerGraphic(graphic) {\n    this.graphics[graphic.uid] = graphic;\n  }\n  _removeGraphic(graphic) {\n    this.threejs.remove(graphic.threejs);\n    delete this.graphics[graphic.uid];\n  }\n  moveGraphicToBack(graphic) {\n    this._removeGraphic(graphic);\n    this.registerAndAddGraphic(graphic);\n    // addGraphicToRoot(graphic);\n  }\n  getGraphicList() {\n    return Object.values(this.graphics);\n  }\n  mapOverGraphics(fn) {\n    return this.getGraphicList().map(fn);\n  }\n  disposeGraphics() {\n    let graphicKeys = Object.keys(this.graphics);\n    for (let e of graphicKeys) {\n      let graphic = this.graphics[e];\n      this._removeGraphic(graphic);\n      graphic.dispose();\n    }\n  }\n  dispose() {\n    this.disposeGraphics();\n    this.threejs.removeFromParent();\n  }\n\n  //</editor-fold>\n  //##################\\\\--Graphic Objects--//##################\n\n  setTransform(transform) {\n    transform.getMatrix().assignTo(this.threejs.matrix);\n  }\n\n  // updateTransform() {\n  //     this.setTransform(this.model.transform)\n  // }\n\n  setModelListeners() {\n    super.setModelListeners();\n    this._initMaterialListener();\n  }\n  _initMaterialListener() {\n    const self = this;\n    this.addMaterialUpdateCallback((...args) => {\n      self.onMaterialUpdate(...args);\n    }, AMaterial.Events.UPDATE);\n    this.addMaterialChangeCallback(() => {\n      self.onMaterialChange();\n    }, AMaterial.Events.CHANGE);\n\n    // this.addModelColorCallback((...args:any[])=>{\n    //         self.onModelColorChange();\n    //     },\n    //     \"Material Color Change\")\n  }\n  onMaterialUpdate(...args) {\n    const self = this;\n    this.mapOverGraphics(element => {\n      element.onMaterialUpdate(self.model.material, ...args);\n    });\n  }\n  onMaterialChange() {\n    const self = this;\n    this.mapOverGraphics(element => {\n      element.onMaterialChange(self.model.material);\n    });\n  }\n\n  // onModelColorChange(){\n  //     const self = this;\n  //     this.mapOverGraphics((element:AGraphicObject)=>{\n  //         if('setColor' in element){\n  //             element.setColor(self.model.color);\n  //         }\n  //     })\n  // }\n\n  addMaterialUpdateCallback(callback, handle) {\n    const self = this;\n    this.subscribe(self.model.addMaterialUpdateListener(() => {\n      callback();\n    }), handle);\n  }\n  addMaterialChangeCallback(callback, handle) {\n    const self = this;\n    this.subscribe(self.model.addMaterialChangeListener(() => {\n      callback();\n    }), handle);\n  }\n\n  // addModelColorCallback(callback:(self?:AObject)=>void, handle?:string){\n  //     const self = this;\n  //     this.subscribe(\n  //         self.model.addColorListener( ()=>{\n  //             callback();\n  //         }),\n  //         handle\n  //     );\n  // }\n}\nANodeView.MaterialUpdates = ANODEVIEW_MATERIAL_EVENTS;\nexport class ANodeView2D extends ANodeView {\n  setTransform(transform) {\n    if (transform instanceof Mat3) {\n      let t = transform.Mat4From2DH();\n      t.m23 = this.model.zValue;\n      t.assignTo(this.threejs.matrix);\n    } else if (transform instanceof NodeTransform2D) {\n      let t = transform.getMatrix().Mat4From2DH();\n      t.m23 = this.model.zValue;\n      t.assignTo(this.threejs.matrix);\n    } else {\n      transform.getMatrix().assignTo(this.threejs.matrix);\n    }\n  }\n}","map":{"version":3,"names":["THREE","ANodeModel","AView","Mat3","NodeTransform2D","AMaterial","AObject3DModelWrapper","ALoadedElement","BASIC_VIEW_SUBSCRIPTIONS","ANODEVIEW_MATERIAL_EVENTS","_ANodeView","constructor","args","_model","_threejs","model","controller","_controller","setModelListeners","self","unsubscribe","MODEL_RELEASE_LISTENER","subscribe","addEventListener","AModelEvents","RELEASE","dispose","MODEL_STATE_LISTENER","addStateListener","update","MODEL_GEOMETRY_LISTENER","addGeometryListener","MODEL_VISIBLE","addVisibilityListener","threejs","visible","setParentView","newParent","parent","Error","undefined","add","setModel","_initializeThreeJSObject","matrixAutoUpdate","init","modelID","uid","release","ANodeView","_loadedElements","graphics","Group","initLoadedObjects","mname","geometry","members","m","obj","material","setMaterial","MeshBasicMaterial","addLoadedElement","element","registerAndAddGraphic","graphic","registerGraphic","disposeGraphic","_removeGraphic","remove","moveGraphicToBack","getGraphicList","Object","values","mapOverGraphics","fn","map","disposeGraphics","graphicKeys","keys","e","removeFromParent","setTransform","transform","getMatrix","assignTo","matrix","_initMaterialListener","addMaterialUpdateCallback","onMaterialUpdate","Events","UPDATE","addMaterialChangeCallback","onMaterialChange","CHANGE","callback","handle","addMaterialUpdateListener","addMaterialChangeListener","MaterialUpdates","ANodeView2D","t","Mat4From2DH","m23","zValue"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/scene/nodeView/ANodeView.ts"],"sourcesContent":["/**\n * Base class for views in the Anigraph MVC scheme.\n * The primary responsibility for each view subclass is to specify how a model translates into Three.js rendering calls. The view itself should hold Three.js objects and make them available to controllers for specifying interactions.\n * Views should always be initialize\n */\nimport * as THREE from \"three\";\nimport {ANodeModel} from \"../nodeModel\";\nimport {AModel, AObjectNode, AView} from \"../../base\";\nimport {AGraphicObject} from \"../../rendering\";\nimport {Mat3, Mat4, NodeTransform2D, TransformationInterface} from \"../../math\";\nimport {AObject} from \"../../base\";\nimport {AMaterial} from \"../../rendering\";\nimport {ASceneController} from \"../ASceneController\";\nimport {AObject3DModelWrapper} from \"../../geometry\";\nimport {ALoadedElement, ALoadedElementInterface} from \"../../rendering/loaded/ALoadedElement\";\n\nexport enum BASIC_VIEW_SUBSCRIPTIONS{\n    MODEL_STATE_LISTENER='VIEW_MODEL_STATE_LISTENER',\n    MODEL_RELEASE_LISTENER='VIEW_MODEL_RELEASE_LISTENER',\n    MODEL_GEOMETRY_LISTENER='VIEW_MODEL_GEOMETRY_LISTENER',\n    MODEL_PARENT_CHANGED=\"MODEL_PARENT_CHANGED\",\n    MODEL_VISIBLE=\"MODEL_VISIBLE\",\n    // MODEL_TRANSFORM_LISTENER=\"MODEL_TRANSFORM_LISTENER\"\n}\n\nexport type NodeViewCallback = (view:ANodeView, ...args: any[]) => any;\nenum ANODEVIEW_MATERIAL_EVENTS{\n    UPDATE=\"AVIEW_MATERIAL_UPDATE\",\n    CHANGE=\"AVIEW_MATERIAL_CHANGE\",\n    COLOR=\"AVIEW_MATERIAL_COLOR\"\n\n}\n\n/**\n * Base View Class\n */\nexport abstract class _ANodeView extends AView{\n    abstract init():void;\n    abstract update(...args:any[]):void;\n    // abstract updateTransform():void;\n    protected abstract _initializeThreeJSObject():void;\n\n    protected _model!:ANodeModel;\n    get model(){\n        return this._model;\n    }\n\n\n    get controller():ASceneController{return this._controller as ASceneController;}\n\n    setModelListeners(){\n        const self=this;\n        this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_RELEASE_LISTENER, false);\n        this.subscribe(this.model.addEventListener(ANodeModel.AModelEvents.RELEASE, ()=>{self.dispose()}), BASIC_VIEW_SUBSCRIPTIONS.MODEL_RELEASE_LISTENER);\n        this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_STATE_LISTENER, false);\n        this.subscribe(this.model.addStateListener(()=>{self.update()}), BASIC_VIEW_SUBSCRIPTIONS.MODEL_STATE_LISTENER);\n        this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_GEOMETRY_LISTENER, false);\n        this.subscribe(this.model.addGeometryListener(()=>{self.update()}), BASIC_VIEW_SUBSCRIPTIONS.MODEL_GEOMETRY_LISTENER);\n        // this.subscribe(this.model.addTransformListener(()=>{self.updateTransform();}))\n\n        // this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_PARENT_CHANGED, false);\n        // this.subscribe(this.model.addNewParentListener((newParent?:AModel, oldParent?:AModel)=>{\n        //     if(self.threejs.parent){\n        //         self.threejs.removeFromParent();\n        //     }\n        //     if(newParent !== undefined && newParent!==this.model) {\n        //         let newParentView = self.controller.getViewListForModel(newParent)[0];\n        //         newParentView.threejs.add(self.threejs);\n        //     }\n        // }), BASIC_VIEW_SUBSCRIPTIONS.MODEL_PARENT_CHANGED)\n\n        // this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_TRANSFORM_LISTENER, false);\n        // this.subscribe(this.model.addTransformListener((model:AObject)=>{\n        //     self.updateTransform(self.model.transform);\n        // }),\n        //     BASIC_VIEW_SUBSCRIPTIONS.MODEL_TRANSFORM_LISTENER\n        // )\n\n        this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_VISIBLE, false);\n        this.subscribe(this.model.addVisibilityListener(()=>{\n            self.threejs.visible=this.model.visible;\n        }),\n            BASIC_VIEW_SUBSCRIPTIONS.MODEL_VISIBLE);\n    }\n\n\n    setParentView(newParent?:AView){\n        if(this.threejs.parent){\n            throw new Error(\"Tried to parent view that already had parent\");\n        }\n        if(newParent !== undefined){\n            newParent.threejs.add(this.threejs);\n            // newParent._threejs.add(this.threejs);\n        }\n    }\n\n    /**\n     * The three.js object for this view. Should be a subclass of THREE.Object3D\n     * @type {THREE.Object3D}\n     */\n    _threejs!:THREE.Object3D;\n    get threejs():THREE.Object3D{\n        return this._threejs;\n    }\n\n    /**\n     * This gets called by the ASceneController in createViewForNodeModel(nodeModel: ANodeModel)\n     * @param model\n     */\n    setModel(model:ANodeModel){\n        this._model = model;\n        this._initializeThreeJSObject();\n        this._threejs.matrixAutoUpdate=false;\n        this.init();\n        this.update();\n        this.setModelListeners()\n    }\n\n    get modelID():string{\n        return this.model.uid;\n    }\n\n    abstract dispose():void;\n\n    release() {\n        this.dispose();\n        super.release();\n    }\n}\n\nexport abstract class ANodeView extends _ANodeView{\n    protected _loadedElements:{[uid:string]:ALoadedElementInterface}= {};\n    protected _initializeThreeJSObject(){\n        this._threejs = new THREE.Group() as THREE.Object3D;\n    }\n\n    static MaterialUpdates = ANODEVIEW_MATERIAL_EVENTS;\n\n    get threejs():THREE.Object3D{\n        return this._threejs as THREE.Object3D;\n    }\n\n\n\n    initLoadedObjects(){\n        const self = this;\n        for(let mname in this.model.geometry.members){\n            let m = this.model.geometry.members[mname];\n            if (m instanceof AObject3DModelWrapper){\n                let obj = new ALoadedElement(m);\n                if(this.model.material) {\n                    obj.setMaterial(this.model.material.threejs);\n                }else{\n                    obj.setMaterial(new THREE.MeshBasicMaterial())\n                }\n                this.addLoadedElement(obj);\n            }\n        }\n    }\n\n    addLoadedElement(element:ALoadedElement){\n        this.registerAndAddGraphic(element);\n        this._loadedElements[element.uid]=element;\n    }\n\n    //##################//--Graphic Objects--\\\\##################\n    //<editor-fold desc=\"Graphic Objects\">\n\n    /*\n    ToDo: should write docs for this\n     */\n    protected graphics:{[uid:string]:AGraphicObject}={};\n    registerAndAddGraphic(graphic:AGraphicObject){\n        this.registerGraphic(graphic);\n        this.add(graphic);\n    }\n\n    add(graphic:AGraphicObject){\n        this.threejs.add(graphic.threejs);\n    }\n\n    disposeGraphic(graphic:AGraphicObject){\n        this._removeGraphic(graphic);\n        graphic.dispose();\n    }\n\n    registerGraphic(graphic:AGraphicObject){\n        this.graphics[graphic.uid]=graphic;\n    }\n\n    _removeGraphic(graphic:AGraphicObject){\n        this.threejs.remove(graphic.threejs);\n        delete this.graphics[graphic.uid];\n    }\n\n    moveGraphicToBack(graphic:AGraphicObject){\n        this._removeGraphic(graphic);\n        this.registerAndAddGraphic(graphic);\n        // addGraphicToRoot(graphic);\n    }\n\n    getGraphicList(){\n        return Object.values(this.graphics);\n    }\n    mapOverGraphics(fn:(graphic:AGraphicObject)=>any[]|void){\n        return this.getGraphicList().map(fn);\n    }\n\n    disposeGraphics(){\n        let graphicKeys = Object.keys(this.graphics);\n        for(let e of graphicKeys){\n            let graphic = this.graphics[e];\n            this._removeGraphic(graphic);\n            graphic.dispose();\n        }\n    }\n\n    dispose(){\n        this.disposeGraphics();\n        this.threejs.removeFromParent();\n    }\n\n    //</editor-fold>\n    //##################\\\\--Graphic Objects--//##################\n\n    setTransform(transform:TransformationInterface){\n        (transform.getMatrix() as Mat4).assignTo(this.threejs.matrix);\n    }\n\n    // updateTransform() {\n    //     this.setTransform(this.model.transform)\n    // }\n\n    setModelListeners(){\n        super.setModelListeners();\n        this._initMaterialListener();\n    }\n\n    _initMaterialListener(){\n        const self=this;\n        this.addMaterialUpdateCallback((...args:any[])=>{\n                self.onMaterialUpdate(...args);\n            },\n            AMaterial.Events.UPDATE)\n        this.addMaterialChangeCallback(()=>{\n                self.onMaterialChange();\n            },\n            AMaterial.Events.CHANGE)\n\n        // this.addModelColorCallback((...args:any[])=>{\n        //         self.onModelColorChange();\n        //     },\n        //     \"Material Color Change\")\n    }\n\n    onMaterialUpdate(...args:any[]){\n        const self = this;\n        this.mapOverGraphics((element:AGraphicObject)=>{\n            element.onMaterialUpdate(self.model.material, ...args);\n        })\n    }\n\n    onMaterialChange(){\n        const self = this;\n        this.mapOverGraphics((element:AGraphicObject)=>{\n            element.onMaterialChange(self.model.material);\n        })\n    }\n\n    // onModelColorChange(){\n    //     const self = this;\n    //     this.mapOverGraphics((element:AGraphicObject)=>{\n    //         if('setColor' in element){\n    //             element.setColor(self.model.color);\n    //         }\n    //     })\n    // }\n\n    addMaterialUpdateCallback(callback:(self?:AObject)=>void, handle?:string){\n        const self = this;\n        this.subscribe(\n            self.model.addMaterialUpdateListener( ()=>{\n                callback();\n            }),\n            handle\n        );\n    }\n\n    addMaterialChangeCallback(callback:(self?:AObject)=>void, handle?:string){\n        const self = this;\n        this.subscribe(\n            self.model.addMaterialChangeListener( ()=>{\n                callback();\n            }),\n            handle\n        );\n    }\n\n\n\n    // addModelColorCallback(callback:(self?:AObject)=>void, handle?:string){\n    //     const self = this;\n    //     this.subscribe(\n    //         self.model.addColorListener( ()=>{\n    //             callback();\n    //         }),\n    //         handle\n    //     );\n    // }\n}\n\n\nexport abstract class ANodeView2D extends ANodeView{\n    setTransform(transform:TransformationInterface){\n        if(transform instanceof Mat3){\n            let t = transform.Mat4From2DH();\n            t.m23=this.model.zValue;\n            t.assignTo(this.threejs.matrix);\n        }else if (transform instanceof NodeTransform2D) {\n            let t = transform.getMatrix().Mat4From2DH();\n            t.m23=this.model.zValue;\n            t.assignTo(this.threejs.matrix);\n        }else{\n            (transform.getMatrix() as Mat4).assignTo(this.threejs.matrix);\n        }\n    }\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}