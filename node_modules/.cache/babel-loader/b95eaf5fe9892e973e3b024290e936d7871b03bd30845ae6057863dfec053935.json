{"ast":null,"code":"import _initializerDefineProperty from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\nvar _class, _descriptor;\nimport { AMaterial } from \"./AMaterial\";\nimport { ATexture } from \"../ATexture\";\nimport { AObjectState } from \"../../base\";\nimport * as THREE from \"three\";\nimport { Color, V2, Vec2, Vec3, Vec4 } from \"../../math\";\nimport { TextureKeyForName, TextureProvidedKeyForName, TextureSizeKeyForName } from \"../../defines\";\nimport { GetAppState } from \"../../appstate\";\nimport { GUISpecs } from \"../../GUISpecs\";\nexport let AShaderMaterial = (_class = class AShaderMaterial extends AMaterial {\n  get threejs() {\n    return this._material;\n  }\n  getUniformValue(name) {\n    let uniform = this.uniforms[name];\n    return uniform === null || uniform === void 0 ? void 0 : uniform.value;\n  }\n\n  // setModelColor(v:Color|THREE.Color){\n  //     this.setUniformColor('modelColor', v);\n  // }\n\n  setValue(name, value) {\n    let vals = {};\n    vals[name] = value;\n    this.setValues(vals);\n  }\n\n  // getModelColor(){\n  //     let c = this.getUniformValue('modelColor');\n  //     if(c){\n  //         return Color.FromThreeJS(c);\n  //     }else{\n  //         return Color.FromString(\"#77bb77\");\n  //     }\n  // }\n\n  getUniformColorValue(name) {\n    let v4 = this.getUniformValue(name);\n    return Color.FromTHREEVector4(v4);\n  }\n  get model() {\n    return this._model;\n  }\n  constructor(...args) {\n    super(...args);\n    _initializerDefineProperty(this, \"uniforms\", _descriptor, this);\n    this.textures = {};\n    this.uniforms = {};\n  }\n  setModel(model) {\n    super.setModel(model);\n    this.loadTexturesFromShaderModel(model);\n  }\n  loadTexturesFromShaderModel(model) {\n    let shader = model !== null && model !== void 0 ? model : this.model;\n    for (let t in shader.textures) {\n      this.textures[t] = shader.textures[t];\n    }\n  }\n\n  //##################//--Uniforms--\\\\##################\n  //<editor-fold desc=\"Uniforms\">\n  setUniformsDict(uniforms) {\n    this.uniforms = uniforms;\n  }\n  setUniforms(uniforms) {\n    if (!this.uniforms) {\n      this.uniforms = {};\n    }\n    for (let u in uniforms) {\n      // @ts-ignore\n      this.setUniform(u, uniforms[u].value, uniforms[u].type);\n    }\n  }\n  setTexture(name, texture) {\n    if (texture) {\n      if (texture instanceof ATexture) {\n        this.textures[name] = texture;\n      } else {\n        this.textures[name] = new ATexture(texture);\n      }\n      let tex = this.getTexture(name);\n      this.setUniform(TextureKeyForName(name), tex === null || tex === void 0 ? void 0 : tex.threejs, 't');\n      this.setUniform(TextureProvidedKeyForName(name), !!tex, 'bool');\n      this.setUniform(TextureSizeKeyForName(name), tex ? new Vec2(tex.width, tex.height) : V2());\n    } else if (texture === undefined) {\n      this.textures[name] = texture;\n      this.setUniform(TextureKeyForName(name), null, 't');\n      this.setUniform(TextureProvidedKeyForName(name), false, 'bool');\n      this.setUniform(TextureSizeKeyForName(name), new Vec2(0, 0));\n    }\n  }\n\n  /**\n   * Set the diffuse texture\n   * @param value\n   */\n  set diffuseTexture(value) {\n    this.setTexture(\"diffuse\", value);\n  }\n\n  /**\n   *\n   * @returns {ATexture | undefined}\n   */\n  get diffuseTexture() {\n    return this.getTexture(\"diffuse\");\n  }\n  getTexture(name) {\n    return this.textures[name];\n  }\n  setUniform(name, value, type) {\n    if (value instanceof Vec3) {\n      this.setUniform(name, value.asThreeJS(), 'vec3');\n      return;\n    }\n    if (value instanceof Vec4) {\n      this.setUniform(name, value.asThreeJS(), 'vec4');\n      return;\n    }\n    if (value instanceof Vec2) {\n      this.setUniform(name, new THREE.Vector2(value.x, value.y), 'vec2');\n      return;\n    }\n    if (value instanceof Color) {\n      this.setUniform(name, value.Vec4, 'vec4');\n      return;\n    }\n    // if(Array.isArray(value) && !isNaN(value[0]) && !type){\n    //     type = 'fv';\n    // }\n\n    let uval = {\n      value: value\n    };\n    if (type !== undefined) {\n      uval['type'] = type;\n    }\n    // @ts-ignore\n    this.uniforms[name] = uval;\n    if (this.threejs) {\n      // @ts-ignore\n      this.threejs.uniforms[name] = uval;\n    }\n  }\n  setUniform3fv(name, value) {\n    this.setUniform(name, value.asThreeJS(), 'vec3');\n  }\n  setUniform4fv(name, value) {\n    this.setUniform(name, value.asThreeJS(), 'vec4');\n  }\n  setUniformColor(name, value, alpha = 1) {\n    if (value instanceof THREE.Color) {\n      console.warn(\"Ambiguous when setting uniform color with three.color: do you want a vec3 or vec4? Setting with AniGraph Color is safer...\");\n      this.setUniform(name, value, 'vec4');\n    } else {\n      this.setUniform(name, value.Vec4.asThreeJS(), 'vec4');\n    }\n  }\n  CreateUniformColorControl(uniformName, defaultValue) {\n    var _defaultValue, _this$getUniformValue;\n    const self = this;\n    defaultValue = (_defaultValue = defaultValue) !== null && _defaultValue !== void 0 ? _defaultValue : Color.Green();\n    return GUISpecs.ColorControl(c => {\n      self.setUniformColor(uniformName, c);\n    }, (_this$getUniformValue = this.getUniformValue(uniformName)) !== null && _this$getUniformValue !== void 0 ? _this$getUniformValue : defaultValue);\n  }\n  CreateUniformSliderControl(uniformName, initialValue, min, max, step) {\n    const self = this;\n    this.setUniform(uniformName, initialValue);\n    return GUISpecs.SliderControl(v => {\n      self.setUniform(uniformName, v);\n    }, initialValue, min, max, step);\n  }\n  attachUniformToAppState(uniformName, stateName, onChange) {\n    var _stateName;\n    let appState = GetAppState();\n    let name = uniformName;\n    stateName = (_stateName = stateName) !== null && _stateName !== void 0 ? _stateName : uniformName;\n    const self = this;\n    onChange = onChange ? onChange : value => {\n      self.setUniform(name, value);\n    };\n    onChange(appState.getState(stateName));\n    self.subscribe(appState.addStateValueListener(stateName, value => {\n      if (onChange) {\n        onChange(value);\n      }\n    }), `${stateName}_update`);\n  }\n\n  //</editor-fold>\n  //##################\\\\--Uniforms--//##################\n\n  // initMaterial(parameters?:MaterialParameters){\n  //     let params = {uniforms:this.uniforms};\n  //     if(parameters!==undefined){\n  //         params = {...params, ...parameters};\n  //     }\n  //     // this._shaderSource.sourcesLoadedPromise;\n  //     this._material = new THREE.ShaderMaterial({\n  //             vertexShader:this.model.vertexSource,\n  //             fragmentShader:this.model.fragSource,\n  //             transparent: true,\n  //             lights:true,\n  //             ...parameters\n  //         }\n  //     )\n  // }\n\n  // async initMaterialAsync(parameters?:MaterialParameters){\n  //     const self = this;\n  //     this.model.sourcesLoadedPromise.then(()=>{self.initMaterial();});\n  // }\n}, _descriptor = _applyDecoratedDescriptor(_class.prototype, \"uniforms\", [AObjectState], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class);","map":{"version":3,"names":["AMaterial","ATexture","AObjectState","THREE","Color","V2","Vec2","Vec3","Vec4","TextureKeyForName","TextureProvidedKeyForName","TextureSizeKeyForName","GetAppState","GUISpecs","AShaderMaterial","_class","threejs","_material","getUniformValue","name","uniform","uniforms","value","setValue","vals","setValues","getUniformColorValue","v4","FromTHREEVector4","model","_model","constructor","args","_initializerDefineProperty","_descriptor","textures","setModel","loadTexturesFromShaderModel","shader","t","setUniformsDict","setUniforms","u","setUniform","type","setTexture","texture","tex","getTexture","width","height","undefined","diffuseTexture","asThreeJS","Vector2","x","y","uval","setUniform3fv","setUniform4fv","setUniformColor","alpha","console","warn","CreateUniformColorControl","uniformName","defaultValue","_defaultValue","_this$getUniformValue","self","Green","ColorControl","c","CreateUniformSliderControl","initialValue","min","max","step","SliderControl","v","attachUniformToAppState","stateName","onChange","_stateName","appState","getState","subscribe","addStateValueListener","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/rendering/material/AShaderMaterial.ts"],"sourcesContent":["import {AMaterial} from \"./AMaterial\";\nimport {ATexture} from \"../ATexture\";\nimport {AAppState, AObjectState} from \"../../base\";\nimport {AppState} from \"../../appstate/AppState\";\nimport {AShaderModel} from \"./AShaderModel\";\nimport type {ShaderUniformDict} from \"./AShaderModel\";\nimport * as THREE from \"three\";\nimport {Color, V2, Vec2, Vec3, Vec4} from \"../../math\";\nimport {TextureKeyForName, TextureProvidedKeyForName, TextureSizeKeyForName} from \"../../defines\";\nimport {GetAppState} from \"../../appstate\";\nimport {GUISpecs} from \"../../GUISpecs\";\n\nexport class AShaderMaterial extends AMaterial{\n    @AObjectState uniforms!:ShaderUniformDict;\n    get threejs():THREE.ShaderMaterial{\n        return this._material as THREE.ShaderMaterial;\n    }\n\n    getUniformValue(name:string) {\n        let uniform = this.uniforms[name];\n        return uniform?.value;\n    }\n\n    // setModelColor(v:Color|THREE.Color){\n    //     this.setUniformColor('modelColor', v);\n    // }\n\n    setValue(name:string, value:any){\n        let vals:{[name:string]:any}={};\n        vals[name]=value;\n        this.setValues(vals);\n    }\n\n\n    // getModelColor(){\n    //     let c = this.getUniformValue('modelColor');\n    //     if(c){\n    //         return Color.FromThreeJS(c);\n    //     }else{\n    //         return Color.FromString(\"#77bb77\");\n    //     }\n    // }\n\n    getUniformColorValue(name:string){\n        let v4 = this.getUniformValue(name);\n        return Color.FromTHREEVector4(v4);\n    }\n\n\n    public textures:{[name:string]:ATexture|undefined}={};\n    get model():AShaderModel{\n        return this._model as AShaderModel;\n    }\n\n    constructor(...args:any[]) {\n        super(...args);\n        this.uniforms = {};\n    }\n\n    setModel(model: AShaderModel) {\n        super.setModel(model);\n        this.loadTexturesFromShaderModel(model);\n    }\n\n\n    loadTexturesFromShaderModel(model?:AShaderModel){\n        let shader = model??this.model;\n        for(let t in shader.textures){\n            this.textures[t]=shader.textures[t];\n        }\n    }\n\n    //##################//--Uniforms--\\\\##################\n    //<editor-fold desc=\"Uniforms\">\n    setUniformsDict(uniforms:ShaderUniformDict){\n        this.uniforms = uniforms;\n    }\n\n    setUniforms(uniforms:ShaderUniformDict){\n        if(!this.uniforms){\n            this.uniforms = {};\n        }\n        for (let u in uniforms){\n            // @ts-ignore\n            this.setUniform(u, uniforms[u].value, uniforms[u].type);\n        }\n    }\n\n    setTexture(name:string, texture?:ATexture|string){\n        if(texture) {\n            if (texture instanceof ATexture) {\n                this.textures[name] = texture;\n            } else {\n                this.textures[name] = new ATexture(texture);\n            }\n            let tex = this.getTexture(name);\n            this.setUniform(TextureKeyForName(name), tex?.threejs, 't');\n            this.setUniform(TextureProvidedKeyForName(name), !!tex, 'bool');\n            this.setUniform(TextureSizeKeyForName(name), tex?new Vec2(tex.width, tex.height):V2());\n        }else if(texture===undefined){\n            this.textures[name] = texture;\n            this.setUniform(TextureKeyForName(name), null, 't');\n            this.setUniform(TextureProvidedKeyForName(name), false, 'bool');\n            this.setUniform(TextureSizeKeyForName(name), new Vec2(0,0));\n        }\n    }\n\n    /**\n     * Set the diffuse texture\n     * @param value\n     */\n    set diffuseTexture(value:ATexture|undefined){this.setTexture(\"diffuse\", value);}\n\n    /**\n     *\n     * @returns {ATexture | undefined}\n     */\n    get diffuseTexture(){return this.getTexture(\"diffuse\");}\n\n\n\n\n    getTexture(name:string){\n        return this.textures[name];\n    }\n\n    setUniform(name:string, value:any, type?:string) {\n        if(value instanceof Vec3){\n            this.setUniform(name, value.asThreeJS(), 'vec3');\n            return;\n        }\n        if(value instanceof Vec4){\n            this.setUniform(name, value.asThreeJS(), 'vec4');\n            return;\n        }\n        if(value instanceof Vec2){\n            this.setUniform(name, new THREE.Vector2(value.x, value.y), 'vec2');\n            return;\n        }\n\n        if(value instanceof Color){\n            this.setUniform(name, value.Vec4, 'vec4');\n            return;\n        }\n        // if(Array.isArray(value) && !isNaN(value[0]) && !type){\n        //     type = 'fv';\n        // }\n\n        let uval: { [name: string]: any } = {value:value};\n        if (type !== undefined) {\n            uval['type'] = type;\n        }\n        // @ts-ignore\n        this.uniforms[name] = uval;\n        if(this.threejs){\n            // @ts-ignore\n            this.threejs.uniforms[name] = uval;\n        }\n    }\n\n    setUniform3fv(name:string, value:Vec3) {\n        this.setUniform(name, value.asThreeJS(), 'vec3');\n    }\n\n    setUniform4fv(name:string, value:Vec4) {\n        this.setUniform(name, value.asThreeJS(), 'vec4');\n    }\n\n\n\n    setUniformColor(name:string, value:Color|THREE.Color, alpha:number=1){\n        if(value instanceof THREE.Color){\n            console.warn(\"Ambiguous when setting uniform color with three.color: do you want a vec3 or vec4? Setting with AniGraph Color is safer...\");\n            this.setUniform(name, value, 'vec4');\n        }else{\n            this.setUniform(name, value.Vec4.asThreeJS(), 'vec4');\n        }\n\n    }\n\n\n    CreateUniformColorControl(uniformName:string, defaultValue?:Color){\n        const self = this;\n        defaultValue=defaultValue??Color.Green();\n        return GUISpecs.ColorControl(\n            (c:Color)=>{\n                self.setUniformColor(uniformName, c);\n            },\n            this.getUniformValue(uniformName)??defaultValue\n        )\n    }\n\n    CreateUniformSliderControl(uniformName:string, initialValue:any, min:number, max:number, step?:number){\n        const self = this;\n        this.setUniform(uniformName, initialValue);\n        return GUISpecs.SliderControl(\n            (v:number)=>{\n                self.setUniform(uniformName, v);\n            },\n            initialValue,\n            min, max, step\n        )\n    }\n\n\n\n\n    attachUniformToAppState(uniformName:string, stateName?:string, onChange?:(value:any)=>void){\n        let appState = GetAppState();\n        let name = uniformName;\n        stateName = stateName??uniformName;\n        const self=this;\n\n        onChange = onChange?onChange:(value:any) =>{\n            self.setUniform(name, value);\n        }\n\n        onChange(appState.getState(stateName));\n        self.subscribe(appState.addStateValueListener(stateName, (value:any)=>{\n            if(onChange) {\n                onChange(value);\n            }\n        }), `${stateName}_update`);\n    }\n\n\n\n\n    //</editor-fold>\n    //##################\\\\--Uniforms--//##################\n\n    // initMaterial(parameters?:MaterialParameters){\n    //     let params = {uniforms:this.uniforms};\n    //     if(parameters!==undefined){\n    //         params = {...params, ...parameters};\n    //     }\n    //     // this._shaderSource.sourcesLoadedPromise;\n    //     this._material = new THREE.ShaderMaterial({\n    //             vertexShader:this.model.vertexSource,\n    //             fragmentShader:this.model.fragSource,\n    //             transparent: true,\n    //             lights:true,\n    //             ...parameters\n    //         }\n    //     )\n    // }\n\n    // async initMaterialAsync(parameters?:MaterialParameters){\n    //     const self = this;\n    //     this.model.sourcesLoadedPromise.then(()=>{self.initMaterial();});\n    // }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}