{"ast":null,"code":"import _initializerDefineProperty from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\nvar _class, _descriptor, _descriptor2;\nimport { AController, AObjectState } from \"../base\";\nimport { SceneEvents } from \"./ASceneModel\";\nimport { ASceneView } from \"./ASceneView\";\nimport { ACameraModel, ACameraView } from \"./camera\";\nimport { ANodeModel } from \"./nodeModel\";\nimport { AModelViewClassMap, AMVClassSpec } from \"../base/amvc/AModelViewClassSpec\";\nimport { Mutex } from \"async-mutex\";\nimport { Color } from \"../math\";\nexport let SceneControllerSubscriptions = /*#__PURE__*/function (SceneControllerSubscriptions) {\n  SceneControllerSubscriptions[\"ModelNodeAdded\"] = \"ModelNodeAdded\";\n  SceneControllerSubscriptions[\"ModelNodeRemoved\"] = \"ModelNodeRemoved\";\n  SceneControllerSubscriptions[\"ModelNodeReleased\"] = \"ModelNodeReleased\";\n  return SceneControllerSubscriptions;\n}({});\nexport let ASceneController = (_class = class ASceneController extends AController {\n  get isInitialized() {\n    return this._isInitialized;\n  }\n  get clearColor() {\n    return this._clearColor;\n  }\n  get tabIndex() {\n    return this._tabIndex;\n  }\n\n  // setRenderTarget(renderTarget?:RenderTargetInterface){\n  //     if(renderTarget) {\n  //         this.renderer.setRenderTarget(renderTarget.target)\n  //     }else{\n  //         this.renderer.setRenderTarget(null);\n  //     }\n  // }\n\n  get initMutex() {\n    return this._initMutex;\n  }\n  // protected _modelSubscriptionsAdded\n\n  get context() {\n    return this._renderWindow.context;\n  }\n  beforeInitInteractions(...args) {\n    //  if(this.renderWindow) {\n    //     this.onWindowResize(this.renderWindow);\n    // }\n  }\n  setClearColor(color) {\n    this._clearColor = color;\n    this.renderer.setClearColor(this.clearColor.asThreeJS());\n    this.renderer.clear();\n  }\n  async initScene() {\n    // You can set the clear color for the rendering context\n    this.renderer.setClearColor(this.clearColor.asThreeJS());\n    this.renderer.clear();\n    this.beforeInitInteractions(this.context);\n    this.initInteractions();\n  }\n  get isReadyToRender() {\n    return this.readyToRender;\n  }\n  get renderWindow() {\n    return this._renderWindow;\n  }\n  get renderer() {\n    return this.context.renderer;\n  }\n  get sceneController() {\n    return this;\n  }\n  get eventTarget() {\n    return this.context.renderer.domElement;\n  }\n  constructor(model) {\n    super();\n    _initializerDefineProperty(this, \"readyToRender\", _descriptor, this);\n    _initializerDefineProperty(this, \"_isInitialized\", _descriptor2, this);\n    this._clearColor = void 0;\n    this._renderWindow = void 0;\n    this._model = void 0;\n    this._view = void 0;\n    this._cameraView = void 0;\n    this._initMutex = void 0;\n    this._tabIndex = 0;\n    this.classMap = void 0;\n    this._clearColor = new Color(0.0, 0.0, 0.0);\n    this._initMutex = new Mutex();\n    this._isInitialized = false;\n    this.readyToRender = false;\n    this.classMap = new AModelViewClassMap();\n    this.onModelNodeAdded = this.onModelNodeAdded.bind(this);\n    this.onModelNodeRemoved = this.onModelNodeRemoved.bind(this);\n\n    // this.addModelViewSpec(ACameraModel, ACameraView);\n    this.addModelViewSpec(ACameraModel, ACameraView);\n    this.initModelViewSpecs();\n    if (model) {\n      this.setModel(model);\n    }\n  }\n  setRenderWindow(renderWindow) {\n    this._renderWindow = renderWindow;\n    this.clearAllInteractionModes();\n    // this.initInteractions();\n  }\n  async confirmInitialized() {\n    const self = this;\n    self.model.confirmInitialized().then(() => {\n      return self.initMutex.runExclusive(async () => {\n        await self.initRendering();\n        self._isInitialized = true;\n        self._clock.play();\n      });\n    });\n  }\n  async initRendering(...args) {\n    if (this.view) {\n      console.warn(\"Re-initializing scene controller that already has view. Killing view... Will try to release resources, but this has not been extensively unit tested!\");\n      this.view.disposeViews();\n    }\n    // this._renderWindow = renderWindow;\n    this._view = new ASceneView(this);\n    this.renderer.autoClear = false;\n    this.renderer.clear();\n    await this.model.confirmInitialized();\n    this._cameraView = ACameraView.Create(this.model.cameraModel);\n    this.view.threejs.add(this._cameraView.threejs);\n    await this.initScene();\n    this.addModelSubscriptions();\n    this.readyToRender = true;\n  }\n  createViewForNodeModel(nodeModel) {\n    let spec = this.classMap.getSpecForModel(nodeModel);\n    if (spec) {\n      let view = new spec.viewClass();\n      view.setController(this);\n      view.setModel(nodeModel);\n      return view;\n    } else {\n      throw new Error(`Unsure how to create view for ${nodeModel} with class ${nodeModel.constructor.name}`);\n    }\n  }\n  addModelViewSpec(modelClass, viewClass, details) {\n    this.classMap.addSpec(new AMVClassSpec(modelClass, viewClass, details));\n  }\n  setModel(model) {\n    if (this._model && this._model !== model) {\n      this._unSetModel();\n    }\n    this._model = model;\n    // this._view = new ASceneView(this);\n  }\n  addModelSubscriptions() {\n    const self = this;\n    this.subscribe(this.model.addEventListener(SceneEvents.NodeAdded, node => {\n      self.onModelNodeAdded(node);\n    }), SceneControllerSubscriptions.ModelNodeAdded);\n    // this.subscribe(this.model.addEventListener(SceneEvents.NewNodeAdded, (node: ANodeModel) => {\n    //     self.onNewModelNodeAdded(node);\n    // }), SceneControllerSubscriptions.ModelNewNodeCreated);\n    this.subscribe(this.model.addEventListener(SceneEvents.NodeRemoved, node => {\n      self.onModelNodeRemoved(node);\n    }), SceneControllerSubscriptions.ModelNodeRemoved);\n    this.subscribe(this.model.addEventListener(SceneEvents.NodeReleased, node => {\n      self.onModelNodeReleased(node);\n    }), SceneControllerSubscriptions.ModelNodeReleased);\n    this.model.mapOverDescendants(descendant => {\n      self.onModelNodeAdded(descendant);\n    });\n  }\n  _unSetModel() {\n    this.clearSubscriptions();\n    this.view.release();\n  }\n  get model() {\n    return this._model;\n  }\n  get view() {\n    return this._view;\n  }\n  get cameraModel() {\n    return this._cameraView.model;\n  }\n\n  // get clock() {\n  //     return this._clock;\n  // }\n\n  get cameraView() {\n    return this._cameraView;\n  }\n  getThreeJSCamera(cameraModel) {\n    if (cameraModel === undefined) {\n      return this.cameraView.threeJSCamera;\n    } else {\n      let camview = this.getViewListForModel(cameraModel);\n      return camview[0].threeJSCamera;\n    }\n  }\n  getThreeJSScene() {\n    return this.view.threeJSScene;\n  }\n  get modelMap() {\n    return this.model.modelMap;\n  }\n  get viewMap() {\n    return this.view.viewMap;\n  }\n  hasModel(model) {\n    return this.model.hasModel(model);\n  }\n  hasView(view) {\n    return this.view.hasView(view);\n    // return (this.model.hasModelID(view.modelID) && view.uid in this.viewMap[view.modelID]);\n  }\n  addView(view) {\n    this.view.addView(view);\n  }\n  removeView(view) {\n    this.view.removeView(view);\n  }\n  disposeViews() {\n    this.view.disposeViews();\n  }\n  getViewListForModel(model) {\n    return this.view.getViewListForModel(model);\n  }\n  onModelNodeAdded(nodeModel) {\n    let modelViewList = this.getViewListForModel(nodeModel);\n    if (modelViewList.length < 1) {\n      this._onNewModelNodeAdded(nodeModel);\n      modelViewList = this.getViewListForModel(nodeModel);\n    }\n    if (modelViewList.length > 0) {\n      if (modelViewList.length > 1) {\n        throw new Error(\"Have not implemented multiple views for a given model in one scene controller yet!\");\n      }\n      let view = modelViewList[0];\n      // let newView = this.createViewForNodeModel(nodeModel);\n      // this.view.addView(newView);\n      if (nodeModel.parent instanceof ANodeModel) {\n        let parentView = this.getViewListForModel(nodeModel.parent)[0];\n        view.setParentView(parentView);\n      } else if (nodeModel.parent === this.model) {\n        view.setParentView(this.view);\n      }\n    }\n  }\n\n  /**\n   * Creates a new view for a newly added model that does not have a view yet.\n   * @param nodeModel\n   * @private\n   */\n  _onNewModelNodeAdded(nodeModel) {\n    let newView = this.createViewForNodeModel(nodeModel);\n    this.view.addView(newView);\n  }\n  onModelNodeRemoved(nodeModel) {\n    let viewList = this.getViewListForModel(nodeModel);\n    if (viewList.length !== 1) {\n      throw new Error(`invalid number of views for node ${nodeModel}. ViewList ${viewList}`);\n    }\n    viewList[0].threejs.removeFromParent();\n  }\n  onModelNodeReleased(nodeModel) {\n    let views = this.view.getViewListForModel(nodeModel);\n    for (let v of views) {\n      v.release();\n    }\n    delete this.viewMap[nodeModel.uid];\n  }\n  onWindowResize(renderWindow) {\n    if (renderWindow && renderWindow.container !== undefined) {\n      this.renderer.setSize(renderWindow.container.clientWidth, renderWindow.container.clientHeight);\n      /**\n       * This will call `cameraModel.onCanvasResize(width, height)` unless overridden\n       */\n      this.model.onContextResize(this.context);\n      // this.cameraModel.onCanvasResize(renderWindow.container.clientWidth, renderWindow.container.clientHeight);\n    }\n  }\n}, _descriptor = _applyDecoratedDescriptor(_class.prototype, \"readyToRender\", [AObjectState], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"_isInitialized\", [AObjectState], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class);","map":{"version":3,"names":["AController","AObjectState","SceneEvents","ASceneView","ACameraModel","ACameraView","ANodeModel","AModelViewClassMap","AMVClassSpec","Mutex","Color","SceneControllerSubscriptions","ASceneController","_class","isInitialized","_isInitialized","clearColor","_clearColor","tabIndex","_tabIndex","initMutex","_initMutex","context","_renderWindow","beforeInitInteractions","args","setClearColor","color","renderer","asThreeJS","clear","initScene","initInteractions","isReadyToRender","readyToRender","renderWindow","sceneController","eventTarget","domElement","constructor","model","_initializerDefineProperty","_descriptor","_descriptor2","_model","_view","_cameraView","classMap","onModelNodeAdded","bind","onModelNodeRemoved","addModelViewSpec","initModelViewSpecs","setModel","setRenderWindow","clearAllInteractionModes","confirmInitialized","self","then","runExclusive","initRendering","_clock","play","view","console","warn","disposeViews","autoClear","Create","cameraModel","threejs","add","addModelSubscriptions","createViewForNodeModel","nodeModel","spec","getSpecForModel","viewClass","setController","Error","name","modelClass","details","addSpec","_unSetModel","subscribe","addEventListener","NodeAdded","node","ModelNodeAdded","NodeRemoved","ModelNodeRemoved","NodeReleased","onModelNodeReleased","ModelNodeReleased","mapOverDescendants","descendant","clearSubscriptions","release","cameraView","getThreeJSCamera","undefined","threeJSCamera","camview","getViewListForModel","getThreeJSScene","threeJSScene","modelMap","viewMap","hasModel","hasView","addView","removeView","modelViewList","length","_onNewModelNodeAdded","parent","parentView","setParentView","newView","viewList","removeFromParent","views","v","uid","onWindowResize","container","setSize","clientWidth","clientHeight","onContextResize","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/scene/ASceneController.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport {\n    AController,\n    AModelInterface, AObjectNode, AObjectState,\n    AView,\n    HasModelViewMap,\n    SceneControllerInterface\n} from \"../base\";\nimport {ClassInterface} from \"../basictypes\";\nimport {AGLContext, AGLRenderWindow} from \"../rendering\";\nimport {ASceneModel, SceneEvents} from \"./ASceneModel\";\nimport {ASceneView} from \"./ASceneView\";\nimport {ACameraModel, ACameraView} from \"./camera\";\nimport {ANodeModel} from \"./nodeModel\";\nimport {ANodeView} from \"./nodeView\";\nimport {AModelViewClassMap, AMVClassSpec, AMVClassSpecDetails} from \"../base/amvc/AModelViewClassSpec\";\nimport {Mutex} from \"async-mutex\";\nimport {Color, Quaternion} from \"../math\";\nimport {ALoadedModel} from \"./nodes/loaded/ALoadedModel\";\nimport {ALoadedView} from \"./nodes/loaded/ALoadedView\";\nimport {RGBATestMeshModel, RGBATestMeshView} from \"../starter/nodes\";\nimport {ATriangleMeshModel, ATriangleMeshView, UnitQuadModel, UnitQuadView} from \"./nodes\";\n\nexport enum SceneControllerSubscriptions {\n    ModelNodeAdded = \"ModelNodeAdded\",\n    // ModelNewNodeCreated=\"ModelNewNodeCreated\",\n    ModelNodeRemoved = \"ModelNodeRemoved\",\n    ModelNodeReleased = \"ModelNodeReleased\"\n}\n\nexport interface RenderTargetInterface{\n    target:THREE.WebGLRenderTarget|null\n}\n\nexport abstract class ASceneController extends AController implements HasModelViewMap, SceneControllerInterface{\n    @AObjectState protected readyToRender:boolean;\n    @AObjectState protected _isInitialized!:boolean;\n    private _clearColor!:Color;\n    _renderWindow!: AGLRenderWindow;\n    protected _model!: ASceneModel;\n    protected _view!: ASceneView;\n    protected _cameraView!: ACameraView;\n    protected _initMutex:Mutex;\n    protected _tabIndex:number=0;\n\n    get isInitialized(){\n        return this._isInitialized;\n    }\n\n    get clearColor(){return this._clearColor;}\n\n    get tabIndex(){\n        return this._tabIndex;\n    }\n\n    // setRenderTarget(renderTarget?:RenderTargetInterface){\n    //     if(renderTarget) {\n    //         this.renderer.setRenderTarget(renderTarget.target)\n    //     }else{\n    //         this.renderer.setRenderTarget(null);\n    //     }\n    // }\n\n    get initMutex(){\n        return this._initMutex;\n    }\n    // protected _modelSubscriptionsAdded\n\n    get context(){\n        return this._renderWindow.context;\n    }\n\n    classMap:AModelViewClassMap;\n\n\n    abstract initModelViewSpecs():void;\n    abstract onAnimationFrameCallback(context: AGLContext): void\n\n    beforeInitInteractions(...args:any[]){\n        //  if(this.renderWindow) {\n        //     this.onWindowResize(this.renderWindow);\n        // }\n    }\n\n    abstract initInteractions():void;\n\n\n    setClearColor(color:Color){\n        this._clearColor = color;\n        this.renderer.setClearColor(this.clearColor.asThreeJS());\n        this.renderer.clear();\n    }\n\n\n\n\n    async initScene(){\n        // You can set the clear color for the rendering context\n        this.renderer.setClearColor(this.clearColor.asThreeJS());\n        this.renderer.clear();\n        this.beforeInitInteractions(this.context);\n        this.initInteractions();\n    }\n\n    get isReadyToRender(): boolean {\n        return this.readyToRender;\n    }\n\n    get renderWindow(): AGLRenderWindow {\n        return this._renderWindow;\n    }\n\n    get renderer(): THREE.WebGLRenderer {\n        return this.context.renderer;\n    }\n\n    get sceneController(){\n        return this;\n    }\n\n    get eventTarget(): HTMLElement {\n        return this.context.renderer.domElement;\n    }\n\n    constructor(model: ASceneModel) {\n        super();\n        this._clearColor = new Color(0.0, 0.0, 0.0);\n        this._initMutex = new Mutex();\n        this._isInitialized = false;\n        this.readyToRender=false;\n        this.classMap = new AModelViewClassMap();\n        this.onModelNodeAdded = this.onModelNodeAdded.bind(this);\n        this.onModelNodeRemoved = this.onModelNodeRemoved.bind(this);\n\n        // this.addModelViewSpec(ACameraModel, ACameraView);\n        this.addModelViewSpec(ACameraModel, ACameraView);\n        this.initModelViewSpecs();\n        if (model) {\n            this.setModel(model)\n        }\n    }\n\n\n\n\n    setRenderWindow(renderWindow:AGLRenderWindow){\n        this._renderWindow = renderWindow;\n        this.clearAllInteractionModes();\n        // this.initInteractions();\n    }\n\n    async confirmInitialized(){\n        const self = this;\n        self.model.confirmInitialized().then(():Promise<void>=>{\n            return self.initMutex.runExclusive(async () => {\n                await self.initRendering();\n                self._isInitialized = true;\n                self._clock.play();\n            });\n        });\n\n    }\n\n    async initRendering(...args:[]) {\n        if(this.view){\n            console.warn(\"Re-initializing scene controller that already has view. Killing view... Will try to release resources, but this has not been extensively unit tested!\");\n            this.view.disposeViews();\n        }\n        // this._renderWindow = renderWindow;\n        this._view = new ASceneView(this);\n        this.renderer.autoClear = false;\n        this.renderer.clear()\n        await this.model.confirmInitialized();\n        this._cameraView = ACameraView.Create(this.model.cameraModel);\n        this.view.threejs.add(this._cameraView.threejs);\n        await this.initScene();\n        this.addModelSubscriptions();\n        this.readyToRender = true;\n    }\n\n    createViewForNodeModel(nodeModel: ANodeModel){\n        let spec = this.classMap.getSpecForModel(nodeModel);\n        if(spec){\n            let view = new (spec.viewClass)();\n            view.setController(this);\n            view.setModel(nodeModel);\n            return view;\n        } else{\n            throw new Error(`Unsure how to create view for ${nodeModel} with class ${nodeModel.constructor.name}`)\n        }\n    }\n\n    addModelViewSpec(modelClass:ClassInterface<ANodeModel>, viewClass:ClassInterface<ANodeView>, details?:AMVClassSpecDetails){\n        this.classMap.addSpec(new AMVClassSpec(modelClass, viewClass, details))\n    }\n\n    setModel(model: ASceneModel) {\n        if (this._model && this._model !== model) {\n            this._unSetModel();\n        }\n        this._model = model;\n        // this._view = new ASceneView(this);\n    }\n\n    protected addModelSubscriptions() {\n        const self = this;\n        this.subscribe(this.model.addEventListener(SceneEvents.NodeAdded, (node: ANodeModel) => {\n            self.onModelNodeAdded(node);\n        }), SceneControllerSubscriptions.ModelNodeAdded);\n        // this.subscribe(this.model.addEventListener(SceneEvents.NewNodeAdded, (node: ANodeModel) => {\n        //     self.onNewModelNodeAdded(node);\n        // }), SceneControllerSubscriptions.ModelNewNodeCreated);\n        this.subscribe(this.model.addEventListener(SceneEvents.NodeRemoved, (node: ANodeModel) => {\n            self.onModelNodeRemoved(node);\n        }), SceneControllerSubscriptions.ModelNodeRemoved);\n\n        this.subscribe(this.model.addEventListener(SceneEvents.NodeReleased, (node: ANodeModel) => {\n            self.onModelNodeReleased(node);\n        }), SceneControllerSubscriptions.ModelNodeReleased);\n\n        this.model.mapOverDescendants((descendant:AObjectNode)=>{\n            self.onModelNodeAdded(descendant as ANodeModel);\n        })\n\n    }\n\n    protected _unSetModel() {\n        this.clearSubscriptions();\n        this.view.release();\n    }\n\n    get model(): ASceneModel {\n        return this._model as ASceneModel;\n    }\n\n    get view(): ASceneView {\n        return this._view as ASceneView;\n    }\n\n    get cameraModel() {\n        return this._cameraView.model;\n    }\n\n    // get clock() {\n    //     return this._clock;\n    // }\n\n    get cameraView(){\n        return this._cameraView;\n    }\n\n    getThreeJSCamera(cameraModel?:ACameraModel){\n        if(cameraModel === undefined) {\n            return this.cameraView.threeJSCamera;\n        }else{\n            let camview = this.getViewListForModel(cameraModel);\n            return (camview[0] as ACameraView).threeJSCamera;\n        }\n    }\n\n    getThreeJSScene(){\n        return this.view.threeJSScene;\n    }\n\n    get modelMap() {\n        return this.model.modelMap\n    };\n\n    get viewMap() {\n        return this.view.viewMap;\n    }\n\n    hasModel(model: AModelInterface) {\n        return this.model.hasModel(model);\n    };\n\n    hasView(view: AView) {\n        return this.view.hasView(view);\n        // return (this.model.hasModelID(view.modelID) && view.uid in this.viewMap[view.modelID]);\n    }\n\n    addView(view: ANodeView) {\n        this.view.addView(view);\n    }\n\n    removeView(view: AView) {\n        this.view.removeView(view);\n    }\n\n    disposeViews() {\n        this.view.disposeViews();\n    }\n\n    getViewListForModel(model: AModelInterface) {\n        return this.view.getViewListForModel(model);\n    }\n\n    onModelNodeAdded(nodeModel: ANodeModel) {\n        let modelViewList = this.getViewListForModel(nodeModel);\n        if(modelViewList.length<1){\n            this._onNewModelNodeAdded(nodeModel);\n            modelViewList = this.getViewListForModel(nodeModel);\n        }\n        if(modelViewList.length>0) {\n            if(modelViewList.length>1){\n                throw new Error(\"Have not implemented multiple views for a given model in one scene controller yet!\")\n            }\n            let view = modelViewList[0];\n            // let newView = this.createViewForNodeModel(nodeModel);\n            // this.view.addView(newView);\n            if (nodeModel.parent instanceof ANodeModel) {\n                let parentView = this.getViewListForModel(nodeModel.parent)[0];\n                view.setParentView(parentView);\n            }else if(nodeModel.parent === this.model){\n                view.setParentView(this.view);\n            }\n        }\n    }\n\n    /**\n     * Creates a new view for a newly added model that does not have a view yet.\n     * @param nodeModel\n     * @private\n     */\n    private _onNewModelNodeAdded(nodeModel:ANodeModel){\n        let newView = this.createViewForNodeModel(nodeModel);\n        this.view.addView(newView);\n    }\n\n    onModelNodeRemoved(nodeModel: ANodeModel) {\n        let viewList = this.getViewListForModel(nodeModel);\n        if(viewList.length !== 1){\n            throw new Error(`invalid number of views for node ${nodeModel}. ViewList ${viewList}`);\n        }\n        viewList[0].threejs.removeFromParent();\n    }\n\n    onModelNodeReleased(nodeModel:ANodeModel){\n        let views = this.view.getViewListForModel(nodeModel);\n        for (let v of views) {\n            v.release();\n        }\n        delete this.viewMap[nodeModel.uid];\n    }\n\n    onWindowResize(renderWindow?: AGLRenderWindow): void {\n        if(renderWindow && renderWindow.container !== undefined) {\n            this.renderer.setSize(renderWindow.container.clientWidth, renderWindow.container.clientHeight);\n            /**\n             * This will call `cameraModel.onCanvasResize(width, height)` unless overridden\n             */\n            this.model.onContextResize(this.context);\n            // this.cameraModel.onCanvasResize(renderWindow.container.clientWidth, renderWindow.container.clientHeight);\n        }\n    }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}