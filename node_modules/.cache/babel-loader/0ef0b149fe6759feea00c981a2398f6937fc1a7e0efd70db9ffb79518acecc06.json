{"ast":null,"code":"var _dec, _class;\nimport { BoundingBox2D } from \"./BoundingBox2D\";\nimport { BoundingBox3D } from \"./BoundingBox3D\";\nimport { AObject3DModelWrapper } from \"./AObject3DModelWrapper\";\nimport * as THREE from \"three\";\nimport { Color } from \"../math\";\nimport { NodeTransform3D } from \"../math\";\nimport { AObject, ASerializable } from \"../base\";\nvar GeometrySetEnum = /*#__PURE__*/function (GeometrySetEnum) {\n  GeometrySetEnum[\"VertsElementName\"] = \"verts\";\n  return GeometrySetEnum;\n}(GeometrySetEnum || {});\nexport let AGeometrySet = (_dec = ASerializable(\"GeometrySet\"), _dec(_class = class AGeometrySet extends AObject {\n  // protected _uid: string;\n  // get uid() {\n  //   return this._uid;\n  // }\n\n  get sourceTransform() {\n    return this._sourceTransform;\n  }\n  // get sourceScale() {\n  //   // this assumes we don't use non-uniform scales...\n  //   return this._sourceTransform.scale.x;\n  // }\n  // set sourceScale(s: number) {\n  //   this.sourceTransform.scale = s;\n  //   for (let m in this.members) {\n  //     let mo = this.members[m];\n  //     if (mo instanceof AObject3DModelWrapper) {\n  //       // mo.setSourceScale(this.sourceScale);\n  //       mo.sourceTransform = this.sourceTransform;\n  //     }\n  //   }\n  // }\n\n  setSourceTransform(v) {\n    this.sourceTransform = v;\n  }\n  updateTransform() {\n    for (let m in this.members) {\n      let mo = this.members[m];\n      if (mo instanceof AObject3DModelWrapper) {\n        mo.sourceTransform = this.sourceTransform;\n      }\n    }\n  }\n  set sourceTransform(v) {\n    this._sourceTransform = v;\n    this.updateTransform();\n  }\n  getMemberList() {\n    return Object.values(this.members);\n  }\n  constructor() {\n    super();\n    this._sourceTransform = void 0;\n    this.members = {};\n    this._sourceTransform = new NodeTransform3D();\n  }\n  setMember(name, element) {\n    this.members[name] = element;\n  }\n  addMember(member) {\n    let element;\n\n    //the member might be geometry only\n    if (member instanceof THREE.BufferGeometry) {\n      let threemesh = new THREE.Mesh(member, new THREE.MeshBasicMaterial({\n        color: Color.RandomRGBA().asThreeJS(),\n        transparent: true,\n        opacity: 1,\n        side: THREE.DoubleSide,\n        depthWrite: true\n      }));\n      element = new AObject3DModelWrapper(threemesh);\n    } else if (member instanceof THREE.Object3D) {\n      element = new AObject3DModelWrapper(member);\n    } else {\n      element = member;\n    }\n    if (this.members[element.uid] !== undefined) {\n      console.error(`Geometry member with uid ${element.uid} already added!`);\n    }\n    this.members[element.uid] = element;\n  }\n\n  // getBounds2D(cameraMatrix?:Mat4){\n  //     let b = new BoundingBox2D();\n  //     for (let e in this.members){\n  //         b.boundBounds(this.members[e].getBounds2D(cameraMatrix));\n  //     }\n  //     return b;\n  // }\n\n  getBounds() {\n    let b = new BoundingBox3D();\n    for (let e in this.members) {\n      let nb = this.members[e].getBounds();\n      if (nb instanceof BoundingBox2D) {\n        nb = BoundingBox3D.FromBoundingBox2D(nb);\n      }\n      b.boundBounds(nb);\n    }\n    return b;\n  }\n  get verts() {\n    return this.members[GeometrySetEnum.VertsElementName];\n  }\n  set verts(v) {\n    // @ts-ignore\n    this.members[GeometrySetEnum.VertsElementName] = v;\n  }\n}) || _class);","map":{"version":3,"names":["BoundingBox2D","BoundingBox3D","AObject3DModelWrapper","THREE","Color","NodeTransform3D","AObject","ASerializable","GeometrySetEnum","AGeometrySet","_dec","_class","sourceTransform","_sourceTransform","setSourceTransform","v","updateTransform","m","members","mo","getMemberList","Object","values","constructor","setMember","name","element","addMember","member","BufferGeometry","threemesh","Mesh","MeshBasicMaterial","color","RandomRGBA","asThreeJS","transparent","opacity","side","DoubleSide","depthWrite","Object3D","uid","undefined","console","error","getBounds","b","e","nb","FromBoundingBox2D","boundBounds","verts","VertsElementName"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/geometry/AGeometrySet.ts"],"sourcesContent":["import { BoundingBox2D} from \"./BoundingBox2D\";\nimport { VertexArray} from \"./VertexArray\";\nimport { BoundingBox3D} from \"./BoundingBox3D\";\nimport { AObject3DModelWrapper } from \"./AObject3DModelWrapper\";\nimport * as THREE from \"three\";\nimport { Color} from \"../math\";\nimport { NodeTransform3D} from \"../math\";\nimport {HasBounds} from \"./HasBounds\";\nimport {AObject, ASerializable} from \"../base\";\nimport {TransformationInterface} from \"../math\";\n\nenum GeometrySetEnum {\n  VertsElementName = \"verts\",\n}\n\n@ASerializable(\"GeometrySet\")\nexport class AGeometrySet extends AObject implements HasBounds {\n  _sourceTransform: TransformationInterface;\n  public members: { [name: string]: HasBounds } = {};\n  // protected _uid: string;\n  // get uid() {\n  //   return this._uid;\n  // }\n\n\n\n  get sourceTransform() {\n    return this._sourceTransform;\n  }\n  // get sourceScale() {\n  //   // this assumes we don't use non-uniform scales...\n  //   return this._sourceTransform.scale.x;\n  // }\n  // set sourceScale(s: number) {\n  //   this.sourceTransform.scale = s;\n  //   for (let m in this.members) {\n  //     let mo = this.members[m];\n  //     if (mo instanceof AObject3DModelWrapper) {\n  //       // mo.setSourceScale(this.sourceScale);\n  //       mo.sourceTransform = this.sourceTransform;\n  //     }\n  //   }\n  // }\n\n  setSourceTransform(v: NodeTransform3D) {\n    this.sourceTransform = v;\n  }\n\n  updateTransform() {\n    for (let m in this.members) {\n      let mo = this.members[m];\n      if (mo instanceof AObject3DModelWrapper) {\n        mo.sourceTransform = this.sourceTransform;\n      }\n    }\n  }\n\n  set sourceTransform(v: TransformationInterface) {\n    this._sourceTransform = v;\n    this.updateTransform();\n  }\n\n  getMemberList() {\n    return Object.values(this.members);\n  }\n\n  constructor() {\n    super();\n    this._sourceTransform = new NodeTransform3D();\n  }\n\n  setMember(name: string, element: HasBounds) {\n    this.members[name] = element;\n  }\n\n  addMember(member: HasBounds | THREE.Object3D) {\n    let element: HasBounds;\n\n    //the member might be geometry only\n    if (member instanceof THREE.BufferGeometry) {\n      let threemesh = new THREE.Mesh(\n        member,\n        new THREE.MeshBasicMaterial({\n          color: Color.RandomRGBA().asThreeJS(),\n          transparent: true,\n          opacity: 1,\n          side: THREE.DoubleSide,\n          depthWrite: true,\n        })\n      );\n      element = new AObject3DModelWrapper(threemesh);\n    } else if (member instanceof THREE.Object3D) {\n      element = new AObject3DModelWrapper(member);\n    } else {\n      element = member;\n    }\n    if (this.members[element.uid] !== undefined) {\n      console.error(`Geometry member with uid ${element.uid} already added!`);\n    }\n    this.members[element.uid] = element;\n  }\n\n  // getBounds2D(cameraMatrix?:Mat4){\n  //     let b = new BoundingBox2D();\n  //     for (let e in this.members){\n  //         b.boundBounds(this.members[e].getBounds2D(cameraMatrix));\n  //     }\n  //     return b;\n  // }\n\n  getBounds() {\n    let b = new BoundingBox3D();\n    for (let e in this.members) {\n      let nb = this.members[e].getBounds();\n      if (nb instanceof BoundingBox2D) {\n        nb = BoundingBox3D.FromBoundingBox2D(nb);\n      }\n      b.boundBounds(nb);\n    }\n    return b;\n  }\n\n  get verts() {\n    return this.members[\n      GeometrySetEnum.VertsElementName\n    ] as unknown as VertexArray<any>;\n  }\n  set verts(v: VertexArray<any>) {\n    // @ts-ignore\n    this.members[GeometrySetEnum.VertsElementName] = v;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}