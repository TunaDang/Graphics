{"ast":null,"code":"import { GetAppState } from \"../../appstate\";\nimport { ASceneController } from \"../../scene/ASceneController\";\nimport { ADebugInteractionMode, ASceneInteractionMode } from \"../interactionmodes\";\nimport { ALoadedModel } from \"../../scene/nodes/loaded/ALoadedModel\";\nimport { ALoadedView } from \"../../scene/nodes/loaded/ALoadedView\";\nimport { RGBATestMeshModel, RGBATestMeshView } from \"../nodes\";\nimport { ATriangleMeshModel, ATriangleMeshView, UnitQuadModel, UnitQuadView } from \"../../scene\";\nimport { APointLightModel, APointLightView } from \"../../scene/lights\";\nimport * as THREE from \"three\";\nimport { AVisiblePointLightModel } from \"../../scene/lights/AVisiblePointLightModel\";\nimport { AVisiblePointLightView } from \"../../scene\";\nimport { Quaternion } from \"../../math\";\nimport { ARenderTarget } from \"../../rendering/multipass/ARenderTarget\";\nconst INTERACTION_MODE_APP_STATE = \"InteractionMode\";\nexport class ABasicSceneController extends ASceneController {\n  constructor(...args) {\n    super(...args);\n    //#############################//--Render Targets--\\\\#############################\n    //<editor-fold desc=\"Render Targets\">\n    this._renderTargets = [];\n    this._currentRenderTarget = null;\n  }\n  get renderTargets() {\n    return this._renderTargets;\n  }\n  get currentRenderTarget() {\n    return this._currentRenderTarget;\n  }\n  set currentRenderTarget(renderTarget) {\n    this.setCurrentRenderTarget(renderTarget == undefined ? null : renderTarget);\n  }\n  addRenderTarget(width, height) {\n    this.renderTargets.push(ARenderTarget.CreateFloatRGBATarget(width, height));\n  }\n  setCurrentRenderTarget(renderTarget) {\n    if (renderTarget !== undefined && renderTarget !== null) {\n      this.renderer.setRenderTarget(renderTarget.target);\n      this._currentRenderTarget = renderTarget;\n    } else {\n      this.renderer.setRenderTarget(null);\n    }\n  }\n\n  //</editor-fold>\n\n  //###############################################//--Defining Interaction Modes--\\\\###############################################\n  //<editor-fold desc=\"Defining Interaction Modes\">\n  _silentSetCurrentInteractionMode(name) {\n    super.setCurrentInteractionMode(name);\n  }\n  setCurrentInteractionMode(name) {\n    this._silentSetCurrentInteractionMode(name);\n    this._updateInteractionModeOptions();\n  }\n  initModelViewSpecs() {\n    // This line tells the controller that whenever a _modelclass_ is added to the model hierarchy, we should\n    // create and add a corresponding _viewclass_ and connect it to the new model\n    // this.addModelViewSpec(_modelclass_, _viewclass_);\n\n    this.addModelViewSpec(ALoadedModel, ALoadedView);\n    this.addModelViewSpec(RGBATestMeshModel, RGBATestMeshView);\n    this.addModelViewSpec(ATriangleMeshModel, ATriangleMeshView);\n    this.addModelViewSpec(UnitQuadModel, UnitQuadView);\n    this.addModelViewSpec(APointLightModel, APointLightView);\n    this.addModelViewSpec(AVisiblePointLightModel, AVisiblePointLightView);\n  }\n  initSkyBoxCubeMap(...args) {\n    let urls = [];\n    let DefaultPath = './images/cube/MilkyWay/dark-s_';\n    let DefaultFormat = '.jpg';\n    let transform;\n    let urlDict = {\n      left: \"px\",\n      right: \"nx\",\n      top: \"py\",\n      bottom: \"ny\",\n      back: \"pz\",\n      front: \"nz\"\n    };\n    if (args.length > 0) {\n      if (Array.isArray(args[0])) {\n        urls = args[0];\n      } else {\n        var _args$;\n        let path = (_args$ = args[0]) !== null && _args$ !== void 0 ? _args$ : DefaultPath;\n        let format = '.jpg';\n        if (args.length > 1) {\n          var _args$2;\n          format = (_args$2 = args[1]) !== null && _args$2 !== void 0 ? _args$2 : format;\n        }\n        if (args.length > 2) {\n          transform = args[2];\n        }\n        urls = [path + 'px' + format, path + 'nx' + format, path + 'py' + format, path + 'ny' + format, path + 'pz' + format, path + 'nz' + format];\n      }\n    } else {\n      let path = DefaultPath;\n      let format = DefaultFormat;\n      transform = Quaternion.RotationX(Math.PI * 0.5);\n      urls = [path + 'px' + format, path + 'nx' + format, path + 'py' + format, path + 'ny' + format, path + 'pz' + format, path + 'nz' + format];\n    }\n\n    /**\n     * If you want to change the skybox, you will need to provide the appropriate urls to the corresponding textures\n     * from a cube map\n     */\n    if (transform !== undefined) {\n      this.view.setBackgroundTransform(transform);\n    }\n    const reflectionCube = new THREE.CubeTextureLoader().load(urls);\n    this.getThreeJSScene().background = reflectionCube;\n  }\n  addDebugInteractionMode() {\n    let debugInteractionMode = new ADebugInteractionMode(this);\n    this.defineInteractionMode(ADebugInteractionMode.NameInGUI, debugInteractionMode);\n    this.setCurrentInteractionMode(ADebugInteractionMode.NameInGUI);\n  }\n  switchToDebugInteractionMode() {\n    if (!this._interactions.modeIsDefined(ADebugInteractionMode.NameInGUI)) {\n      this.addDebugInteractionMode();\n    } else {\n      this.setCurrentInteractionMode(ADebugInteractionMode.NameInGUI);\n    }\n  }\n  addInteractionModeAppState() {\n    const self = this;\n    this.subscribeToAppState(INTERACTION_MODE_APP_STATE, v => {\n      /**\n       * Call _setCurrentInteractionMode here, which just calls the parent version of the function.\n       * This is to avoid an infinite loop caused by calling _updateInteractionModeOptions\n       */\n      self._silentSetCurrentInteractionMode(v);\n    }, INTERACTION_MODE_APP_STATE);\n  }\n  initInteractions() {\n    this.setCurrentInteractionMode();\n    this.addInteractionModeAppState();\n    this.addDebugInteractionMode();\n  }\n  defineInteractionMode(name, mode) {\n    super.defineInteractionMode(name, mode);\n    this._updateInteractionModeOptions();\n  }\n  deleteInteractionMode(name) {\n    this._interactions.undefineMode(name);\n    this._updateInteractionModeOptions();\n  }\n  _updateInteractionModeOptions() {\n    let appState = GetAppState();\n    appState.setSelectionControl(INTERACTION_MODE_APP_STATE, this._currentInteractionModeName, this._interactions.getGUISelectableModesList());\n    appState.updateControlPanel();\n  }\n  createNewInteractionMode(name, interactionCallbacks) {\n    if (this._interactions.modes[name]) {\n      throw new Error(`Tried to create interaction mode \"${name}\", but mode with this name is already defined!`);\n    }\n    let newInteractionMode = new ASceneInteractionMode(name, this, interactionCallbacks);\n    this.defineInteractionMode(name, newInteractionMode);\n  }\n  timeUpdate() {\n    this.interactionMode.timeUpdate(this.time);\n  }\n  onAnimationFrameCallback(context) {\n    if (!this.readyToRender) {\n      return;\n    }\n\n    /**\n     * let's update the model...\n     */\n    this.model.timeUpdate();\n\n    /**\n     * and let's update the controller...\n     * Keep in mind that the model and controller run on separate clocks.\n     * This is because we don't want pausing the model clock to break all of our interactions!\n     */\n    this.timeUpdate();\n\n    // clear the rendering context\n    context.renderer.clear();\n\n    // you can also specify which buffers to clear: clear(color?: boolean, depth?: boolean, stencil?: boolean)\n    // this.renderer.clear(false, true);\n\n    // render the scene view\n    context.renderer.render(this.getThreeJSScene(), this.getThreeJSCamera());\n  }\n}","map":{"version":3,"names":["GetAppState","ASceneController","ADebugInteractionMode","ASceneInteractionMode","ALoadedModel","ALoadedView","RGBATestMeshModel","RGBATestMeshView","ATriangleMeshModel","ATriangleMeshView","UnitQuadModel","UnitQuadView","APointLightModel","APointLightView","THREE","AVisiblePointLightModel","AVisiblePointLightView","Quaternion","ARenderTarget","INTERACTION_MODE_APP_STATE","ABasicSceneController","constructor","args","_renderTargets","_currentRenderTarget","renderTargets","currentRenderTarget","renderTarget","setCurrentRenderTarget","undefined","addRenderTarget","width","height","push","CreateFloatRGBATarget","renderer","setRenderTarget","target","_silentSetCurrentInteractionMode","name","setCurrentInteractionMode","_updateInteractionModeOptions","initModelViewSpecs","addModelViewSpec","initSkyBoxCubeMap","urls","DefaultPath","DefaultFormat","transform","urlDict","left","right","top","bottom","back","front","length","Array","isArray","_args$","path","format","_args$2","RotationX","Math","PI","view","setBackgroundTransform","reflectionCube","CubeTextureLoader","load","getThreeJSScene","background","addDebugInteractionMode","debugInteractionMode","defineInteractionMode","NameInGUI","switchToDebugInteractionMode","_interactions","modeIsDefined","addInteractionModeAppState","self","subscribeToAppState","v","initInteractions","mode","deleteInteractionMode","undefineMode","appState","setSelectionControl","_currentInteractionModeName","getGUISelectableModesList","updateControlPanel","createNewInteractionMode","interactionCallbacks","modes","Error","newInteractionMode","timeUpdate","interactionMode","time","onAnimationFrameCallback","context","readyToRender","model","clear","render","getThreeJSCamera"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/starter/scene/ABasicSceneController.ts"],"sourcesContent":["import {HasInteractionModeCallbacks} from \"../../interaction\";\nimport {GetAppState} from \"../../appstate\";\nimport {AInteractionMode} from \"../../interaction\";\nimport {ASceneController, RenderTargetInterface} from \"../../scene/ASceneController\";\nimport {ADebugInteractionMode, ASceneInteractionMode} from \"../interactionmodes\";\nimport {AGLContext} from \"../../rendering\";\nimport {ALoadedModel} from \"../../scene/nodes/loaded/ALoadedModel\";\nimport {ALoadedView} from \"../../scene/nodes/loaded/ALoadedView\";\nimport {RGBATestMeshModel, RGBATestMeshView} from \"../nodes\";\nimport {ANodeModel3D, ANodeView, ATriangleMeshModel, ATriangleMeshView, UnitQuadModel, UnitQuadView} from \"../../scene\";\nimport {APointLightModel, APointLightView} from \"../../scene/lights\";\nimport * as THREE from \"three\";\nimport {AVisiblePointLightModel} from \"../../scene/lights/AVisiblePointLightModel\";\nimport { AVisiblePointLightView} from \"../../scene\";\nimport {Mat3, Quaternion} from \"../../math\";\nimport {ARenderTarget} from \"../../rendering/multipass/ARenderTarget\";\nconst INTERACTION_MODE_APP_STATE = \"InteractionMode\";\n\nexport abstract class ABasicSceneController extends ASceneController {\n    //#############################//--Render Targets--\\\\#############################\n    //<editor-fold desc=\"Render Targets\">\n    _renderTargets:ARenderTarget[]=[];\n    get renderTargets(){\n        return this._renderTargets;\n    }\n\n    _currentRenderTarget:ARenderTarget|null=null;\n    get currentRenderTarget(){\n        return this._currentRenderTarget;\n    }\n    set currentRenderTarget(renderTarget:ARenderTarget|null){\n        this.setCurrentRenderTarget((renderTarget==undefined)?null:renderTarget);\n    }\n\n    addRenderTarget(width:number, height:number){\n        this.renderTargets.push(ARenderTarget.CreateFloatRGBATarget(width, height));\n    }\n\n    setCurrentRenderTarget(renderTarget?:ARenderTarget|null){\n        if(renderTarget !== undefined && renderTarget !== null) {\n            this.renderer.setRenderTarget(renderTarget.target)\n            this._currentRenderTarget=renderTarget;\n        }else{\n            this.renderer.setRenderTarget(null);\n        }\n    }\n\n\n\n    //</editor-fold>\n\n\n    //###############################################//--Defining Interaction Modes--\\\\###############################################\n    //<editor-fold desc=\"Defining Interaction Modes\">\n    _silentSetCurrentInteractionMode(name?:string){\n        super.setCurrentInteractionMode(name);\n    }\n\n    setCurrentInteractionMode(name?: string) {\n        this._silentSetCurrentInteractionMode(name)\n        this._updateInteractionModeOptions();\n    }\n\n    initModelViewSpecs() {\n        // This line tells the controller that whenever a _modelclass_ is added to the model hierarchy, we should\n        // create and add a corresponding _viewclass_ and connect it to the new model\n        // this.addModelViewSpec(_modelclass_, _viewclass_);\n\n        this.addModelViewSpec(ALoadedModel, ALoadedView);\n        this.addModelViewSpec(RGBATestMeshModel, RGBATestMeshView);\n        this.addModelViewSpec(ATriangleMeshModel, ATriangleMeshView);\n        this.addModelViewSpec(UnitQuadModel, UnitQuadView);\n        this.addModelViewSpec(APointLightModel, APointLightView);\n        this.addModelViewSpec(AVisiblePointLightModel, AVisiblePointLightView);\n    }\n\n    initSkyBoxCubeMap(path?:string, format?:string, transform?:Mat3, ...args:any[]):void;\n    initSkyBoxCubeMap(uls?:string[], transform?:Quaternion, ...args:any[]):void;\n    initSkyBoxCubeMap(...args:any[]){\n        let urls=[];\n        let DefaultPath = './images/cube/MilkyWay/dark-s_';\n        let DefaultFormat = '.jpg';\n        let transform:Quaternion|undefined;\n        let urlDict = {\n            left:\"px\",\n            right:\"nx\",\n            top:\"py\",\n            bottom:\"ny\",\n            back:\"pz\",\n            front:\"nz\"\n        }\n\n        if(args.length>0){\n            if(Array.isArray(args[0])){\n                urls = args[0];\n            }else{\n                let path = args[0]??DefaultPath;\n                let format = '.jpg';\n                if(args.length>1){\n                    format = args[1]??format;\n                }\n                if(args.length>2){\n                    transform = args[2];\n                }\n                urls = [\n                    path + 'px' + format,\n                    path + 'nx' + format,\n                    path + 'py' + format,\n                    path + 'ny' + format,\n                    path + 'pz' + format,\n                    path + 'nz' + format\n                ];\n\n            }\n        }else {\n            let path = DefaultPath;\n            let format = DefaultFormat;\n            transform = Quaternion.RotationX(Math.PI*0.5);\n            urls = [\n                path + 'px' + format,\n                path + 'nx' + format,\n                path + 'py' + format,\n                path + 'ny' + format,\n                path + 'pz' + format,\n                path + 'nz' + format\n            ];\n        }\n\n        /**\n         * If you want to change the skybox, you will need to provide the appropriate urls to the corresponding textures\n         * from a cube map\n         */\n        if(transform!==undefined) {\n            this.view.setBackgroundTransform(transform);\n        }\n        const reflectionCube = new THREE.CubeTextureLoader().load( urls );\n        this.getThreeJSScene().background = reflectionCube;\n    }\n\n    addDebugInteractionMode(){\n        let debugInteractionMode = new ADebugInteractionMode(this);\n        this.defineInteractionMode(ADebugInteractionMode.NameInGUI, debugInteractionMode);\n        this.setCurrentInteractionMode(ADebugInteractionMode.NameInGUI);\n    }\n\n    switchToDebugInteractionMode(){\n        if(!this._interactions.modeIsDefined(ADebugInteractionMode.NameInGUI)){\n            this.addDebugInteractionMode();\n        }else{\n            this.setCurrentInteractionMode(ADebugInteractionMode.NameInGUI);\n        }\n\n    }\n\n\n    addInteractionModeAppState(){\n        const self = this;\n        this.subscribeToAppState(INTERACTION_MODE_APP_STATE, (v:string)=>{\n            /**\n             * Call _setCurrentInteractionMode here, which just calls the parent version of the function.\n             * This is to avoid an infinite loop caused by calling _updateInteractionModeOptions\n             */\n            self._silentSetCurrentInteractionMode(v);\n        }, INTERACTION_MODE_APP_STATE)\n    }\n\n    initInteractions(){\n        this.setCurrentInteractionMode();\n        this.addInteractionModeAppState();\n        this.addDebugInteractionMode();\n    }\n\n    defineInteractionMode(name: string, mode?: AInteractionMode) {\n        super.defineInteractionMode(name, mode);\n        this._updateInteractionModeOptions();\n    }\n\n    deleteInteractionMode(name: string){\n        this._interactions.undefineMode(name);\n        this._updateInteractionModeOptions();\n    }\n\n    _updateInteractionModeOptions(){\n        let appState = GetAppState();\n        appState.setSelectionControl(\n            INTERACTION_MODE_APP_STATE,\n            this._currentInteractionModeName,\n            this._interactions.getGUISelectableModesList()\n        )\n        appState.updateControlPanel();\n    }\n\n    createNewInteractionMode(\n        name:string,\n        interactionCallbacks?:HasInteractionModeCallbacks\n    ){\n        if(this._interactions.modes[name]){\n            throw new Error(`Tried to create interaction mode \"${name}\", but mode with this name is already defined!`)\n        }\n        let newInteractionMode = new ASceneInteractionMode(name, this, interactionCallbacks);\n        this.defineInteractionMode(name, newInteractionMode);\n    }\n\n\n    timeUpdate(){\n        this.interactionMode.timeUpdate(this.time);\n    }\n\n\n    onAnimationFrameCallback(context:AGLContext) {\n        if(!this.readyToRender){\n            return;\n        }\n\n        /**\n         * let's update the model...\n         */\n        this.model.timeUpdate();\n\n        /**\n         * and let's update the controller...\n         * Keep in mind that the model and controller run on separate clocks.\n         * This is because we don't want pausing the model clock to break all of our interactions!\n         */\n        this.timeUpdate();\n\n\n        // clear the rendering context\n        context.renderer.clear();\n\n        // you can also specify which buffers to clear: clear(color?: boolean, depth?: boolean, stencil?: boolean)\n        // this.renderer.clear(false, true);\n\n        // render the scene view\n        context.renderer.render(this.getThreeJSScene(), this.getThreeJSCamera());\n    }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}