{"ast":null,"code":"import * as THREE from \"three\";\nimport { AView } from \"../base\";\nexport class ASceneView extends AView {\n  get controller() {\n    return this._controller;\n  }\n  get model() {\n    return this.controller.model;\n  }\n  get modelID() {\n    return this.model.uid;\n  }\n  get viewMap() {\n    return this._viewMap;\n  }\n  get threeJSScene() {\n    return this._threeJSScene;\n  }\n  get threejs() {\n    return this._threejs;\n  }\n  constructor(controller) {\n    super();\n    this._viewMap = {};\n    this._controller = void 0;\n    this._threeJSScene = void 0;\n    this._threejs = void 0;\n    this._controller = controller;\n    this._threeJSScene = new THREE.Scene();\n    this._threejs = new THREE.Group();\n    this._threejs.matrixAutoUpdate = false;\n    this._threeJSScene.add(this.threejs);\n  }\n  hasModel(model) {\n    return model.uid in this.viewMap;\n    // return this.controller.hasModel(model);\n  }\n  hasView(view) {\n    return view.uid in this.viewMap[view.modelID];\n  }\n  addView(view) {\n    if (this.viewMap[view.modelID] === undefined) {\n      this.viewMap[view.modelID] = {};\n    }\n    this.viewMap[view.modelID][view.uid] = view;\n    // if(view.model.parent === this.model){\n    //     this.threejs.add(view._threejs);\n    // }\n    //\n  }\n  removeView(view) {\n    this.threejs.remove(view._threejs);\n    delete this.viewMap[view.modelID][view.uid];\n  }\n  releaseView(view) {\n    this.threejs.remove(view._threejs);\n    this.viewMap[view.modelID][view.uid].disposeGraphics();\n    delete this.viewMap[view.modelID][view.uid];\n  }\n  setBackgroundTexture(texture) {\n    this._threeJSScene.background = texture.threejs;\n  }\n  setBackgroundTransform(transform) {\n    this._threeJSScene.rotation.setFromQuaternion(transform);\n    this.threejs.rotation.setFromQuaternion(transform.getInverse());\n    this._threeJSScene.matrixWorldNeedsUpdate = true;\n    this.threejs.matrixWorldNeedsUpdate = true;\n  }\n  getViewListForModel(model) {\n    if (this.hasModel(model)) {\n      return Object.values(this.viewMap[model.uid]);\n    } else {\n      return [];\n    }\n  }\n  _getViewListForModelID(modelID) {\n    return Object.values(this.viewMap[modelID]);\n  }\n  disposeViews() {\n    for (let modelID in this.viewMap) {\n      let viewList = this._getViewListForModelID(modelID);\n      for (let v of viewList) {\n        this.releaseView(v);\n      }\n    }\n    for (let modelID in this.viewMap) {\n      delete this.viewMap[modelID];\n    }\n  }\n\n  /**\n   * This should release all of the graphics resources!\n   */\n  release() {\n    this.disposeViews();\n    super.release();\n  }\n}","map":{"version":3,"names":["THREE","AView","ASceneView","controller","_controller","model","modelID","uid","viewMap","_viewMap","threeJSScene","_threeJSScene","threejs","_threejs","constructor","Scene","Group","matrixAutoUpdate","add","hasModel","hasView","view","addView","undefined","removeView","remove","releaseView","disposeGraphics","setBackgroundTexture","texture","background","setBackgroundTransform","transform","rotation","setFromQuaternion","getInverse","matrixWorldNeedsUpdate","getViewListForModel","Object","values","_getViewListForModelID","disposeViews","viewList","v","release"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/scene/ASceneView.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport {AModelInterface, AView, HasModelViewMap, MVMViewMap} from \"../base\";\nimport {ASceneController} from \"./ASceneController\";\nimport {ANodeView} from \"./nodeView\";\nimport {ATexture} from \"../rendering\";\nimport {Quaternion} from \"../math\";\n\n\nexport class ASceneView extends AView implements HasModelViewMap {\n    protected _viewMap: MVMViewMap = {};\n    protected _controller!:ASceneController;\n    protected _threeJSScene!:THREE.Scene;\n    get controller(){return this._controller;}\n    get model(){return this.controller.model;}\n    get modelID(){return this.model.uid;}\n    get viewMap(){return this._viewMap;}\n    _threejs!:THREE.Object3D;\n\n    get threeJSScene(){\n        return this._threeJSScene;\n    }\n\n    get threejs():THREE.Group{\n        return this._threejs as THREE.Group;\n    }\n\n    constructor(controller:ASceneController) {\n        super();\n        this._controller = controller;\n        this._threeJSScene = new THREE.Scene();\n        this._threejs = new THREE.Group();\n        this._threejs.matrixAutoUpdate=false;\n        this._threeJSScene.add(this.threejs);\n    }\n\n    hasModel(model:AModelInterface){\n        return (model.uid in this.viewMap);\n        // return this.controller.hasModel(model);\n    };\n    hasView(view:AView){\n        return (view.uid in this.viewMap[view.modelID]);\n    }\n    addView(view:ANodeView){\n        if(this.viewMap[view.modelID]===undefined){\n            this.viewMap[view.modelID]={};\n        }\n        this.viewMap[view.modelID][view.uid]=view;\n        // if(view.model.parent === this.model){\n        //     this.threejs.add(view._threejs);\n        // }\n        //\n    }\n    removeView(view:AView){\n        this.threejs.remove(view._threejs);\n        delete this.viewMap[view.modelID][view.uid];\n    }\n\n    releaseView(view:AView){\n        this.threejs.remove(view._threejs);\n        this.viewMap[view.modelID][view.uid].disposeGraphics();\n        delete this.viewMap[view.modelID][view.uid];\n\n    }\n\n\n    setBackgroundTexture(texture:ATexture){\n        this._threeJSScene.background = texture.threejs\n    }\n\n    setBackgroundTransform(transform:Quaternion){\n        this._threeJSScene.rotation.setFromQuaternion(transform);\n        this.threejs.rotation.setFromQuaternion(transform.getInverse());\n        this._threeJSScene.matrixWorldNeedsUpdate=true;\n        this.threejs.matrixWorldNeedsUpdate=true;\n    }\n\n    getViewListForModel(model:AModelInterface):ANodeView[]{\n        if(this.hasModel(model)) {\n            return Object.values(this.viewMap[model.uid]);\n        }\n        else{\n            return [];\n        }\n    }\n\n    _getViewListForModelID(modelID:string):ANodeView[]{\n        return Object.values(this.viewMap[modelID]);\n    }\n\n\n    disposeViews(){\n        for (let modelID in this.viewMap){\n            let viewList = this._getViewListForModelID(modelID);\n            for(let v of viewList) {\n                this.releaseView(v);\n            }\n        }\n        for(let modelID in this.viewMap){\n            delete this.viewMap[modelID];\n        }\n    }\n\n    /**\n     * This should release all of the graphics resources!\n     */\n    release(){\n        this.disposeViews();\n        super.release();\n    }\n\n}\n\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAyBC,KAAK,QAAoC,SAAS;AAO3E,OAAO,MAAMC,UAAU,SAASD,KAAK,CAA4B;EAI7D,IAAIE,UAAUA,CAAA,EAAE;IAAC,OAAO,IAAI,CAACC,WAAW;EAAC;EACzC,IAAIC,KAAKA,CAAA,EAAE;IAAC,OAAO,IAAI,CAACF,UAAU,CAACE,KAAK;EAAC;EACzC,IAAIC,OAAOA,CAAA,EAAE;IAAC,OAAO,IAAI,CAACD,KAAK,CAACE,GAAG;EAAC;EACpC,IAAIC,OAAOA,CAAA,EAAE;IAAC,OAAO,IAAI,CAACC,QAAQ;EAAC;EAGnC,IAAIC,YAAYA,CAAA,EAAE;IACd,OAAO,IAAI,CAACC,aAAa;EAC7B;EAEA,IAAIC,OAAOA,CAAA,EAAc;IACrB,OAAO,IAAI,CAACC,QAAQ;EACxB;EAEAC,WAAWA,CAACX,UAA2B,EAAE;IACrC,KAAK,CAAC,CAAC;IAAC,KAlBFM,QAAQ,GAAe,CAAC,CAAC;IAAA,KACzBL,WAAW;IAAA,KACXO,aAAa;IAAA,KAKvBE,QAAQ;IAYJ,IAAI,CAACT,WAAW,GAAGD,UAAU;IAC7B,IAAI,CAACQ,aAAa,GAAG,IAAIX,KAAK,CAACe,KAAK,CAAC,CAAC;IACtC,IAAI,CAACF,QAAQ,GAAG,IAAIb,KAAK,CAACgB,KAAK,CAAC,CAAC;IACjC,IAAI,CAACH,QAAQ,CAACI,gBAAgB,GAAC,KAAK;IACpC,IAAI,CAACN,aAAa,CAACO,GAAG,CAAC,IAAI,CAACN,OAAO,CAAC;EACxC;EAEAO,QAAQA,CAACd,KAAqB,EAAC;IAC3B,OAAQA,KAAK,CAACE,GAAG,IAAI,IAAI,CAACC,OAAO;IACjC;EACJ;EACAY,OAAOA,CAACC,IAAU,EAAC;IACf,OAAQA,IAAI,CAACd,GAAG,IAAI,IAAI,CAACC,OAAO,CAACa,IAAI,CAACf,OAAO,CAAC;EAClD;EACAgB,OAAOA,CAACD,IAAc,EAAC;IACnB,IAAG,IAAI,CAACb,OAAO,CAACa,IAAI,CAACf,OAAO,CAAC,KAAGiB,SAAS,EAAC;MACtC,IAAI,CAACf,OAAO,CAACa,IAAI,CAACf,OAAO,CAAC,GAAC,CAAC,CAAC;IACjC;IACA,IAAI,CAACE,OAAO,CAACa,IAAI,CAACf,OAAO,CAAC,CAACe,IAAI,CAACd,GAAG,CAAC,GAACc,IAAI;IACzC;IACA;IACA;IACA;EACJ;EACAG,UAAUA,CAACH,IAAU,EAAC;IAClB,IAAI,CAACT,OAAO,CAACa,MAAM,CAACJ,IAAI,CAACR,QAAQ,CAAC;IAClC,OAAO,IAAI,CAACL,OAAO,CAACa,IAAI,CAACf,OAAO,CAAC,CAACe,IAAI,CAACd,GAAG,CAAC;EAC/C;EAEAmB,WAAWA,CAACL,IAAU,EAAC;IACnB,IAAI,CAACT,OAAO,CAACa,MAAM,CAACJ,IAAI,CAACR,QAAQ,CAAC;IAClC,IAAI,CAACL,OAAO,CAACa,IAAI,CAACf,OAAO,CAAC,CAACe,IAAI,CAACd,GAAG,CAAC,CAACoB,eAAe,CAAC,CAAC;IACtD,OAAO,IAAI,CAACnB,OAAO,CAACa,IAAI,CAACf,OAAO,CAAC,CAACe,IAAI,CAACd,GAAG,CAAC;EAE/C;EAGAqB,oBAAoBA,CAACC,OAAgB,EAAC;IAClC,IAAI,CAAClB,aAAa,CAACmB,UAAU,GAAGD,OAAO,CAACjB,OAAO;EACnD;EAEAmB,sBAAsBA,CAACC,SAAoB,EAAC;IACxC,IAAI,CAACrB,aAAa,CAACsB,QAAQ,CAACC,iBAAiB,CAACF,SAAS,CAAC;IACxD,IAAI,CAACpB,OAAO,CAACqB,QAAQ,CAACC,iBAAiB,CAACF,SAAS,CAACG,UAAU,CAAC,CAAC,CAAC;IAC/D,IAAI,CAACxB,aAAa,CAACyB,sBAAsB,GAAC,IAAI;IAC9C,IAAI,CAACxB,OAAO,CAACwB,sBAAsB,GAAC,IAAI;EAC5C;EAEAC,mBAAmBA,CAAChC,KAAqB,EAAa;IAClD,IAAG,IAAI,CAACc,QAAQ,CAACd,KAAK,CAAC,EAAE;MACrB,OAAOiC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC/B,OAAO,CAACH,KAAK,CAACE,GAAG,CAAC,CAAC;IACjD,CAAC,MACG;MACA,OAAO,EAAE;IACb;EACJ;EAEAiC,sBAAsBA,CAAClC,OAAc,EAAa;IAC9C,OAAOgC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC/B,OAAO,CAACF,OAAO,CAAC,CAAC;EAC/C;EAGAmC,YAAYA,CAAA,EAAE;IACV,KAAK,IAAInC,OAAO,IAAI,IAAI,CAACE,OAAO,EAAC;MAC7B,IAAIkC,QAAQ,GAAG,IAAI,CAACF,sBAAsB,CAAClC,OAAO,CAAC;MACnD,KAAI,IAAIqC,CAAC,IAAID,QAAQ,EAAE;QACnB,IAAI,CAAChB,WAAW,CAACiB,CAAC,CAAC;MACvB;IACJ;IACA,KAAI,IAAIrC,OAAO,IAAI,IAAI,CAACE,OAAO,EAAC;MAC5B,OAAO,IAAI,CAACA,OAAO,CAACF,OAAO,CAAC;IAChC;EACJ;;EAEA;AACJ;AACA;EACIsC,OAAOA,CAAA,EAAE;IACL,IAAI,CAACH,YAAY,CAAC,CAAC;IACnB,KAAK,CAACG,OAAO,CAAC,CAAC;EACnB;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}