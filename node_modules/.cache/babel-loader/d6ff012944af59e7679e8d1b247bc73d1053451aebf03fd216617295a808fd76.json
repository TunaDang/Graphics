{"ast":null,"code":"var _dec, _class;\nimport { AGraphicElement } from \"../graphicobject\";\nimport * as THREE from \"three\";\nimport { ASerializable } from \"../../base\";\nexport let ATriangleMeshGraphic = (_dec = ASerializable(\"ATriangleMeshGraphic\"), _dec(_class = class ATriangleMeshGraphic extends AGraphicElement {\n  constructor(...args) {\n    super(...args);\n    this.verts = void 0;\n  }\n  get mesh() {\n    return this._element;\n  }\n\n  // static CreateMeshGraphic(geometry?:THREE.BufferGeometry|VertexArray<any>,\n  //                   material?:Color|THREE.Color|THREE.Material|THREE.Material[],\n  //                   ...args:any[]){\n  //     return new this(geometry, material, ...args);\n  // }\n\n  initGeometry(verts) {\n    if (!this._geometry) {\n      if (verts) {\n        this.verts = verts;\n      }\n      this.setGeometry(this.verts);\n    } else {\n      throw new Error(\"Tried to re-init geometry in ATriangleMeshElements\");\n    }\n  }\n  _createDefaultMaterial() {\n    return new THREE.MeshBasicMaterial({\n      color: 0x22aa22,\n      transparent: true,\n      side: THREE.DoubleSide,\n      opacity: 1.0\n    });\n  }\n  setVerts(verts) {\n    this.verts = verts;\n    // console.log({ indices: this.verts.indices });\n    this.setGeometry(this.verts);\n  }\n  setVerts2D(verts) {\n    this.verts = verts;\n    // console.log({ indices: this.verts.indices });\n    this._setGeometry2D(verts);\n  }\n}) || _class);","map":{"version":3,"names":["AGraphicElement","THREE","ASerializable","ATriangleMeshGraphic","_dec","_class","constructor","args","verts","mesh","_element","initGeometry","_geometry","setGeometry","Error","_createDefaultMaterial","MeshBasicMaterial","color","transparent","side","DoubleSide","opacity","setVerts","setVerts2D","_setGeometry2D"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/rendering/graphicelements/ATriangleMeshGraphic.ts"],"sourcesContent":["import {AGraphicElement} from \"../graphicobject\";\nimport * as THREE from \"three\";\nimport {VertexArray2D, VertexArray3D} from \"../../geometry\";\nimport {ASerializable} from \"../../base\";\n\n@ASerializable(\"ATriangleMeshGraphic\")\nexport class ATriangleMeshGraphic extends AGraphicElement{\n    protected verts!:VertexArray3D|VertexArray2D;\n\n    get mesh(){\n        return this._element;\n    }\n\n    // static CreateMeshGraphic(geometry?:THREE.BufferGeometry|VertexArray<any>,\n    //                   material?:Color|THREE.Color|THREE.Material|THREE.Material[],\n    //                   ...args:any[]){\n    //     return new this(geometry, material, ...args);\n    // }\n\n    initGeometry(verts?:VertexArray3D){\n        if(!this._geometry){\n            if(verts){\n                this.verts = verts;\n            }\n            this.setGeometry(this.verts);\n        }else{\n            throw new Error(\"Tried to re-init geometry in ATriangleMeshElements\");\n        }\n    }\n\n    _createDefaultMaterial(){\n        return new THREE.MeshBasicMaterial({\n            color: 0x22aa22,\n            transparent: true,\n            side: THREE.DoubleSide,\n            opacity: 1.0,\n        });\n    }\n\n    setVerts(verts:VertexArray3D){\n        this.verts = verts;\n        // console.log({ indices: this.verts.indices });\n        this.setGeometry(this.verts);\n    }\n\n    setVerts2D(verts:VertexArray2D){\n        this.verts = verts;\n        // console.log({ indices: this.verts.indices });\n        this._setGeometry2D(verts);\n    }\n\n}\n"],"mappings":";AAAA,SAAQA,eAAe,QAAO,kBAAkB;AAChD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,SAAQC,aAAa,QAAO,YAAY;AAExC,WACaC,oBAAoB,IAAAC,IAAA,GADhCF,aAAa,CAAC,sBAAsB,CAAC,EAAAE,IAAA,CAAAC,MAAA,GAAtC,MACaF,oBAAoB,SAASH,eAAe;EAAAM,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAC3CC,KAAK;EAAA;EAEf,IAAIC,IAAIA,CAAA,EAAE;IACN,OAAO,IAAI,CAACC,QAAQ;EACxB;;EAEA;EACA;EACA;EACA;EACA;;EAEAC,YAAYA,CAACH,KAAoB,EAAC;IAC9B,IAAG,CAAC,IAAI,CAACI,SAAS,EAAC;MACf,IAAGJ,KAAK,EAAC;QACL,IAAI,CAACA,KAAK,GAAGA,KAAK;MACtB;MACA,IAAI,CAACK,WAAW,CAAC,IAAI,CAACL,KAAK,CAAC;IAChC,CAAC,MAAI;MACD,MAAM,IAAIM,KAAK,CAAC,oDAAoD,CAAC;IACzE;EACJ;EAEAC,sBAAsBA,CAAA,EAAE;IACpB,OAAO,IAAId,KAAK,CAACe,iBAAiB,CAAC;MAC/BC,KAAK,EAAE,QAAQ;MACfC,WAAW,EAAE,IAAI;MACjBC,IAAI,EAAElB,KAAK,CAACmB,UAAU;MACtBC,OAAO,EAAE;IACb,CAAC,CAAC;EACN;EAEAC,QAAQA,CAACd,KAAmB,EAAC;IACzB,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB;IACA,IAAI,CAACK,WAAW,CAAC,IAAI,CAACL,KAAK,CAAC;EAChC;EAEAe,UAAUA,CAACf,KAAmB,EAAC;IAC3B,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB;IACA,IAAI,CAACgB,cAAc,CAAChB,KAAK,CAAC;EAC9B;AAEJ,CAAC,KAAAH,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}