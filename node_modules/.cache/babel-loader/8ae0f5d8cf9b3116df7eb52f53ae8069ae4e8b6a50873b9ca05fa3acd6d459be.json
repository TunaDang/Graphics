{"ast":null,"code":"import _initializerDefineProperty from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\nvar _class, _descriptor, _descriptor2, _dec, _class2, _class3, _descriptor3;\nimport * as THREE from \"three\";\nimport { ASerializable } from \"../../base/aserial\";\nimport { AObject, AObjectState } from \"../../base/aobject\";\nexport let ShaderManagerEnums = /*#__PURE__*/function (ShaderManagerEnums) {\n  ShaderManagerEnums[\"SHADER_DIRECTORY_URL\"] = \"shaders/\";\n  ShaderManagerEnums[\"DEFAULT_SHADER\"] = \"basic\";\n  return ShaderManagerEnums;\n}({});\nexport let AShaderProgramSource = (_class = class AShaderProgramSource extends AObject {\n  constructor(name, vertexURL, fragURL) {\n    super();\n    this.name = void 0;\n    this.vertexURL = void 0;\n    this.fragURL = void 0;\n    _initializerDefineProperty(this, \"vertexSource\", _descriptor, this);\n    _initializerDefineProperty(this, \"fragSource\", _descriptor2, this);\n    this.sourcesLoadedPromise = void 0;\n    this.name = name;\n    this.vertexURL = vertexURL;\n    this.fragURL = fragURL;\n    const self = this;\n    async function loadSources() {\n      self.vertexSource = await AShaderProgramSource.LoadShaderFile(vertexURL);\n      self.fragSource = await AShaderProgramSource.LoadShaderFile(fragURL);\n      return self;\n    }\n    ;\n    this.sourcesLoadedPromise = loadSources();\n    // this.sourcesLoadedPromise = new Promise(function (myResolve, myReject){\n    //     self.vertexSource = (ShaderProgramSource.LoadShaderFile(vertexURL)) as string;\n    //     self.fragSource = (ShaderProgramSource.LoadShaderFile(fragURL)) as string;\n    //     myResolve();\n    // });\n    // this.sourcesLoadedPromise = loadSources();\n  }\n  static LoadShaderFile(sourceURL) {\n    let shaderLoader = new THREE.FileLoader();\n    let shaderSource = shaderLoader.loadAsync(sourceURL, function (xhr) {\n      console.log(xhr.loaded / xhr.total * 100 + '% loaded');\n    });\n    return shaderSource;\n  }\n}, _descriptor = _applyDecoratedDescriptor(_class.prototype, \"vertexSource\", [AObjectState], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"fragSource\", [AObjectState], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class);\nlet AShaderSourceManager = (_dec = ASerializable(\"ShaderSourceManager\"), _dec(_class2 = (_class3 = class AShaderSourceManager extends AObject {\n  constructor() {\n    super();\n    _initializerDefineProperty(this, \"_shaderSources\", _descriptor3, this);\n    this._shaderPromises = {};\n    this._shaderSources = {};\n  }\n  static GetURLForShaderAtPath(path) {\n    return ShaderManagerEnums.SHADER_DIRECTORY_URL + path;\n  }\n  LoadShader(name, vertexPath, fragPath) {\n    let vPath = vertexPath !== null && vertexPath !== void 0 ? vertexPath : `${name}/${name}.vert.glsl`;\n    let fPath = fragPath !== null && fragPath !== void 0 ? fragPath : `${name}/${name}.frag.glsl`;\n    const self = this;\n    // this._shaderPromises[name]=new Promise<AShaderProgramSource>(function(myResolve, myReject){\n    //     let newSource =\n    //         new AShaderProgramSource(\n    //             name,\n    //             AShaderSourceManager.GetURLForShaderAtPath(vPath),\n    //             AShaderSourceManager.GetURLForShaderAtPath(fPath)\n    //         );\n    //     newSource.sourcesLoadedPromise.then(\n    //         function(value){\n    //             self._shaderSources[name]=value;\n    //         }\n    //     );\n    //     self._shaderSources[name]=newSource;\n    //     myResolve(newSource);\n    // })\n\n    let newSource = new AShaderProgramSource(name, AShaderSourceManager.GetURLForShaderAtPath(vPath), AShaderSourceManager.GetURLForShaderAtPath(fPath));\n    self._shaderSources[name] = newSource;\n    self._shaderPromises[name] = newSource.sourcesLoadedPromise;\n    return this._shaderPromises[name];\n    // assert(this._shaderSources[name] === undefined, `Tried to re-load shader ${name} with V:${vertexPath} F:${fragPath}`);\n  }\n  GetShaderSource(name) {\n    return this._shaderSources[name];\n  }\n}, _descriptor3 = _applyDecoratedDescriptor(_class3.prototype, \"_shaderSources\", [AObjectState], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class3)) || _class2);\nexport const ShaderManager = new AShaderSourceManager();\n// ShaderManager.LoadShader('standard', 'standard/standard.vert.glsl', 'standard/standard.frag.glsl');\n// ShaderManager.LoadShader('textured2D', 'textured2D/textured2D.vert.glsl', 'textured2D/textured2D.frag.glsl');\n// ShaderManager.LoadShader('rgba', 'rgba/rgba.vert.glsl', 'rgba/rgba.frag.glsl');\n// ShaderManager.LoadShader('simple');\n\n// export {ShaderManager};","map":{"version":3,"names":["THREE","ASerializable","AObject","AObjectState","ShaderManagerEnums","AShaderProgramSource","_class","constructor","name","vertexURL","fragURL","_initializerDefineProperty","_descriptor","_descriptor2","sourcesLoadedPromise","self","loadSources","vertexSource","LoadShaderFile","fragSource","sourceURL","shaderLoader","FileLoader","shaderSource","loadAsync","xhr","console","log","loaded","total","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer","AShaderSourceManager","_dec","_class2","_class3","_descriptor3","_shaderPromises","_shaderSources","GetURLForShaderAtPath","path","SHADER_DIRECTORY_URL","LoadShader","vertexPath","fragPath","vPath","fPath","newSource","GetShaderSource","ShaderManager"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/rendering/material/ShaderManager.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport {ASerializable} from \"../../base/aserial\";\nimport {AObject, AObjectState} from \"../../base/aobject\";\n\nexport enum ShaderManagerEnums{\n    SHADER_DIRECTORY_URL='shaders/',\n    DEFAULT_SHADER='basic'\n}\n\n\nexport class AShaderProgramSource extends AObject{\n    public name: string;\n    public vertexURL: string;\n    public fragURL: string;\n    @AObjectState vertexSource!: string;\n    @AObjectState fragSource!: string;\n    public sourcesLoadedPromise:Promise<this>;\n\n    constructor(name: string, vertexURL: string, fragURL: string) {\n        super();\n        this.name = name;\n        this.vertexURL = vertexURL;\n        this.fragURL = fragURL;\n        const self = this;\n        async function loadSources(){\n            self.vertexSource = (await AShaderProgramSource.LoadShaderFile(vertexURL)) as string;\n            self.fragSource = (await AShaderProgramSource.LoadShaderFile(fragURL)) as string;\n            return self;\n        };\n        this.sourcesLoadedPromise = loadSources();\n        // this.sourcesLoadedPromise = new Promise(function (myResolve, myReject){\n        //     self.vertexSource = (ShaderProgramSource.LoadShaderFile(vertexURL)) as string;\n        //     self.fragSource = (ShaderProgramSource.LoadShaderFile(fragURL)) as string;\n        //     myResolve();\n        // });\n        // this.sourcesLoadedPromise = loadSources();\n    }\n\n    static LoadShaderFile(sourceURL: string) {\n        let shaderLoader = new THREE.FileLoader();\n        let shaderSource = shaderLoader.loadAsync(\n            sourceURL,\n            function (xhr) {\n                console.log((xhr.loaded / xhr.total * 100) + '% loaded');\n            });\n        return shaderSource;\n    }\n}\n\nexport type ShaderPromise = Promise<AShaderProgramSource>;\n\n@ASerializable(\"ShaderSourceManager\")\nclass AShaderSourceManager extends AObject{\n    @AObjectState _shaderSources!:{[name:string]:AShaderProgramSource}\n    _shaderPromises:{[name:string]:Promise<AShaderProgramSource>}={};\n    constructor() {\n        super();\n        this._shaderSources={};\n    }\n\n    static GetURLForShaderAtPath(path:string){\n        return ShaderManagerEnums.SHADER_DIRECTORY_URL+path;\n    }\n\n    LoadShader(name:string, vertexPath?:string, fragPath?:string):ShaderPromise{\n        let vPath = vertexPath??`${name}/${name}.vert.glsl`\n        let fPath = fragPath??`${name}/${name}.frag.glsl`\n        const self=this;\n        // this._shaderPromises[name]=new Promise<AShaderProgramSource>(function(myResolve, myReject){\n        //     let newSource =\n        //         new AShaderProgramSource(\n        //             name,\n        //             AShaderSourceManager.GetURLForShaderAtPath(vPath),\n        //             AShaderSourceManager.GetURLForShaderAtPath(fPath)\n        //         );\n        //     newSource.sourcesLoadedPromise.then(\n        //         function(value){\n        //             self._shaderSources[name]=value;\n        //         }\n        //     );\n        //     self._shaderSources[name]=newSource;\n        //     myResolve(newSource);\n        // })\n\n        let newSource =\n            new AShaderProgramSource(\n                name,\n                AShaderSourceManager.GetURLForShaderAtPath(vPath),\n                AShaderSourceManager.GetURLForShaderAtPath(fPath)\n            );\n        self._shaderSources[name]=newSource;\n        self._shaderPromises[name]=newSource.sourcesLoadedPromise;\n        return this._shaderPromises[name];\n        // assert(this._shaderSources[name] === undefined, `Tried to re-load shader ${name} with V:${vertexPath} F:${fragPath}`);\n    }\n\n    GetShaderSource(name:string){\n        return this._shaderSources[name];\n    }\n}\n\n\nexport const ShaderManager = new AShaderSourceManager();\n// ShaderManager.LoadShader('standard', 'standard/standard.vert.glsl', 'standard/standard.frag.glsl');\n// ShaderManager.LoadShader('textured2D', 'textured2D/textured2D.vert.glsl', 'textured2D/textured2D.frag.glsl');\n// ShaderManager.LoadShader('rgba', 'rgba/rgba.vert.glsl', 'rgba/rgba.frag.glsl');\n// ShaderManager.LoadShader('simple');\n\n\n// export {ShaderManager};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}