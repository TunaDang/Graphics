{"ast":null,"code":"// import objectHash from \"object-hash\";\n// const SerializableClassNameKey: string = \"ASerializableClassName\";\n\n// function GetSerializableHash(obj:any){\n//     return objectHash(obj);\n// }\n\nconst ASerializableClassesDict = {};\n// const ASerializableRefMap:{[name:string]:ASerializableClass}\n\nexport function GETSERIALIZABLES() {\n  return ASerializableClassesDict;\n}\n_c = GETSERIALIZABLES;\nexport function CHECKSERIALIZABLES() {\n  console.log(GETSERIALIZABLES());\n  let serializables = GETSERIALIZABLES();\n  console.log(serializables);\n}\n\n/**\n * Serializable classes must either be able to safely call new() with no parameters (for assignment to serialized version)\n * or implement toJSON():serialized_form and static fromJSON(data:serialized_form), the latter of which returns a new instance\n * of the class.\n * @param constructorFunction\n * @constructor\n */\n_c2 = CHECKSERIALIZABLES;\nexport function ASerializable(serializationName) {\n  return function (constructorFunction) {\n    // console.log(`-- decorator function invoked -- for ${constructorFunction.name}`);\n\n    // @ts-ignore\n    constructorFunction._serializationLabel = serializationName;\n    let classname = serializationName ? serializationName : constructorFunction.name;\n    let counter = 0;\n    let cfunc = constructorFunction;\n    while (classname === \"\" && counter < 10) {\n      // @ts-ignore\n      cfunc = cfunc.__proto__;\n      classname = cfunc.name;\n      counter = counter + 1;\n      if (counter === 10) {\n        throw new Error(`trying to make class serializable with >10 decorators??? ${constructorFunction}`);\n      }\n    }\n    let incrementCounter = 1;\n    while (classname in ASerializableClassesDict) {\n      classname = constructorFunction.name + incrementCounter.toString();\n      incrementCounter = incrementCounter + 1;\n    }\n    // @ts-ignore\n    constructorFunction.ASerializationClassID = classname;\n    ASerializableClassesDict[classname] = constructorFunction;\n  };\n}\n_c3 = ASerializable;\nexport function ASerializableToJSON(obj) {\n  return JSON.stringify(obj, function (key, value) {\n    if (this[key] && typeof this[key] === \"object\" && this[key].constructor.ASerializationClassID !== undefined) {\n      return {\n        _aserial_class_id: this[key].constructor.ASerializationClassID,\n        data: value\n      };\n    } else {\n      return value;\n    }\n  }, \" \");\n}\n_c4 = ASerializableToJSON;\nfunction ReviveASerializable(key, value) {\n  if (typeof value !== \"object\" || value === null) {\n    return value; // Return the value if not an object\n  }\n  if (value && value._aserial_class_id) {\n    var ASClass = ASerializableClassesDict[value._aserial_class_id];\n    if (typeof ASClass.fromJSON === \"function\") {\n      return ASClass.fromJSON(value.data);\n    } else {\n      return Object.assign(new ASClass(), value.data);\n    }\n  } else {\n    return value;\n  }\n}\n_c5 = ReviveASerializable;\nexport function ASerializableFromJSON(jsonText) {\n  let obj = JSON.parse(jsonText, (key, value) => {\n    return ReviveASerializable(key, value);\n  });\n  return obj;\n}\n\n//##################//--Recursive index copy circular--\\\\##################\n//<editor-fold desc=\"Recursive intdex copy\">\n// export function GetIndexedCopyRecursive(obj:anym, ref_map?:{[uid:string]:any}){\n//     let ohash_map = ref_map? ref_map:{};\n//     //##################//--recursive function--\\\\##################\n//     //<editor-fold desc=\"recursive function\">\n//     const deepIndexedCopy = (inObject:any) => {\n//         if (typeof inObject !== \"object\" || inObject === null) {\n//             return inObject; // Return the value if inObject is not an object\n//         }\n//\n//         let outObject:any;\n//         let value:any;\n//         let key:any;\n//         if(inObject.constructor.ASerializationClassID!==undefined){\n//             let ohash = (inObject._ASerializationID!==undefined && typeof inObject._ASerializationID === 'function')?inObject._ASerializationID():GetSerializableHash(inObject);\n//             if(ohash_map[ohash]===undefined){\n//                 var data:any;\n//                 if(typeof inObject.ASerialize === 'function'){\n//                     // If there is a derived serialize function, use it\n//                     data = inObject.ASerialize(ohash_map);\n//                 }else{\n//                     // otherwise, just return a dictionary of deepIndexCopy values for each key\n//                     data = {};\n//                     for(let key in inObject){\n//                         data[key]=deepIndexedCopy(inObject[key]);\n//                     }\n//                 }\n//                 ohash_map[ohash]={\n//                     _aserial_class_id: inObject.constructor.ASerializationClassID,\n//                     data: data\n//                 };\n//             }\n//             return {\n//                 _SERIALIZABLE_REF: ohash\n//             };\n//         }\n//\n//         // Create an array or object to hold the values\n//         outObject = Array.isArray(inObject) ? [] : {}\n//         for (key in inObject) {\n//             value = inObject[key]\n//             // Recursively (deep) copy for nested objects, including arrays\n//             outObject[key] = deepIndexedCopy(value);\n//         }\n//         return outObject\n//     }\n//     //</editor-fold>\n//     //##################\\\\--recursive function--//##################\n//\n//     return deepIndexedCopy(obj);\n//\n//     // return Object.assign(\n//     //     Object.create(\n//     //         // Set the prototype of the new object to the prototype of the instance.\n//     //         // Used to allow new object behave like class instance.\n//     //         Object.getPrototypeOf(obj),\n//     //     ),\n//     //     // Prevent shallow copies of nested structures like arrays, etc\n//     //     deepIndexedCopy(obj)\n//     // );\n// }\n//</editor-fold>\n//##################\\\\--Recursive index copy circular--//##################\n_c6 = ASerializableFromJSON;\nexport function GetIndexedCopy(obj) {\n  //##################//--recursive function--\\\\##################\n  //<editor-fold desc=\"recursive function\">\n  const deepIndexedCopy = inObject => {\n    if (typeof inObject !== \"object\" || inObject === null) {\n      return inObject; // Return the value if inObject is not an object\n    }\n    let outObject;\n    let value;\n    let key;\n    if (inObject.constructor.ASerializationClassID !== undefined) {\n      if (typeof inObject.ASerialize === \"function\") {\n        return {\n          _aserial_class_id: inObject.constructor.ASerializationClassID,\n          data: inObject.ASerialize()\n        };\n      } else {\n        return {\n          _aserial_class_id: inObject.constructor.ASerializationClassID,\n          data: inObject\n        };\n      }\n    }\n    // Create an array or object to hold the values\n    outObject = Array.isArray(inObject) ? [] : {};\n    for (key in inObject) {\n      value = inObject[key];\n      // Recursively (deep) copy for nested objects, including arrays\n      outObject[key] = deepIndexedCopy(value);\n    }\n    return outObject;\n  };\n  return deepIndexedCopy(obj);\n}\n_c7 = GetIndexedCopy;\nexport function GetASerializableClassByName(className) {\n  return ASerializableClassesDict[className];\n}\n_c8 = GetASerializableClassByName;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n$RefreshReg$(_c, \"GETSERIALIZABLES\");\n$RefreshReg$(_c2, \"CHECKSERIALIZABLES\");\n$RefreshReg$(_c3, \"ASerializable\");\n$RefreshReg$(_c4, \"ASerializableToJSON\");\n$RefreshReg$(_c5, \"ReviveASerializable\");\n$RefreshReg$(_c6, \"ASerializableFromJSON\");\n$RefreshReg$(_c7, \"GetIndexedCopy\");\n$RefreshReg$(_c8, \"GetASerializableClassByName\");","map":{"version":3,"names":["ASerializableClassesDict","GETSERIALIZABLES","_c","CHECKSERIALIZABLES","console","log","serializables","_c2","ASerializable","serializationName","constructorFunction","_serializationLabel","classname","name","counter","cfunc","__proto__","Error","incrementCounter","toString","ASerializationClassID","_c3","ASerializableToJSON","obj","JSON","stringify","key","value","constructor","undefined","_aserial_class_id","data","_c4","ReviveASerializable","ASClass","fromJSON","Object","assign","_c5","ASerializableFromJSON","jsonText","parse","_c6","GetIndexedCopy","deepIndexedCopy","inObject","outObject","ASerialize","Array","isArray","_c7","GetASerializableClassByName","className","_c8","$RefreshReg$"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/base/aserial/ASerializable.ts"],"sourcesContent":["// import objectHash from \"object-hash\";\n// const SerializableClassNameKey: string = \"ASerializableClassName\";\n\n// function GetSerializableHash(obj:any){\n//     return objectHash(obj);\n// }\n\nconst ASerializableClassesDict: { [name: string]: any } = {};\nexport interface ASerializableClass {\n  // ASerialize():{[name:string]:any};\n  // ADeserialize(d:{[name:string]:any},recurse_func:(...args:any[])=>any):ASerializableClass;\n}\n// const ASerializableRefMap:{[name:string]:ASerializableClass}\n\nexport function GETSERIALIZABLES() {\n  return ASerializableClassesDict;\n}\n\nexport function CHECKSERIALIZABLES() {\n  console.log(GETSERIALIZABLES());\n  let serializables = GETSERIALIZABLES();\n  console.log(serializables);\n}\n\n/**\n * Serializable classes must either be able to safely call new() with no parameters (for assignment to serialized version)\n * or implement toJSON():serialized_form and static fromJSON(data:serialized_form), the latter of which returns a new instance\n * of the class.\n * @param constructorFunction\n * @constructor\n */\n\nexport function ASerializable(serializationName?: string) {\n  return function (constructorFunction: Function) {\n    // console.log(`-- decorator function invoked -- for ${constructorFunction.name}`);\n\n    // @ts-ignore\n    constructorFunction._serializationLabel = serializationName;\n\n    let classname = serializationName\n      ? serializationName\n      : constructorFunction.name;\n    let counter = 0;\n    let cfunc = constructorFunction;\n    while (classname === \"\" && counter < 10) {\n      // @ts-ignore\n      cfunc = cfunc.__proto__;\n      classname = cfunc.name;\n      counter = counter + 1;\n      if (counter === 10) {\n        throw new Error(\n          `trying to make class serializable with >10 decorators??? ${constructorFunction}`\n        );\n      }\n    }\n    let incrementCounter = 1;\n    while (classname in ASerializableClassesDict) {\n      classname = constructorFunction.name + incrementCounter.toString();\n      incrementCounter = incrementCounter + 1;\n    }\n    // @ts-ignore\n    constructorFunction.ASerializationClassID = classname;\n    ASerializableClassesDict[classname] = constructorFunction;\n  };\n}\n\nexport function ASerializableToJSON(obj: any) {\n  return JSON.stringify(\n    obj,\n    function (key, value) {\n      if (\n        this[key] &&\n        typeof this[key] === \"object\" &&\n        this[key].constructor.ASerializationClassID !== undefined\n      ) {\n        return {\n          _aserial_class_id: this[key].constructor.ASerializationClassID,\n          data: value,\n        };\n      } else {\n        return value;\n      }\n    },\n    \" \"\n  );\n}\n\nfunction ReviveASerializable(key: string, value: any) {\n  if (typeof value !== \"object\" || value === null) {\n    return value; // Return the value if not an object\n  }\n  if (value && value._aserial_class_id) {\n    var ASClass: any = ASerializableClassesDict[value._aserial_class_id];\n    if (typeof ASClass.fromJSON === \"function\") {\n      return ASClass.fromJSON(value.data);\n    } else {\n      return Object.assign(new ASClass(), value.data);\n    }\n  } else {\n    return value;\n  }\n}\n\nexport function ASerializableFromJSON(jsonText: string) {\n  let obj = JSON.parse(jsonText, (key, value) => {\n    return ReviveASerializable(key, value);\n  });\n  return obj;\n}\n\n//##################//--Recursive index copy circular--\\\\##################\n//<editor-fold desc=\"Recursive intdex copy\">\n// export function GetIndexedCopyRecursive(obj:anym, ref_map?:{[uid:string]:any}){\n//     let ohash_map = ref_map? ref_map:{};\n//     //##################//--recursive function--\\\\##################\n//     //<editor-fold desc=\"recursive function\">\n//     const deepIndexedCopy = (inObject:any) => {\n//         if (typeof inObject !== \"object\" || inObject === null) {\n//             return inObject; // Return the value if inObject is not an object\n//         }\n//\n//         let outObject:any;\n//         let value:any;\n//         let key:any;\n//         if(inObject.constructor.ASerializationClassID!==undefined){\n//             let ohash = (inObject._ASerializationID!==undefined && typeof inObject._ASerializationID === 'function')?inObject._ASerializationID():GetSerializableHash(inObject);\n//             if(ohash_map[ohash]===undefined){\n//                 var data:any;\n//                 if(typeof inObject.ASerialize === 'function'){\n//                     // If there is a derived serialize function, use it\n//                     data = inObject.ASerialize(ohash_map);\n//                 }else{\n//                     // otherwise, just return a dictionary of deepIndexCopy values for each key\n//                     data = {};\n//                     for(let key in inObject){\n//                         data[key]=deepIndexedCopy(inObject[key]);\n//                     }\n//                 }\n//                 ohash_map[ohash]={\n//                     _aserial_class_id: inObject.constructor.ASerializationClassID,\n//                     data: data\n//                 };\n//             }\n//             return {\n//                 _SERIALIZABLE_REF: ohash\n//             };\n//         }\n//\n//         // Create an array or object to hold the values\n//         outObject = Array.isArray(inObject) ? [] : {}\n//         for (key in inObject) {\n//             value = inObject[key]\n//             // Recursively (deep) copy for nested objects, including arrays\n//             outObject[key] = deepIndexedCopy(value);\n//         }\n//         return outObject\n//     }\n//     //</editor-fold>\n//     //##################\\\\--recursive function--//##################\n//\n//     return deepIndexedCopy(obj);\n//\n//     // return Object.assign(\n//     //     Object.create(\n//     //         // Set the prototype of the new object to the prototype of the instance.\n//     //         // Used to allow new object behave like class instance.\n//     //         Object.getPrototypeOf(obj),\n//     //     ),\n//     //     // Prevent shallow copies of nested structures like arrays, etc\n//     //     deepIndexedCopy(obj)\n//     // );\n// }\n//</editor-fold>\n//##################\\\\--Recursive index copy circular--//##################\n\nexport function GetIndexedCopy(obj: any) {\n  //##################//--recursive function--\\\\##################\n  //<editor-fold desc=\"recursive function\">\n  const deepIndexedCopy = (inObject: any) => {\n    if (typeof inObject !== \"object\" || inObject === null) {\n      return inObject; // Return the value if inObject is not an object\n    }\n\n    let outObject: any;\n    let value: any;\n    let key: any;\n    if (inObject.constructor.ASerializationClassID !== undefined) {\n      if (typeof inObject.ASerialize === \"function\") {\n        return {\n          _aserial_class_id: inObject.constructor.ASerializationClassID,\n          data: inObject.ASerialize(),\n        };\n      } else {\n        return {\n          _aserial_class_id: inObject.constructor.ASerializationClassID,\n          data: inObject,\n        };\n      }\n    }\n    // Create an array or object to hold the values\n    outObject = Array.isArray(inObject) ? [] : {};\n    for (key in inObject) {\n      value = inObject[key];\n      // Recursively (deep) copy for nested objects, including arrays\n      outObject[key] = deepIndexedCopy(value);\n    }\n    return outObject;\n  };\n  return deepIndexedCopy(obj);\n}\n\nexport function GetASerializableClassByName(className: string) {\n  return ASerializableClassesDict[className];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}