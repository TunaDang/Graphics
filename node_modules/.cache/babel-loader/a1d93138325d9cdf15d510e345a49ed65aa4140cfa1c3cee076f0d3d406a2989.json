{"ast":null,"code":"import { Mat4 } from \"../math\";\nvar ATTRIBUTE_NAMES = /*#__PURE__*/function (ATTRIBUTE_NAMES) {\n  ATTRIBUTE_NAMES[\"COLOR\"] = \"color\";\n  ATTRIBUTE_NAMES[\"NORMAL\"] = \"normal\";\n  ATTRIBUTE_NAMES[\"POSITION\"] = \"position\";\n  ATTRIBUTE_NAMES[\"UV\"] = \"uv\";\n  ATTRIBUTE_NAMES[\"INDEX\"] = \"index\";\n  return ATTRIBUTE_NAMES;\n}(ATTRIBUTE_NAMES || {});\nexport class VertexArray {\n  constructor() {\n    this.attributes = {};\n    this.indices = void 0;\n    this._uid = \"\";\n  }\n  /** Get set position */\n  set position(value) {\n    this.attributes[VertexArray.AttributeNames.POSITION] = value;\n  }\n  get position() {\n    return this.attributes[VertexArray.AttributeNames.POSITION];\n  }\n  get hasPosition() {\n    return this.hasAttribute(VertexArray.AttributeNames.POSITION);\n  }\n  hasAttribute(name) {\n    return this.attributes[name] !== undefined;\n  }\n\n  /** Get set normal */\n  set normal(value) {\n    this.attributes[VertexArray.AttributeNames.NORMAL] = value;\n  }\n  get normal() {\n    return this.attributes[VertexArray.AttributeNames.NORMAL];\n  }\n  get hasNormal() {\n    return this.hasAttribute(VertexArray.AttributeNames.NORMAL);\n  }\n\n  // /** Get set color */\n  set color(value) {\n    this.attributes[VertexArray.AttributeNames.COLOR] = value;\n  }\n  get color() {\n    return this.attributes[VertexArray.AttributeNames.COLOR];\n  }\n  get hasColor() {\n    return this.hasAttribute(VertexArray.AttributeNames.COLOR);\n  }\n\n  /** Get set uv */\n  set uv(value) {\n    this.attributes[VertexArray.AttributeNames.UV] = value;\n  }\n  get uv() {\n    return this.attributes[VertexArray.AttributeNames.UV];\n  }\n  get hasUV() {\n    return this.hasAttribute(VertexArray.AttributeNames.UV);\n  }\n  getAttributeArray(name) {\n    return this.attributes[name];\n  }\n  ApplyMatrix(m) {\n    this.position.ApplyMatrix(m);\n    if (this.normal) {\n      var _m4$getInverse;\n      let m4 = m instanceof Mat4 ? m : Mat4.From2DMat3(m);\n      let mnorm = (_m4$getInverse = m4.getInverse()) === null || _m4$getInverse === void 0 ? void 0 : _m4$getInverse.getTranspose();\n      if (!mnorm) {\n        throw new Error(`tried to apply singular matrix to normals...`);\n      }\n      this.normal.ApplyMatrix(mnorm);\n    }\n  }\n  GetTransformedBy(m) {\n    let rval = this.clone();\n    rval.ApplyMatrix(m);\n    return rval;\n  }\n  get uid() {\n    return this._uid;\n  }\n\n  /**\n   * Returns the number of vertices\n   * @returns {number}\n   */\n  get nVerts() {\n    return this.position.nVerts;\n  }\n  clone() {\n    let cfunc = this.constructor;\n    let clone = new cfunc();\n    for (let atr in this.attributes) {\n      clone.attributes[atr] = this.attributes[atr].clone();\n    }\n    if (this.indices) {\n      clone.indices = this.indices.clone();\n    }\n    return clone;\n  }\n  toJSON() {\n    var rval = {};\n    for (let k in this) {\n      // @ts-ignore\n      rval[k] = this[k];\n    }\n    return rval;\n  }\n}\nVertexArray.AttributeNames = ATTRIBUTE_NAMES;","map":{"version":3,"names":["Mat4","ATTRIBUTE_NAMES","VertexArray","constructor","attributes","indices","_uid","position","value","AttributeNames","POSITION","hasPosition","hasAttribute","name","undefined","normal","NORMAL","hasNormal","color","COLOR","hasColor","uv","UV","hasUV","getAttributeArray","ApplyMatrix","m","_m4$getInverse","m4","From2DMat3","mnorm","getInverse","getTranspose","Error","GetTransformedBy","rval","clone","uid","nVerts","cfunc","atr","toJSON","k"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/geometry/VertexArray.ts"],"sourcesContent":["import {\n  VertexAttributeArray,\n  VertexAttributeArray2D,\n  VertexAttributeArray3D,\n  VertexAttributeArray4D,\n  VertexPositionArray2DH,\n} from \"./VertexAttributeArray\";\nimport {VectorBase, Mat3, Mat4} from \"../math\";\nimport { HasBounds} from \"./HasBounds\";\nimport { BoundingBox3D } from \"./BoundingBox3D\";\nimport { VertexIndexArray } from \"./VertexIndexArray\";\n\nenum ATTRIBUTE_NAMES{\n  // COLOR=\"color\",\n  COLOR=\"color\",\n  NORMAL=\"normal\",\n  POSITION=\"position\",\n  UV=\"uv\",\n  INDEX=\"index\"\n}\n\nexport abstract class VertexArray<VType extends VectorBase> implements HasBounds {\n  static AttributeNames = ATTRIBUTE_NAMES;\n  public attributes: { [name: string]: VertexAttributeArray<any> } = {};\n  public indices!: VertexIndexArray;\n\n  /** Get set position */\n  set position(\n    value:\n      | VertexPositionArray2DH\n      | VertexAttributeArray3D\n      | VertexAttributeArray4D\n  ) {\n    this.attributes[VertexArray.AttributeNames.POSITION] = value;\n  }\n  get position() {\n    return this.attributes[VertexArray.AttributeNames.POSITION] as\n      | VertexPositionArray2DH\n      | VertexAttributeArray3D\n      | VertexAttributeArray4D;\n  }\n\n  get hasPosition(){\n    return this.hasAttribute(VertexArray.AttributeNames.POSITION);\n  }\n\n  hasAttribute(name:string){\n    return (this.attributes[name] !== undefined);\n  }\n\n\n  /** Get set normal */\n  set normal(value: VertexAttributeArray3D) {\n    this.attributes[VertexArray.AttributeNames.NORMAL] = value;\n  }\n\n  get normal() {\n    return this.attributes[VertexArray.AttributeNames.NORMAL] as VertexAttributeArray3D;\n  }\n\n  get hasNormal(){\n    return this.hasAttribute(VertexArray.AttributeNames.NORMAL);\n  }\n\n\n\n  // /** Get set color */\n  set color(value: VertexAttributeArray<any>) {\n    this.attributes[VertexArray.AttributeNames.COLOR] = value;\n  }\n  get color() {\n    return this.attributes[VertexArray.AttributeNames.COLOR];\n  }\n\n  get hasColor(){\n    return this.hasAttribute(VertexArray.AttributeNames.COLOR);\n  }\n\n  /** Get set uv */\n  set uv(value: VertexAttributeArray2D) {\n    this.attributes[VertexArray.AttributeNames.UV] = value;\n  }\n  get uv() {\n    return this.attributes[VertexArray.AttributeNames.UV];\n  }\n\n  get hasUV(){\n    return this.hasAttribute(VertexArray.AttributeNames.UV);\n  }\n\n  abstract addVertex(v: VType | any): void;\n  abstract getBounds(): BoundingBox3D;\n  protected _uid: string = \"\";\n\n  getAttributeArray(name: string) {\n    return this.attributes[name];\n  }\n\n  ApplyMatrix(m: Mat3 | Mat4) {\n    this.position.ApplyMatrix(m);\n    if (this.normal) {\n      let m4 = m instanceof Mat4 ? m : Mat4.From2DMat3(m);\n      let mnorm = m4.getInverse()?.getTranspose();\n      if (!mnorm) {\n        throw new Error(`tried to apply singular matrix to normals...`);\n      }\n      this.normal.ApplyMatrix(mnorm);\n    }\n  }\n\n  GetTransformedBy(m:Mat3|Mat4){\n    let rval = this.clone();\n    rval.ApplyMatrix(m);\n    return rval;\n  }\n\n  get uid() {\n    return this._uid;\n  }\n\n  /**\n   * Returns the number of vertices\n   * @returns {number}\n   */\n  get nVerts():number{\n    return this.position.nVerts;\n  }\n\n  clone(): this {\n    let cfunc: any = this.constructor as any;\n    let clone = new cfunc();\n    for (let atr in this.attributes) {\n      clone.attributes[atr] = this.attributes[atr].clone();\n    }\n    if(this.indices) {\n    clone.indices = this.indices.clone();\n    }\n    return clone;\n  }\n\n  toJSON() {\n    var rval: { [name: string]: any } = {};\n    for (let k in this) {\n      // @ts-ignore\n      rval[k] = this[k];\n    }\n    return rval;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}