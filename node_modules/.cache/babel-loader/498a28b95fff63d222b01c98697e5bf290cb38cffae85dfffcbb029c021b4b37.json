{"ast":null,"code":"import { Mat3 } from \"../../math\";\nimport { VertexArray2D } from \"../../geometry\";\nimport { ANodeModelSubclass } from \"./NodeModelSubclass\";\nimport { ANodeModel3D } from \"./ANodeModel3D\";\nexport class ANodeModel2D extends ANodeModelSubclass {\n  /** Get set zValue */\n  set zValue(value) {\n    this._zValue = value;\n    this.signalTransformUpdate();\n  }\n  get zValue() {\n    return this._zValue;\n  }\n  constructor(verts, transform, ...args) {\n    super(verts, transform);\n    this._zValue = 0;\n    if (!this.verts) {\n      this._setVerts(new VertexArray2D());\n    }\n    // this._transform = new Mat3();\n    // this._setVerts(new VertexArray2D());\n  }\n  get transform() {\n    return this._transform;\n  }\n  setTransformToIdentity() {\n    this._transform = Mat3.Identity();\n  }\n  setTransform(transform) {\n    if (transform instanceof Mat3) {\n      this._transform = transform;\n      return;\n    } else {\n      let m3 = new Mat3();\n      let m4 = transform.getMat4();\n      m3.m00 = m4.m00;\n      m3.m10 = m4.m10;\n      m3.m01 = m4.m01;\n      m3.m11 = m4.m11;\n      m3.c2 = m4.c3.Point3D;\n      this._transform = m3;\n    }\n    // this.signalTransformUpdate();\n  }\n\n  /**\n   * Right now, bounds are only transformed by the model's current (local) transform\n   * @returns {BoundingBox2D}\n   */\n  getBounds() {\n    let b = this.verts.getBounds().getBoundsXY();\n    b.transform = this.transform;\n    return b;\n  }\n\n  /**\n   * Right now, bounds are only transformed by the model's current (local) transform\n   * @returns {BoundingBox2D}\n   */\n  getBounds2D() {\n    let b = this.verts.getBounds().getBoundsXY();\n    b.transform = this.transform;\n    return b;\n  }\n\n  /**\n   * Right now, bounds are only transformed by the model's current (local) transform\n   * @returns {BoundingBox3D}\n   */\n  getBounds3D() {\n    let b = this.verts.getBounds();\n    b.transform = this.transform.Mat4From2DH();\n    return b;\n  }\n\n  /**\n   * Right now, bounds are only transformed by the model's current (local) transform\n   * @returns {BoundingBox3D}\n   */\n  getBoundsXY() {\n    return this.getBounds();\n  }\n\n  /**\n   * Returns the transform from object coordinates (the coordinate system where this.verts is\n   * defined) to world coordinates\n   * @returns {TransformType}\n   */\n  getWorldTransform() {\n    let parent = this.parent;\n    if (parent instanceof ANodeModel3D) {\n      throw new Error(\"Mixing 2D and 3D Node models not supported yet!\");\n    }\n    throw new Error(\"Not Implemented in A1!\");\n  }\n}","map":{"version":3,"names":["Mat3","VertexArray2D","ANodeModelSubclass","ANodeModel3D","ANodeModel2D","zValue","value","_zValue","signalTransformUpdate","constructor","verts","transform","args","_setVerts","_transform","setTransformToIdentity","Identity","setTransform","m3","m4","getMat4","m00","m10","m01","m11","c2","c3","Point3D","getBounds","b","getBoundsXY","getBounds2D","getBounds3D","Mat4From2DH","getWorldTransform","parent","Error"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/scene/nodeModel/ANodeModel2D.ts"],"sourcesContent":["import {Color, Mat3, Matrix, NodeTransform3D, TransformationInterface} from \"../../math\";\nimport {BoundingBox2D, BoundingBox3D, HasBounds2D, VertexArray2D, VertexArray3D} from \"../../geometry\";\nimport {ANodeModelSubclass} from \"./NodeModelSubclass\";\nimport {ANodeModel} from \"./ANodeModel\";\nimport {ANodeModel3D} from \"./ANodeModel3D\";\nimport {ANodeTransformModel2D} from \"./ANodeTransformModel2D\";\n\nexport class ANodeModel2D extends ANodeModelSubclass<Mat3, VertexArray2D> implements HasBounds2D{\n    _zValue:number=0;\n    /** Get set zValue */\n    set zValue(value){\n        this._zValue = value;\n        this.signalTransformUpdate();\n    }\n    get zValue(){return this._zValue;}\n    constructor(verts?:VertexArray2D, transform?:Mat3, ...args:any[]) {\n        super(verts, transform);\n        if(!this.verts){\n            this._setVerts(new VertexArray2D());\n        }\n        // this._transform = new Mat3();\n        // this._setVerts(new VertexArray2D());\n\n    }\n\n    get transform(): Mat3 {\n        return this._transform as Mat3;\n    }\n\n    setTransformToIdentity(){\n        this._transform = Mat3.Identity();\n    }\n\n    setTransform(transform:TransformationInterface){\n        if(transform instanceof Mat3){\n            this._transform = transform;\n            return;\n        }else {\n            let m3 = new Mat3();\n            let m4 = transform.getMat4()\n            m3.m00 = m4.m00;\n            m3.m10 = m4.m10;\n            m3.m01 = m4.m01;\n            m3.m11 = m4.m11;\n            m3.c2 = m4.c3.Point3D;\n            this._transform = m3;\n        }\n        // this.signalTransformUpdate();\n    }\n\n    /**\n     * Right now, bounds are only transformed by the model's current (local) transform\n     * @returns {BoundingBox2D}\n     */\n    getBounds(): BoundingBox2D {\n        let b = this.verts.getBounds().getBoundsXY();\n        b.transform = this.transform;\n        return b;\n    }\n\n    /**\n     * Right now, bounds are only transformed by the model's current (local) transform\n     * @returns {BoundingBox2D}\n     */\n    getBounds2D(): BoundingBox2D {\n        let b = this.verts.getBounds().getBoundsXY();\n        b.transform = this.transform;\n        return b;\n    }\n\n    /**\n     * Right now, bounds are only transformed by the model's current (local) transform\n     * @returns {BoundingBox3D}\n     */\n    getBounds3D(): BoundingBox3D {\n        let b = this.verts.getBounds();\n        b.transform = this.transform.Mat4From2DH();\n        return b;\n    }\n\n    /**\n     * Right now, bounds are only transformed by the model's current (local) transform\n     * @returns {BoundingBox3D}\n     */\n    getBoundsXY(): BoundingBox2D {\n        return this.getBounds();\n    }\n\n    /**\n     * Returns the transform from object coordinates (the coordinate system where this.verts is\n     * defined) to world coordinates\n     * @returns {TransformType}\n     */\n    getWorldTransform():Mat3{\n        let parent = this.parent;\n        if(parent instanceof ANodeModel3D){\n            throw new Error(\"Mixing 2D and 3D Node models not supported yet!\")\n        }\n        throw new Error(\"Not Implemented in A1!\")\n    }\n\n}\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}