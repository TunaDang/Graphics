{"ast":null,"code":"import { AInteractionMode, BasicInteractionModes } from \"./AInteractionMode\";\n// export enum BasicInteractionModes{\n//     default='default'\n// }\n\nexport class AInteractionModeMap {\n  getGUISelectableModesOptions() {\n    let rval = {};\n    // let rval = [];\n    for (let m in this.modes) {\n      if (this.modes[m].isGUISelectable) {\n        rval[m] = m;\n      }\n    }\n    return rval;\n  }\n  getGUISelectableModesList() {\n    let rval = [];\n    for (let m in this.modes) {\n      if (this.modes[m].isGUISelectable) {\n        rval.push(m);\n      }\n    }\n    return rval;\n  }\n  // get _activeModeName(){\n  //     if(this._activeModeNames.length===1) {\n  //         return this._activeModeNames[0]\n  //     }else{\n  //         throw new Error(\"Multiple interaction modes are active\");\n  //     }\n  // }\n\n  // get activeMode(){\n  //     return this.modes[this._activeModeName];\n  // }\n\n  getActiveModeNames() {\n    let rval = [];\n    for (let m in this.modes) {\n      if (this.modes[m].active) {\n        rval.push(m);\n      }\n    }\n    return rval;\n  }\n\n  /**\n   * Creates mode map. Creates one default mode.\n   * @param owner\n   */\n  constructor(owner) {\n    this.modes = {};\n    // private _activeModeNames:string[]=[];\n    this.owner = void 0;\n    this.owner = owner;\n    this.defineMode(BasicInteractionModes.default);\n    this.setActiveMode(BasicInteractionModes.default);\n  }\n  defineMode(name, mode) {\n    if (name in this.modes) {\n      console.warn(`you are redefining interaction mode ${name}`);\n      this.modes[name].deactivate();\n    }\n    if (mode === undefined) {\n      this.modes[name] = new AInteractionMode(name, this.owner);\n    } else {\n      this.modes[name] = mode;\n    }\n  }\n  modeIsDefined(name) {\n    return name in this.modes;\n  }\n  undefineMode(name) {\n    if (name in this.modes) {\n      this.modes[name].deactivate();\n      delete this.modes[name];\n    } else {\n      console.warn(`you are trying to undefine interaction mode ${name} that doesn't exist`);\n    }\n  }\n  clearAllModes() {\n    for (let modeName in this.modes) {\n      this.undefineMode(modeName);\n    }\n  }\n  _getActiveModes() {\n    const activeModes = [];\n    for (const mode in this.modes) {\n      if (this.modes[mode].active) {\n        activeModes.push(this.modes[mode]);\n      }\n    }\n    return activeModes;\n  }\n  _setActiveInteractionModes(modeNames) {\n    const oldActiveModes = this._getActiveModes();\n    for (const oldmode of oldActiveModes) {\n      if (!modeNames.includes(oldmode.name)) {\n        oldmode.deactivate();\n      }\n    }\n    for (let modeName of modeNames) {\n      // if(!this.modes[modeName]){\n      //     console.log(modeName);\n      // }\n      if (!this.modes[modeName].active) {\n        this.modes[modeName].activate();\n      }\n    }\n    // this._activeModeNames=modeNames;\n  }\n  setActiveMode(modeName) {\n    this._setActiveInteractionModes([modeName]);\n  }\n  _activateAllModes() {\n    this._setActiveInteractionModes(Object.keys(this.modes));\n  }\n  deactivateAll() {\n    this._setActiveInteractionModes([]);\n  }\n  dispose() {\n    this.clearAllModes();\n    // this.deactivateAll();\n  }\n}","map":{"version":3,"names":["AInteractionMode","BasicInteractionModes","AInteractionModeMap","getGUISelectableModesOptions","rval","m","modes","isGUISelectable","getGUISelectableModesList","push","getActiveModeNames","active","constructor","owner","defineMode","default","setActiveMode","name","mode","console","warn","deactivate","undefined","modeIsDefined","undefineMode","clearAllModes","modeName","_getActiveModes","activeModes","_setActiveInteractionModes","modeNames","oldActiveModes","oldmode","includes","activate","_activateAllModes","Object","keys","deactivateAll","dispose"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/interaction/AInteractionModeMap.ts"],"sourcesContent":["import {AInteractionMode, BasicInteractionModes} from \"./AInteractionMode\";\nimport {HasInteractions} from \"../base/amvc/HasInteractions\";\n\n// export enum BasicInteractionModes{\n//     default='default'\n// }\n\nexport class AInteractionModeMap{\n    public modes:{[name:string]:AInteractionMode}={};\n    // private _activeModeNames:string[]=[];\n    public owner:HasInteractions;\n\n\n    getGUISelectableModesOptions(){\n        let rval:{[name:string]:string}={}\n        // let rval = [];\n        for(let m in this.modes){\n            if(this.modes[m].isGUISelectable){\n                rval[m]=m;\n            }\n        }\n        return rval;\n    }\n    getGUISelectableModesList(){\n        let rval = [];\n        for(let m in this.modes){\n            if(this.modes[m].isGUISelectable){\n                rval.push(m);\n            }\n        }\n        return rval;\n    }\n    // get _activeModeName(){\n    //     if(this._activeModeNames.length===1) {\n    //         return this._activeModeNames[0]\n    //     }else{\n    //         throw new Error(\"Multiple interaction modes are active\");\n    //     }\n    // }\n\n    // get activeMode(){\n    //     return this.modes[this._activeModeName];\n    // }\n\n    getActiveModeNames(){\n        let rval = [];\n        for(let m in this.modes){\n            if(this.modes[m].active){\n                rval.push(m);\n            }\n        }\n        return rval;\n    }\n\n    /**\n     * Creates mode map. Creates one default mode.\n     * @param owner\n     */\n    constructor(owner:HasInteractions){\n        this.owner = owner;\n        this.defineMode(BasicInteractionModes.default);\n        this.setActiveMode(BasicInteractionModes.default);\n    }\n\n    defineMode(name:string, mode?:AInteractionMode){\n        if(name in this.modes){\n            console.warn(`you are redefining interaction mode ${name}`);\n            this.modes[name].deactivate();\n        }\n        if(mode ===undefined){\n            this.modes[name]=new AInteractionMode(name, this.owner);\n        }else{\n            this.modes[name]=mode;\n        }\n\n    }\n\n    modeIsDefined(name:string){\n        return name in this.modes;\n    }\n\n    undefineMode(name:string){\n        if(name in this.modes){\n            this.modes[name].deactivate();\n            delete this.modes[name];\n        }else{\n            console.warn(`you are trying to undefine interaction mode ${name} that doesn't exist`);\n        }\n    }\n\n    clearAllModes(){\n        for(let modeName in this.modes){\n            this.undefineMode(modeName);\n        }\n    }\n\n    _getActiveModes(){\n        const activeModes = [];\n        for(const mode in this.modes){\n            if(this.modes[mode].active){\n                activeModes.push(this.modes[mode]);\n            }\n        }\n        return activeModes;\n    }\n    _setActiveInteractionModes(modeNames:string[]){\n        const oldActiveModes = this._getActiveModes();\n        for(const oldmode of oldActiveModes){\n            if(!modeNames.includes(oldmode.name)){\n                oldmode.deactivate();\n            }\n        }\n        for(let modeName of modeNames){\n\n            // if(!this.modes[modeName]){\n            //     console.log(modeName);\n            // }\n            if(!this.modes[modeName].active){\n                this.modes[modeName].activate();\n            }\n        }\n        // this._activeModeNames=modeNames;\n    }\n    setActiveMode(modeName:string){\n        this._setActiveInteractionModes([modeName]);\n    }\n    _activateAllModes(){\n        this._setActiveInteractionModes(Object.keys(this.modes));\n    }\n    deactivateAll(){\n        this._setActiveInteractionModes([]);\n    }\n\n    dispose(){\n        this.clearAllModes();\n        // this.deactivateAll();\n    }\n\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}