{"ast":null,"code":"var _dec, _class, _dec2, _class2, _dec3, _class3, _dec4, _class4;\nimport * as THREE from \"three\";\nimport { ASerializable, AObject } from \"../../base\";\nimport { AMaterialModelBase } from \"./AMaterialModel\";\nimport { Color } from \"../../math\";\nimport { ShaderManager } from \"./ShaderManager\";\nimport { AShaderModel, AShaderModelBase } from \"./AShaderModel\";\nimport { ALineShaderModel } from \"./shadermodels/ALineShaderModel\";\nimport { ALineMaterialModel } from \"./ALineMaterialModel\";\n// import {ATexture} from \"../ATexture\";\nimport { DefaultMaterials } from \"./MaterialConstants\";\nexport let ANormalMaterialModel = (_dec = ASerializable(\"ANormalMaterialModel\"), _dec(_class = class ANormalMaterialModel extends AMaterialModelBase {\n  constructor() {\n    super(DefaultMaterials.Normal, THREE.MeshNormalMaterial, {}, {\n      // color: Color.FromString('#888888').asThreeJS(),\n      transparent: true,\n      opacity: 1,\n      side: THREE.DoubleSide,\n      depthWrite: true,\n      metalness: 0.0,\n      roughness: 1.0\n    });\n  }\n  getMaterialGUIParams(material) {\n    const self = this;\n    return {};\n  }\n}) || _class);\nexport let ABasicMaterialModel = (_dec2 = ASerializable(\"ABasicMaterialModel\"), _dec2(_class2 = class ABasicMaterialModel extends AMaterialModelBase {\n  constructor() {\n    super(DefaultMaterials.Basic, THREE.MeshBasicMaterial, {}, {\n      color: Color.FromString(\"#00aa00\").asThreeJS(),\n      transparent: true,\n      opacity: 1,\n      side: THREE.DoubleSide,\n      depthWrite: true\n    });\n  }\n  get color() {\n    return Color.FromThreeJS(this.sharedParameters['color']);\n  }\n  set color(c) {\n    this.sharedParameters['color'] = c.asThreeJS();\n  }\n  getMaterialGUIParams(material) {\n    const self = this;\n    return {\n      // ...AMaterialModelBase.MaterialGUIColorControl(material),\n      ...AMaterialModelBase.MaterialGUIControl(material, 'opacity', 1, {\n        min: 0,\n        max: 1,\n        step: 0.01\n      })\n    };\n  }\n}) || _class2);\nexport let AStandardMaterialModel = (_dec3 = ASerializable(\"AStandardMaterialModel\"), _dec3(_class3 = class AStandardMaterialModel extends AMaterialModelBase {\n  constructor() {\n    super(DefaultMaterials.Standard, THREE.MeshStandardMaterial, {}, {\n      // color: Color.FromString('#888888').asThreeJS(),\n      transparent: true,\n      opacity: 1,\n      side: THREE.DoubleSide,\n      depthWrite: true,\n      metalness: 0.0,\n      roughness: 1.0\n    });\n  }\n  getMaterialGUIParams(material) {\n    const self = this;\n    return {\n      // ...AMaterialModelBase.MaterialGUIColorControl(material),\n      ...AMaterialModelBase.MaterialGUIControl(material, 'opacity', 1, {\n        min: 0,\n        max: 1,\n        step: 0.01\n      }),\n      ...AMaterialModelBase.MaterialGUIControl(material, 'roughness', 1, {\n        min: 0,\n        max: 1,\n        step: 0.01\n      }),\n      ...AMaterialModelBase.MaterialGUIControl(material, 'metalness', 0, {\n        min: 0,\n        max: 1,\n        step: 0.01\n      })\n    };\n  }\n}) || _class3);\nexport let ABasicLineMaterialModel = (_dec4 = ASerializable(\"ABasicLineMaterialModel\"), _dec4(_class4 = class ABasicLineMaterialModel extends AMaterialModelBase {\n  constructor() {\n    super(DefaultMaterials.LineBasicMaterial, THREE.LineBasicMaterial, {}, {\n      transparent: true,\n      opacity: 1,\n      side: THREE.DoubleSide,\n      depthWrite: true,\n      vertexColors: true\n    });\n  }\n  getMaterialGUIParams(material) {\n    const self = this;\n    return {\n      // ...AMaterialModelBase.MaterialGUIColorControl(material),\n      ...AMaterialModelBase.MaterialGUIControl(material, 'opacity', 1, {\n        min: 0,\n        max: 1,\n        step: 0.01\n      })\n    };\n  }\n}) || _class4);\n\n// @ASerializable(\"ATexturedMaterialModel\")\n// export class  ATexturedMaterialModel extends AMaterialModelBase<MeshStandardMaterialParameters> {\n//     constructor(texturePath:string) {\n//         super(\n//             DefaultMaterials.Standard,\n//             THREE.MeshStandardMaterial,\n//             {},\n//             {\n//                 transparent: true,\n//                 opacity: 1,\n//                 side: THREE.DoubleSide,\n//                 depthWrite: true,\n//                 metalness: 0.0,\n//                 roughness: 1.0,\n//                 map:new THREE.TextureLoader().load(texturePath),\n//             });\n//     }\n//\n//     getMaterialGUIParams(material:AMaterial){\n//         const self = this;\n//         return {\n//             // ...AMaterialModelBase.MaterialGUIColorControl(material),\n//             ...AMaterialModelBase.MaterialGUIControl(material, 'opacity', 1, {\n//                 min:0,\n//                 max:1,\n//                 step:0.01\n//             }),\n//             ...AMaterialModelBase.MaterialGUIControl(material, 'roughness', 1, {\n//                 min:0,\n//                 max:1,\n//                 step:0.01\n//             }),\n//             ...AMaterialModelBase.MaterialGUIControl(material, 'metalness', 0, {\n//                 min:0,\n//                 max:1,\n//                 step:0.01\n//             })\n//         }\n//     }\n// }\n\n// ShaderManager.LoadShader('toon', 'toon/toon.vert.glsl', 'toon/toon.frag.glsl');\n// @ASerializable(\"CustomToonShaderModel\")\n// export class CustomToonShaderModel extends AShaderModel{\n//     constructor() {\n//         super('toon');\n//     }\n//\n//     CreateMaterial(...args:any[]){\n//         let mat = super.CreateMaterial();\n//         mat.setUniform('ambient', 0.2);\n//         mat.setUniform('exposure', 1.0);\n//         mat.setUniform('specularExp', 10);\n//         mat.setUniform('specular', 1.0);\n//         mat.setUniform('diffuse', 2.5);\n//         mat.setUniform('specularCutoff', 0.95);\n//         mat.setUniform('inkingCutoff', 0.2);\n//         mat.setUniform('TOON', 1.0);\n//         mat.setUniformColor('mainColor', Color.FromString(\"#aaaaaa\"))\n//         // mat.setTexture('color','trippy.jpeg')\n//         return mat;\n//     }\n//\n//     getMaterialGUIParams(material:AShaderMaterial){\n//         const self = this;\n//         return {\n//             ...AShaderModelBase.ShaderUniformGUIColorControl(material, 'mainColor'),\n//             ...AShaderModelBase.ShaderUniformGUIControl(material, 'TOON', 0.0, {\n//                 min:0,\n//                 max:1,\n//                 step:0.01\n//             }),\n//             ...AShaderModelBase.ShaderUniformGUIControl(material, 'specularExp', 10, {\n//                 min:0,\n//                 max:100,\n//                 step:0.01\n//             }),\n//             ...AShaderModelBase.ShaderUniformGUIControl(material, 'specular', 1.0, {\n//                 min:0,\n//                 max:5,\n//                 step:0.01\n//             }),\n//             ...AShaderModelBase.ShaderUniformGUIControl(material, 'diffuse', 1.0, {\n//                 min:0,\n//                 max:5,\n//                 step:0.01\n//             }),\n//             ...AShaderModelBase.ShaderUniformGUIControl(material, 'ambient', 1.0, {\n//                 min:0,\n//                 max:2,\n//                 step:0.01\n//             }),\n//             ...AShaderModelBase.ShaderUniformGUIControl(material, 'exposure', 1, {\n//                 min:0,\n//                 max:20,\n//                 step:0.01\n//             }),\n//             ...AShaderModelBase.ShaderUniformGUIControl(material, 'specularCutoff', 0.95, {\n//                 min:0,\n//                 max:1,\n//                 step:0.001\n//             }),\n//             ...AShaderModelBase.ShaderUniformGUIControl(material, 'inkingCutoff', 0.95, {\n//                 min:0,\n//                 max:1,\n//                 step:0.001\n//             }),\n//         }\n//     }\n//\n//\n//     _CreateTHREEJS(){\n//         let uniforms = {uniforms:THREE.UniformsUtils.merge([\n//                 THREE.UniformsLib['lights'],\n//                 {...this.uniforms}\n//             ])};\n//         return new this.materialClass({\n//             vertexShader: this.vertexSource,\n//             fragmentShader: this.fragSource,\n//             vertexColors: true,\n//             ...this.settingArgs,\n//             ...this.defaults,\n//             ...uniforms,\n//             ...this.sharedParameters,\n//         });\n//     }\n//\n// }\n\nexport class AMaterialManager extends AObject {\n  get ClassConstructor() {\n    return this.constructor;\n  }\n  constructor() {\n    super();\n    this.materials = void 0;\n    this.materialsLoadedPromise = void 0;\n    this.materials = {};\n    this.materialsLoadedPromise = this.initMaterialModels();\n  }\n  async initMaterialModels() {\n    const self = this;\n    this.setMaterialModel(DefaultMaterials.Basic, new ABasicMaterialModel());\n    this.setMaterialModel(DefaultMaterials.Standard, new AStandardMaterialModel());\n    this.setMaterialModel(DefaultMaterials.LineBasicMaterial, new ABasicLineMaterialModel());\n    this.setMaterialModel(DefaultMaterials.LineMaterial, new ALineMaterialModel());\n\n    // await ShaderManager._shaderPromises['standard'];\n    // self.setMaterialModel(\n    //     'Standard',\n    //     new AShaderModel('standard')\n    // )\n\n    // await ShaderManager._shaderPromises['normal'];\n    // self.setMaterialModel(\n    //     'Normals',\n    //     new AShaderModel('normal')\n    // )\n  }\n  createLineShaderMaterial() {\n    // return this.CreateMaterial(DefaultMaterials.LINE_SHADER);\n    return this.CreateMaterial(DefaultMaterials.LineMaterial);\n  }\n  createRGBAShaderMaterial() {\n    return this.CreateMaterial(DefaultMaterials.RGBA_SHADER);\n  }\n  // createTexturedShaderMaterial(){\n  //     return this.CreateMaterial(DefaultMaterials.TEXTURED_SHADER);\n  // }\n  createBasicShaderMaterial() {\n    return this.CreateMaterial(DefaultMaterials.Basic);\n  }\n  getGUIMaterialOptionsList() {\n    // await this.materialsLoadedPromise;\n    let rval = {};\n    for (let m in this.materials) {\n      rval[m] = m;\n    }\n    return rval;\n  }\n  async setMaterialModel(name, m) {\n    if (m instanceof AShaderModelBase) {\n      await m.sourcesLoadedPromise;\n    }\n    this.materials[name] = m;\n  }\n  async setLoadedShaderModel(name) {\n    await ShaderManager._shaderPromises[name];\n    return this.setMaterialModel(name, new AShaderModel(name));\n  }\n  async loadShaderModel(name) {\n    let shaderSource = ShaderManager.GetShaderSource(name);\n    if (shaderSource === undefined) {\n      await ShaderManager.LoadShader(name);\n    }\n    return this.setMaterialModel(name, new AShaderModel(name));\n  }\n  async loadLineShaderModel(name) {\n    let shaderSource = ShaderManager.GetShaderSource(name);\n    if (shaderSource === undefined) {\n      await ShaderManager.LoadShader(name);\n    }\n    return this.setMaterialModel(name, new ALineShaderModel(name));\n  }\n  getMaterialModel(name) {\n    return this.materials[name];\n  }\n  getShaderMaterialModel(name) {\n    return this.materials[name];\n  }\n  CreateMaterial(modelName, ...args) {\n    return this.getMaterialModel(modelName).CreateMaterial(...args);\n  }\n  CreateShaderMaterial(modelName, ...args) {\n    return this.getMaterialModel(modelName).CreateMaterial(...args);\n  }\n}\nAMaterialManager.DefaultMaterials = DefaultMaterials;","map":{"version":3,"names":["THREE","ASerializable","AObject","AMaterialModelBase","Color","ShaderManager","AShaderModel","AShaderModelBase","ALineShaderModel","ALineMaterialModel","DefaultMaterials","ANormalMaterialModel","_dec","_class","constructor","Normal","MeshNormalMaterial","transparent","opacity","side","DoubleSide","depthWrite","metalness","roughness","getMaterialGUIParams","material","self","ABasicMaterialModel","_dec2","_class2","Basic","MeshBasicMaterial","color","FromString","asThreeJS","FromThreeJS","sharedParameters","c","MaterialGUIControl","min","max","step","AStandardMaterialModel","_dec3","_class3","Standard","MeshStandardMaterial","ABasicLineMaterialModel","_dec4","_class4","LineBasicMaterial","vertexColors","AMaterialManager","ClassConstructor","materials","materialsLoadedPromise","initMaterialModels","setMaterialModel","LineMaterial","createLineShaderMaterial","CreateMaterial","createRGBAShaderMaterial","RGBA_SHADER","createBasicShaderMaterial","getGUIMaterialOptionsList","rval","m","name","sourcesLoadedPromise","setLoadedShaderModel","_shaderPromises","loadShaderModel","shaderSource","GetShaderSource","undefined","LoadShader","loadLineShaderModel","getMaterialModel","getShaderMaterialModel","modelName","args","CreateShaderMaterial"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/rendering/material/AMaterialManager.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport {LineBasicMaterialParameters, MeshBasicMaterialParameters} from \"three\";\nimport {ASerializable, AObject} from \"../../base\";\nimport {AMaterialModelBase} from \"./AMaterialModel\";\nimport {AMaterial} from \"./AMaterial\";\nimport {Color} from \"../../math\";\nimport {MeshStandardMaterialParameters} from \"three/src/materials/MeshStandardMaterial\";\nimport {ShaderManager} from \"./ShaderManager\";\nimport {AShaderModel, AShaderModelBase} from \"./AShaderModel\";\nimport {AShaderMaterial} from \"./AShaderMaterial\";\nimport {ALineShaderModel} from \"./shadermodels/ALineShaderModel\";\nimport {LineMaterial, LineMaterialParameters} from \"three/examples/jsm/lines/LineMaterial\";\nimport {ALineMaterialModel} from \"./ALineMaterialModel\";\n// import {ATexture} from \"../ATexture\";\nimport {DefaultMaterials} from \"./MaterialConstants\";\n\n\n@ASerializable(\"ANormalMaterialModel\")\nexport class  ANormalMaterialModel extends AMaterialModelBase<MeshStandardMaterialParameters> {\n    constructor() {\n        super(\n            DefaultMaterials.Normal,\n            THREE.MeshNormalMaterial,\n            {},\n            {\n                // color: Color.FromString('#888888').asThreeJS(),\n                transparent: true,\n                opacity: 1,\n                side: THREE.DoubleSide,\n                depthWrite: true,\n                metalness: 0.0,\n                roughness: 1.0,\n            });\n    }\n\n    getMaterialGUIParams(material:AMaterial){\n        const self = this;\n        return {\n        }\n    }\n}\n\n\n@ASerializable(\"ABasicMaterialModel\")\nexport class  ABasicMaterialModel extends AMaterialModelBase<MeshBasicMaterialParameters>{\n    constructor() {\n        super(\n            DefaultMaterials.Basic,\n            THREE.MeshBasicMaterial,\n            {},\n            {\n                color: Color.FromString(\"#00aa00\").asThreeJS(),\n                transparent: true,\n                opacity: 1,\n                side: THREE.DoubleSide,\n                depthWrite: true\n            });\n    }\n    get color(){\n        return Color.FromThreeJS(this.sharedParameters['color']);\n    }\n    set color(c:Color){\n        this.sharedParameters['color'] = c.asThreeJS();\n    }\n    getMaterialGUIParams(material:AMaterial){\n        const self = this;\n        return {\n            // ...AMaterialModelBase.MaterialGUIColorControl(material),\n            ...AMaterialModelBase.MaterialGUIControl(material, 'opacity', 1, {\n                min:0,\n                max:1,\n                step:0.01\n            })\n        }\n    }\n}\n\n@ASerializable(\"AStandardMaterialModel\")\nexport class  AStandardMaterialModel extends AMaterialModelBase<MeshStandardMaterialParameters> {\n    constructor() {\n        super(\n            DefaultMaterials.Standard,\n            THREE.MeshStandardMaterial,\n            {},\n            {\n                // color: Color.FromString('#888888').asThreeJS(),\n                transparent: true,\n                opacity: 1,\n                side: THREE.DoubleSide,\n                depthWrite: true,\n                metalness: 0.0,\n                roughness: 1.0,\n            });\n    }\n\n    getMaterialGUIParams(material:AMaterial){\n        const self = this;\n        return {\n            // ...AMaterialModelBase.MaterialGUIColorControl(material),\n            ...AMaterialModelBase.MaterialGUIControl(material, 'opacity', 1, {\n                min:0,\n                max:1,\n                step:0.01\n            }),\n            ...AMaterialModelBase.MaterialGUIControl(material, 'roughness', 1, {\n                min:0,\n                max:1,\n                step:0.01\n            }),\n            ...AMaterialModelBase.MaterialGUIControl(material, 'metalness', 0, {\n                min:0,\n                max:1,\n                step:0.01\n            })\n        }\n    }\n}\n\n\n\n\n@ASerializable(\"ABasicLineMaterialModel\")\nexport class ABasicLineMaterialModel extends AMaterialModelBase<LineBasicMaterialParameters>{\n    constructor() {\n        super(\n            DefaultMaterials.LineBasicMaterial,\n            THREE.LineBasicMaterial,\n            {},\n            {\n                transparent: true,\n                opacity: 1,\n                side: THREE.DoubleSide,\n                depthWrite: true,\n                vertexColors: true\n            });\n    }\n\n    getMaterialGUIParams(material:AMaterial){\n        const self = this;\n\n        return {\n            // ...AMaterialModelBase.MaterialGUIColorControl(material),\n            ...AMaterialModelBase.MaterialGUIControl(material, 'opacity', 1, {\n                min:0,\n                max:1,\n                step:0.01\n            })\n        }\n    }\n\n}\n\n\n// @ASerializable(\"ATexturedMaterialModel\")\n// export class  ATexturedMaterialModel extends AMaterialModelBase<MeshStandardMaterialParameters> {\n//     constructor(texturePath:string) {\n//         super(\n//             DefaultMaterials.Standard,\n//             THREE.MeshStandardMaterial,\n//             {},\n//             {\n//                 transparent: true,\n//                 opacity: 1,\n//                 side: THREE.DoubleSide,\n//                 depthWrite: true,\n//                 metalness: 0.0,\n//                 roughness: 1.0,\n//                 map:new THREE.TextureLoader().load(texturePath),\n//             });\n//     }\n//\n//     getMaterialGUIParams(material:AMaterial){\n//         const self = this;\n//         return {\n//             // ...AMaterialModelBase.MaterialGUIColorControl(material),\n//             ...AMaterialModelBase.MaterialGUIControl(material, 'opacity', 1, {\n//                 min:0,\n//                 max:1,\n//                 step:0.01\n//             }),\n//             ...AMaterialModelBase.MaterialGUIControl(material, 'roughness', 1, {\n//                 min:0,\n//                 max:1,\n//                 step:0.01\n//             }),\n//             ...AMaterialModelBase.MaterialGUIControl(material, 'metalness', 0, {\n//                 min:0,\n//                 max:1,\n//                 step:0.01\n//             })\n//         }\n//     }\n// }\n\n\n// ShaderManager.LoadShader('toon', 'toon/toon.vert.glsl', 'toon/toon.frag.glsl');\n// @ASerializable(\"CustomToonShaderModel\")\n// export class CustomToonShaderModel extends AShaderModel{\n//     constructor() {\n//         super('toon');\n//     }\n//\n//     CreateMaterial(...args:any[]){\n//         let mat = super.CreateMaterial();\n//         mat.setUniform('ambient', 0.2);\n//         mat.setUniform('exposure', 1.0);\n//         mat.setUniform('specularExp', 10);\n//         mat.setUniform('specular', 1.0);\n//         mat.setUniform('diffuse', 2.5);\n//         mat.setUniform('specularCutoff', 0.95);\n//         mat.setUniform('inkingCutoff', 0.2);\n//         mat.setUniform('TOON', 1.0);\n//         mat.setUniformColor('mainColor', Color.FromString(\"#aaaaaa\"))\n//         // mat.setTexture('color','trippy.jpeg')\n//         return mat;\n//     }\n//\n//     getMaterialGUIParams(material:AShaderMaterial){\n//         const self = this;\n//         return {\n//             ...AShaderModelBase.ShaderUniformGUIColorControl(material, 'mainColor'),\n//             ...AShaderModelBase.ShaderUniformGUIControl(material, 'TOON', 0.0, {\n//                 min:0,\n//                 max:1,\n//                 step:0.01\n//             }),\n//             ...AShaderModelBase.ShaderUniformGUIControl(material, 'specularExp', 10, {\n//                 min:0,\n//                 max:100,\n//                 step:0.01\n//             }),\n//             ...AShaderModelBase.ShaderUniformGUIControl(material, 'specular', 1.0, {\n//                 min:0,\n//                 max:5,\n//                 step:0.01\n//             }),\n//             ...AShaderModelBase.ShaderUniformGUIControl(material, 'diffuse', 1.0, {\n//                 min:0,\n//                 max:5,\n//                 step:0.01\n//             }),\n//             ...AShaderModelBase.ShaderUniformGUIControl(material, 'ambient', 1.0, {\n//                 min:0,\n//                 max:2,\n//                 step:0.01\n//             }),\n//             ...AShaderModelBase.ShaderUniformGUIControl(material, 'exposure', 1, {\n//                 min:0,\n//                 max:20,\n//                 step:0.01\n//             }),\n//             ...AShaderModelBase.ShaderUniformGUIControl(material, 'specularCutoff', 0.95, {\n//                 min:0,\n//                 max:1,\n//                 step:0.001\n//             }),\n//             ...AShaderModelBase.ShaderUniformGUIControl(material, 'inkingCutoff', 0.95, {\n//                 min:0,\n//                 max:1,\n//                 step:0.001\n//             }),\n//         }\n//     }\n//\n//\n//     _CreateTHREEJS(){\n//         let uniforms = {uniforms:THREE.UniformsUtils.merge([\n//                 THREE.UniformsLib['lights'],\n//                 {...this.uniforms}\n//             ])};\n//         return new this.materialClass({\n//             vertexShader: this.vertexSource,\n//             fragmentShader: this.fragSource,\n//             vertexColors: true,\n//             ...this.settingArgs,\n//             ...this.defaults,\n//             ...uniforms,\n//             ...this.sharedParameters,\n//         });\n//     }\n//\n// }\n\n\nexport class AMaterialManager extends AObject{\n    materials:{[name:string]:AMaterialModelBase<any>};\n    static DefaultMaterials = DefaultMaterials;\n    public materialsLoadedPromise:Promise<void>;\n\n    get ClassConstructor(){\n        return (this.constructor as (typeof AMaterialManager));\n    }\n    constructor() {\n        super();\n        this.materials={};\n        this.materialsLoadedPromise = this.initMaterialModels();\n    }\n\n    async initMaterialModels(){\n\n        const self = this;\n\n        this.setMaterialModel(\n            DefaultMaterials.Basic,\n            new ABasicMaterialModel()\n        );\n\n        this.setMaterialModel(\n            DefaultMaterials.Standard,\n            new AStandardMaterialModel()\n        );\n\n        this.setMaterialModel(\n            DefaultMaterials.LineBasicMaterial,\n            new ABasicLineMaterialModel()\n        )\n        this.setMaterialModel(\n            DefaultMaterials.LineMaterial,\n            new ALineMaterialModel()\n        )\n\n\n\n        // await ShaderManager._shaderPromises['standard'];\n        // self.setMaterialModel(\n        //     'Standard',\n        //     new AShaderModel('standard')\n        // )\n\n        // await ShaderManager._shaderPromises['normal'];\n        // self.setMaterialModel(\n        //     'Normals',\n        //     new AShaderModel('normal')\n        // )\n    }\n\n    createLineShaderMaterial(){\n        // return this.CreateMaterial(DefaultMaterials.LINE_SHADER);\n        return this.CreateMaterial(DefaultMaterials.LineMaterial);\n    }\n    createRGBAShaderMaterial(){\n        return this.CreateMaterial(DefaultMaterials.RGBA_SHADER);\n    }\n    // createTexturedShaderMaterial(){\n    //     return this.CreateMaterial(DefaultMaterials.TEXTURED_SHADER);\n    // }\n    createBasicShaderMaterial(){\n        return this.CreateMaterial(DefaultMaterials.Basic);\n    }\n\n    getGUIMaterialOptionsList(){\n        // await this.materialsLoadedPromise;\n        let rval:{[name:string]:string}= {};\n        for(let m in this.materials){\n            rval[m]=m;\n        }\n        return rval;\n    }\n\n    async setMaterialModel(name:string, m:AMaterialModelBase<any>){\n        if(m instanceof AShaderModelBase){\n            await m.sourcesLoadedPromise;\n        }\n        this.materials[name]=m;\n    }\n\n    async setLoadedShaderModel(name:string){\n        await ShaderManager._shaderPromises[name];\n        return this.setMaterialModel(\n            name,\n            new AShaderModel(name)\n        )\n    }\n\n    async loadShaderModel(name:string){\n        let shaderSource = ShaderManager.GetShaderSource(name);\n        if(shaderSource === undefined){\n            await ShaderManager.LoadShader(name);\n        }\n\n        return this.setMaterialModel(\n            name,\n            new AShaderModel(name)\n        )\n    }\n\n    async loadLineShaderModel(name:string){\n        let shaderSource = ShaderManager.GetShaderSource(name);\n        if(shaderSource === undefined){\n            await ShaderManager.LoadShader(name);\n        }\n\n        return this.setMaterialModel(\n            name,\n            new ALineShaderModel(name)\n        )\n    }\n\n    getMaterialModel(name:string){\n        return this.materials[name];\n    }\n\n    getShaderMaterialModel(name:string):AShaderModel{\n        return this.materials[name] as AShaderModel;\n    }\n\n    CreateMaterial(modelName:string, ...args:any[]){\n        return this.getMaterialModel(modelName).CreateMaterial(...args);\n    }\n\n    CreateShaderMaterial(modelName:string, ...args:any[]){\n        return this.getMaterialModel(modelName).CreateMaterial(...args) as AShaderMaterial;\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}