{"ast":null,"code":"var _dec, _class;\n/**\n * @file Main scene controller for your application\n * @description This is where you connect models to views.\n * This is done mainly by defining your model view spec and interaction modes.\n */\n\nimport { ASerializable, Color, GetAppState } from \"../anigraph\";\nimport { ASceneInteractionMode } from \"../anigraph/starter\";\nimport { SplineModel, SplineView, VehicleModel } from \"./nodes\";\nimport { VehicleView } from \"./nodes/Vehicle/VehicleView\";\nimport { App2DSceneController } from \"../anigraph/starter/App2D/App2DSceneController\";\nimport { TRACK_COLOR_MODES, TrackModel } from \"./nodes/Track/TrackModel\";\nconst newCarSpeedStateName = \"NewCarSpeed\";\n\n/**\n * This is your Main Controller class. The scene controller is responsible for managing user input with the keyboard\n * and mouse, as well as making sure that the view hierarchy matches the model heirarchy.\n */\nexport let A1SceneController = (_dec = ASerializable(\"A1SceneController\"), _dec(_class = class A1SceneController extends App2DSceneController {\n  constructor(...args) {\n    super(...args);\n    this.mainInteractionMode = void 0;\n  }\n  get model() {\n    return this._model;\n  }\n  get splineModel() {\n    return this.model.currentTrack;\n  }\n\n  /**\n   * The main customization you might do here would be to set the background color or set a background image.\n   * @returns {Promise<void>}\n   */\n  async initScene() {\n    this.setClearColor(Color.White());\n    this.initControlPanelControls();\n    await super.initScene();\n  }\n  initControlPanelControls() {\n    const appState = GetAppState();\n    const self = this;\n    appState.addSliderControl(newCarSpeedStateName, 1, 0, 2, 0.001);\n    appState.addButton(\"Spline Car\", () => {\n      self.model.addVehicle(VehicleModel.DriveModes.BezierSpline, appState.getState(newCarSpeedStateName));\n    });\n    appState.addButton(\"Linear Car\", () => {\n      self.model.addVehicle(VehicleModel.DriveModes.Linear, appState.getState(newCarSpeedStateName));\n    });\n    let track_color_options = Object.values(TRACK_COLOR_MODES);\n    appState.setGUIControlSpecKey(\"TrackColor\", {\n      options: track_color_options,\n      value: track_color_options[0],\n      onChange: selected => {\n        switch (selected) {\n          case track_color_options[0]:\n            this.model.currentTrack.setColorToStreet();\n            break;\n          case track_color_options[1]:\n            this.model.currentTrack.setColorToRandom();\n            break;\n          case track_color_options[2]:\n            this.model.currentTrack.setColorToSolid();\n            break;\n          default:\n            console.warn(`unknown track color option \"${selected}\"!`);\n            break;\n        }\n      }\n    });\n    appState.setGUIControlSpecKey(\"ControlShape\", {\n      value: true,\n      onChange: value => {\n        self.model.controlShapesVisible = value;\n      }\n    });\n  }\n\n  /**\n   * Specifies what view classes to use for different model class.\n   * If you create custom models and views, you will need to link them here by calling `addModelViewSpec` with the\n   * model class as the first argument and the view class as the second.\n   */\n  initModelViewSpecs() {\n    super.initModelViewSpecs();\n    this.addModelViewSpec(TrackModel, SplineView);\n    this.addModelViewSpec(SplineModel, SplineView);\n    this.addModelViewSpec(VehicleModel, VehicleView);\n  }\n  initInteractions() {\n    super.initInteractions();\n    const self = this;\n    this.mainInteractionMode = new ASceneInteractionMode(\"A1InteractionMode\", this, {\n      onKeyDown: (event, interaction) => {},\n      onKeyUp: (event, interaction) => {\n        if (event.key === 't') {\n          this.model.addNewTrack();\n        }\n        if (event.key === 'v') {\n          let appState = GetAppState();\n          this.model.addVehicle(VehicleModel.DriveModes.BezierSpline, appState.getState(newCarSpeedStateName));\n        }\n        if (event.key === 'b') {\n          let appState = GetAppState();\n          this.model.addVehicle(VehicleModel.DriveModes.Linear, appState.getState(newCarSpeedStateName));\n        }\n        if (event.key === '1') {\n          this.model.currentTrack.setColorToStreet();\n        }\n        if (event.key === '2') {\n          this.model.currentTrack.setColorToRandom();\n        }\n        if (event.key === '3') {\n          this.model.currentTrack.setColorTo(Color.FromString(\"#aaaaaa\"));\n        }\n        if (event.key === 'L') {\n          this.model.currentTrack.interpolationMode = SplineModel.InterpolationModes.Linear;\n        }\n        if (event.key === 'C') {\n          this.model.currentTrack.interpolationMode = SplineModel.InterpolationModes.CubicBezier;\n        }\n        if (event.key === 'q') {\n          this.model.controlShapesVisible = !this.model.controlShapesVisible;\n        }\n        if (event.key === 's') {}\n        if (event.key === 'S') {}\n        if (event.key === 'ArrowRight') {}\n        if (event.key === 'ArrowLeft') {}\n        if (event.key === 'ArrowUp') {}\n        if (event.key === 'ArrowDown') {}\n      },\n      onDragStart: (event, interaction) => {\n        let ndcCursor = event.ndcCursor;\n        if (ndcCursor) {\n          let cursorPosition = this.model.worldPointFromNDCCursor(ndcCursor);\n          interaction.cursorStartPosition = cursorPosition;\n          if (self.splineModel.nControlPoints < 1) {\n            self.splineModel.verts.addVertices([cursorPosition, cursorPosition], self.model.currentTrack.getNewTrackVertColor());\n          } else {\n            self.splineModel.verts.addVertices([cursorPosition, cursorPosition, cursorPosition], self.model.currentTrack.getNewTrackVertColor());\n          }\n          // this.newVertsColor = Color.RandomRGB();\n          this.splineModel.signalGeometryUpdate();\n        }\n      },\n      onDragMove: (event, interaction) => {\n        let ndcCursor = event.ndcCursor;\n        if (ndcCursor) {\n          let cursorPosition = this.model.worldPointFromNDCCursor(ndcCursor);\n          let startPosition = interaction.cursorStartPosition;\n          if (this.splineModel.nControlPoints > 3) {\n            this.splineModel.verts.position.setAt(this.splineModel.nControlPoints - 2, startPosition);\n            this.splineModel.verts.position.setAt(this.splineModel.nControlPoints - 1, cursorPosition);\n            this.splineModel.verts.position.setAt(this.splineModel.nControlPoints - 3, startPosition.minus(cursorPosition.minus(startPosition)));\n          } else {\n            this.splineModel.verts.position.setAt(this.splineModel.nControlPoints - 1, cursorPosition);\n          }\n          this.splineModel.signalGeometryUpdate();\n        }\n      },\n      onDragEnd: (event, interaction) => {}\n      // onClick:(event:AInteractionEvent)=>{},\n      // afterActivate:(...args:any[])=>{},\n      // afterDeactivate:(...args:any[])=>{},\n      // beforeActivate:(...args:any[])=>{},\n      // beforeDeactivate:(...args:any[])=>{},\n      //dispose:()=>{},\n    });\n    this.defineInteractionMode(\"MainInteractionMode\", this.mainInteractionMode);\n    this.setCurrentInteractionMode(\"MainInteractionMode\");\n  }\n}) || _class);","map":{"version":3,"names":["ASerializable","Color","GetAppState","ASceneInteractionMode","SplineModel","SplineView","VehicleModel","VehicleView","App2DSceneController","TRACK_COLOR_MODES","TrackModel","newCarSpeedStateName","A1SceneController","_dec","_class","constructor","args","mainInteractionMode","model","_model","splineModel","currentTrack","initScene","setClearColor","White","initControlPanelControls","appState","self","addSliderControl","addButton","addVehicle","DriveModes","BezierSpline","getState","Linear","track_color_options","Object","values","setGUIControlSpecKey","options","value","onChange","selected","setColorToStreet","setColorToRandom","setColorToSolid","console","warn","controlShapesVisible","initModelViewSpecs","addModelViewSpec","initInteractions","onKeyDown","event","interaction","onKeyUp","key","addNewTrack","setColorTo","FromString","interpolationMode","InterpolationModes","CubicBezier","onDragStart","ndcCursor","cursorPosition","worldPointFromNDCCursor","cursorStartPosition","nControlPoints","verts","addVertices","getNewTrackVertColor","signalGeometryUpdate","onDragMove","startPosition","position","setAt","minus","onDragEnd","defineInteractionMode","setCurrentInteractionMode"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/A1/A1SceneController.ts"],"sourcesContent":["/**\n * @file Main scene controller for your application\n * @description This is where you connect models to views.\n * This is done mainly by defining your model view spec and interaction modes.\n */\nimport {A1SceneModel} from \"./A1SceneModel\";\nimport {\n    ADragInteraction,\n    AInteractionEvent,\n    AKeyboardInteraction,\n    ASerializable,\n    Color,\n    GetAppState\n} from \"../anigraph\";\nimport {ASceneInteractionMode} from \"../anigraph/starter\";\nimport {SplineModel, SplineView, VehicleModel} from \"./nodes\";\nimport {VehicleView} from \"./nodes/Vehicle/VehicleView\";\nimport {App2DSceneController} from \"../anigraph/starter/App2D/App2DSceneController\";\nimport {TRACK_COLOR_MODES, TrackModel} from \"./nodes/Track/TrackModel\";\n\nconst newCarSpeedStateName = \"NewCarSpeed\";\n\n/**\n * This is your Main Controller class. The scene controller is responsible for managing user input with the keyboard\n * and mouse, as well as making sure that the view hierarchy matches the model heirarchy.\n */\n@ASerializable(\"A1SceneController\")\nexport class A1SceneController extends App2DSceneController{\n    mainInteractionMode!:ASceneInteractionMode;\n\n    get model():A1SceneModel{\n        return this._model as A1SceneModel;\n    }\n\n    get splineModel(){\n        return this.model.currentTrack;\n    }\n\n    /**\n     * The main customization you might do here would be to set the background color or set a background image.\n     * @returns {Promise<void>}\n     */\n    async initScene(): Promise<void> {\n        this.setClearColor(Color.White());\n        this.initControlPanelControls();\n        await super.initScene();\n    }\n\n    initControlPanelControls(){\n        const appState = GetAppState();\n        const self = this;\n        appState.addSliderControl(newCarSpeedStateName, 1, 0, 2, 0.001);\n        appState.addButton(\"Spline Car\", ()=>{\n            self.model.addVehicle(VehicleModel.DriveModes.BezierSpline, appState.getState(newCarSpeedStateName));\n        })\n        appState.addButton(\"Linear Car\", ()=>{\n            self.model.addVehicle(VehicleModel.DriveModes.Linear, appState.getState(newCarSpeedStateName));\n        })\n\n        let track_color_options = Object.values(TRACK_COLOR_MODES);\n        appState.setGUIControlSpecKey(\n            \"TrackColor\",\n            {\n                options: track_color_options,\n                value: track_color_options[0],\n                onChange:(selected:any)=>{\n                    switch (selected){\n                        case track_color_options[0]:\n                            this.model.currentTrack.setColorToStreet();\n                            break;\n                        case track_color_options[1]:\n                            this.model.currentTrack.setColorToRandom();\n                            break;\n                        case track_color_options[2]:\n                            this.model.currentTrack.setColorToSolid();\n                            break;\n                        default:\n                            console.warn(`unknown track color option \"${selected}\"!`);\n                            break;\n                    }\n                }\n            }\n        )\n\n        appState.setGUIControlSpecKey(\n            \"ControlShape\",\n            {\n                value: true,\n                onChange:(value:any)=>{\n                    self.model.controlShapesVisible = value;\n                }\n            }\n        )\n\n    }\n\n\n    /**\n     * Specifies what view classes to use for different model class.\n     * If you create custom models and views, you will need to link them here by calling `addModelViewSpec` with the\n     * model class as the first argument and the view class as the second.\n     */\n    initModelViewSpecs() {\n        super.initModelViewSpecs();\n        this.addModelViewSpec(TrackModel, SplineView);\n        this.addModelViewSpec(SplineModel, SplineView);\n        this.addModelViewSpec(VehicleModel, VehicleView);\n    }\n\n\n\n\n    initInteractions() {\n        super.initInteractions();\n        const self = this;\n        this.mainInteractionMode = new ASceneInteractionMode(\n            \"A1InteractionMode\",\n            this,\n            {\n                onKeyDown: (event:AInteractionEvent, interaction:AKeyboardInteraction)=>{},\n                onKeyUp:(event:AInteractionEvent, interaction:AKeyboardInteraction)=>{\n                    if(event.key==='t'){\n                        this.model.addNewTrack()\n                    }\n                    if(event.key==='v'){\n                        let appState = GetAppState();\n                        this.model.addVehicle(VehicleModel.DriveModes.BezierSpline, appState.getState(newCarSpeedStateName));\n                    }\n                    if(event.key==='b'){\n                        let appState = GetAppState();\n                        this.model.addVehicle(VehicleModel.DriveModes.Linear, appState.getState(newCarSpeedStateName));\n                    }\n\n                    if(event.key==='1'){\n                        this.model.currentTrack.setColorToStreet();\n                    }\n                    if(event.key==='2'){\n                        this.model.currentTrack.setColorToRandom();\n                    }\n                    if(event.key==='3'){\n                        this.model.currentTrack.setColorTo(Color.FromString(\"#aaaaaa\"));\n                    }\n\n                    if(event.key==='L'){\n                        this.model.currentTrack.interpolationMode=SplineModel.InterpolationModes.Linear;\n                    }\n                    if(event.key==='C'){\n                        this.model.currentTrack.interpolationMode=SplineModel.InterpolationModes.CubicBezier;\n                    }\n\n                    if(event.key==='q'){\n                        this.model.controlShapesVisible = !this.model.controlShapesVisible;\n                    }\n\n                    if(event.key==='s'){\n                    }\n                    if(event.key==='S'){\n                    }\n                    if(event.key==='ArrowRight'){\n                    }\n                    if(event.key==='ArrowLeft'){\n                    }\n                    if(event.key==='ArrowUp'){\n                    }\n                    if(event.key==='ArrowDown'){\n                    }\n                },\n                onDragStart:(event:AInteractionEvent, interaction:ADragInteraction)=>{\n                    let ndcCursor = event.ndcCursor;\n                    if(ndcCursor) {\n                        let cursorPosition = this.model.worldPointFromNDCCursor(ndcCursor)\n                        interaction.cursorStartPosition = cursorPosition;\n                        if(self.splineModel.nControlPoints<1){\n                            self.splineModel.verts.addVertices(\n                                [\n                                    cursorPosition,\n                                    cursorPosition,\n                                ],\n                                self.model.currentTrack.getNewTrackVertColor()\n                            )\n                        }else {\n                            self.splineModel.verts.addVertices(\n                                [\n                                    cursorPosition,\n                                    cursorPosition,\n                                    cursorPosition,\n                                ],\n                                self.model.currentTrack.getNewTrackVertColor()\n                            )\n                        }\n                        // this.newVertsColor = Color.RandomRGB();\n                        this.splineModel.signalGeometryUpdate();\n                    }\n                },\n                onDragMove:(event:AInteractionEvent, interaction:ADragInteraction)=>{\n                    let ndcCursor = event.ndcCursor;\n                    if(ndcCursor) {\n                        let cursorPosition = this.model.worldPointFromNDCCursor(ndcCursor)\n                        let startPosition = interaction.cursorStartPosition;\n                        if (this.splineModel.nControlPoints > 3) {\n                            this.splineModel.verts.position.setAt(this.splineModel.nControlPoints - 2, startPosition);\n                            this.splineModel.verts.position.setAt(this.splineModel.nControlPoints - 1, cursorPosition);\n                            this.splineModel.verts.position.setAt(this.splineModel.nControlPoints - 3, startPosition.minus(cursorPosition.minus(startPosition)));\n                        }else{\n                            this.splineModel.verts.position.setAt(this.splineModel.nControlPoints - 1, cursorPosition);\n                        }\n                        this.splineModel.signalGeometryUpdate();\n                    }\n                },\n                onDragEnd:(event:AInteractionEvent, interaction:ADragInteraction)=>{},\n                // onClick:(event:AInteractionEvent)=>{},\n                // afterActivate:(...args:any[])=>{},\n                // afterDeactivate:(...args:any[])=>{},\n                // beforeActivate:(...args:any[])=>{},\n                // beforeDeactivate:(...args:any[])=>{},\n                //dispose:()=>{},\n            }\n        )\n        this.defineInteractionMode(\"MainInteractionMode\", this.mainInteractionMode);\n        this.setCurrentInteractionMode(\"MainInteractionMode\");\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}