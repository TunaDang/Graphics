{"ast":null,"code":"var _dec, _class;\nimport { ANodeModel3D } from \"../../nodeModel\";\nimport { VertexArray3D } from \"../../../geometry\";\nimport { ASerializable } from \"../../../base\";\nexport let ATriangleMeshModel = (_dec = ASerializable(\"ATriangleMeshModel\"), _dec(_class = class ATriangleMeshModel extends ANodeModel3D {\n  constructor(verts, transform) {\n    super();\n    // this.transform = transform?transform.getMat4():new Mat4();\n    // this.transform = transform?\n    if (transform) {\n      this.setTransform(transform);\n    }\n    if (verts === undefined) {\n      verts = new VertexArray3D();\n    }\n    this._setVerts(verts);\n  }\n  static Create(hasNormals, hasTextureCoords, hasColors, ...args) {\n    let verts = VertexArray3D.CreateForRendering(hasNormals, hasTextureCoords, hasColors);\n    return new this(verts);\n  }\n}) || _class);","map":{"version":3,"names":["ANodeModel3D","VertexArray3D","ASerializable","ATriangleMeshModel","_dec","_class","constructor","verts","transform","setTransform","undefined","_setVerts","Create","hasNormals","hasTextureCoords","hasColors","args","CreateForRendering"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/scene/nodes/trianglemesh/ATriangleMeshModel.ts"],"sourcesContent":["import {ANodeModel3D} from \"../../nodeModel\";\nimport {Mat4} from \"../../../math\";\nimport {VertexArray3D} from \"../../../geometry\";\nimport {ASerializable} from \"../../../base\";\n\nimport type {TransformationInterface} from \"../../../math\";\n\n@ASerializable(\"ATriangleMeshModel\")\nexport class ATriangleMeshModel extends ANodeModel3D{\n    constructor(verts?:VertexArray3D, transform?:TransformationInterface) {\n        super();\n        // this.transform = transform?transform.getMat4():new Mat4();\n        // this.transform = transform?\n        if(transform){\n            this.setTransform(transform);\n        }\n        if(verts === undefined){\n            verts = new VertexArray3D();\n        }\n        this._setVerts(verts);\n    }\n\n\n    static Create(hasNormals: boolean,\n                  hasTextureCoords: boolean,\n                  hasColors: boolean, ...args:any[]){\n        let verts = VertexArray3D.CreateForRendering(hasNormals, hasTextureCoords, hasColors);\n        return new this(verts);\n    }\n}\n\n\n"],"mappings":";AAAA,SAAQA,YAAY,QAAO,iBAAiB;AAE5C,SAAQC,aAAa,QAAO,mBAAmB;AAC/C,SAAQC,aAAa,QAAO,eAAe;AAI3C,WACaC,kBAAkB,IAAAC,IAAA,GAD9BF,aAAa,CAAC,oBAAoB,CAAC,EAAAE,IAAA,CAAAC,MAAA,GAApC,MACaF,kBAAkB,SAASH,YAAY;EAChDM,WAAWA,CAACC,KAAoB,EAAEC,SAAkC,EAAE;IAClE,KAAK,CAAC,CAAC;IACP;IACA;IACA,IAAGA,SAAS,EAAC;MACT,IAAI,CAACC,YAAY,CAACD,SAAS,CAAC;IAChC;IACA,IAAGD,KAAK,KAAKG,SAAS,EAAC;MACnBH,KAAK,GAAG,IAAIN,aAAa,CAAC,CAAC;IAC/B;IACA,IAAI,CAACU,SAAS,CAACJ,KAAK,CAAC;EACzB;EAGA,OAAOK,MAAMA,CAACC,UAAmB,EACnBC,gBAAyB,EACzBC,SAAkB,EAAE,GAAGC,IAAU,EAAC;IAC5C,IAAIT,KAAK,GAAGN,aAAa,CAACgB,kBAAkB,CAACJ,UAAU,EAAEC,gBAAgB,EAAEC,SAAS,CAAC;IACrF,OAAO,IAAI,IAAI,CAACR,KAAK,CAAC;EAC1B;AACJ,CAAC,KAAAF,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}