{"ast":null,"code":"var _dec, _class;\nimport { ASerializable } from \"../../../../base\";\nimport { ANodeTransformModel2D } from \"../../../nodeModel\";\nimport { VertexArray2D } from \"../../../../geometry\";\nexport let A2DMeshModel = (_dec = ASerializable(\"A2DMeshModel\"), _dec(_class = class A2DMeshModel extends ANodeTransformModel2D {\n  constructor(verts, transform) {\n    super();\n    if (transform) {\n      this.setTransform(transform);\n    }\n    if (verts === undefined) {\n      verts = new VertexArray2D();\n    }\n    this._setVerts(verts);\n  }\n  static Create2DMeshModel(hasColors = true, hasTextureCoords = true, hasNormals = false, ...args) {\n    let verts = VertexArray2D.CreateForRendering(hasColors, hasTextureCoords, hasNormals);\n    return new this(verts);\n  }\n}) || _class);","map":{"version":3,"names":["ASerializable","ANodeTransformModel2D","VertexArray2D","A2DMeshModel","_dec","_class","constructor","verts","transform","setTransform","undefined","_setVerts","Create2DMeshModel","hasColors","hasTextureCoords","hasNormals","args","CreateForRendering"],"sources":["/Users/twist/Documents/Books/Fall 2024/Graphics/A1-Intro-To-Graphics-FA2024/src/anigraph/scene/nodes/2d/mesh2d/A2DMeshModel.ts"],"sourcesContent":["import {ASerializable} from \"../../../../base\";\nimport {ANodeTransformModel2D} from \"../../../nodeModel\";\nimport {VertexArray2D, VertexArray3D} from \"../../../../geometry\";\nimport {NodeTransform2D} from \"../../../../math\";\n\n@ASerializable(\"A2DMeshModel\")\nexport class A2DMeshModel extends ANodeTransformModel2D{\n    constructor(verts?:VertexArray2D, transform?:NodeTransform2D) {\n        super();\n        if(transform){\n            this.setTransform(transform);\n        }\n        if(verts === undefined){\n            verts = new VertexArray2D();\n        }\n        this._setVerts(verts);\n    }\n\n\n    static Create2DMeshModel(hasColors: boolean = true,\n                  hasTextureCoords: boolean = true,\n                  hasNormals: boolean = false, ...args:any[]){\n        let verts = VertexArray2D.CreateForRendering(hasColors, hasTextureCoords, hasNormals);\n        return new this(verts);\n    }\n}\n\n\n"],"mappings":";AAAA,SAAQA,aAAa,QAAO,kBAAkB;AAC9C,SAAQC,qBAAqB,QAAO,oBAAoB;AACxD,SAAQC,aAAa,QAAsB,sBAAsB;AAGjE,WACaC,YAAY,IAAAC,IAAA,GADxBJ,aAAa,CAAC,cAAc,CAAC,EAAAI,IAAA,CAAAC,MAAA,GAA9B,MACaF,YAAY,SAASF,qBAAqB;EACnDK,WAAWA,CAACC,KAAoB,EAAEC,SAA0B,EAAE;IAC1D,KAAK,CAAC,CAAC;IACP,IAAGA,SAAS,EAAC;MACT,IAAI,CAACC,YAAY,CAACD,SAAS,CAAC;IAChC;IACA,IAAGD,KAAK,KAAKG,SAAS,EAAC;MACnBH,KAAK,GAAG,IAAIL,aAAa,CAAC,CAAC;IAC/B;IACA,IAAI,CAACS,SAAS,CAACJ,KAAK,CAAC;EACzB;EAGA,OAAOK,iBAAiBA,CAACC,SAAkB,GAAG,IAAI,EACpCC,gBAAyB,GAAG,IAAI,EAChCC,UAAmB,GAAG,KAAK,EAAE,GAAGC,IAAU,EAAC;IACrD,IAAIT,KAAK,GAAGL,aAAa,CAACe,kBAAkB,CAACJ,SAAS,EAAEC,gBAAgB,EAAEC,UAAU,CAAC;IACrF,OAAO,IAAI,IAAI,CAACR,KAAK,CAAC;EAC1B;AACJ,CAAC,KAAAF,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}